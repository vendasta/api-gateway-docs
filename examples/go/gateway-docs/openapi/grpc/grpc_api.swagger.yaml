definitions:
    protobufAny:
        additionalProperties: {}
        description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".

            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        properties:
            '@type':
                description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com. As of May 2023, there are no widely used type server
                    implementations and no plans to implement one.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                type: string
        type: object
    protobufNullValue:
        default: NULL_VALUE
        description: |-
            `NullValue` is a singleton enumeration to represent the null value for the
            `Value` type union.

            The JSON representation for `NullValue` is JSON `null`.

             - NULL_VALUE: Null value.
        enum:
            - NULL_VALUE
        type: string
    rpcStatus:
        properties:
            code:
                format: int32
                type: integer
            details:
                items:
                    $ref: '#/definitions/protobufAny'
                type: array
            message:
                type: string
        type: object
    vstorepbCreateRequest:
        properties:
            entity:
                $ref: '#/definitions/vstorepbEntity'
        type: object
    vstorepbEntity:
        properties:
            data:
                $ref: '#/definitions/protobufAny'
            kind:
                type: string
            namespace:
                type: string
            v1KindId:
                title: v1 fields for pubsub forward compatability
                type: string
            v1Values:
                type: object
            v1Version:
                format: int64
                type: string
            values:
                $ref: '#/definitions/vstorepbStruct'
            version:
                format: int64
                type: string
        type: object
    vstorepbEntityResult:
        properties:
            entity:
                $ref: '#/definitions/vstorepbEntity'
            keySet:
                $ref: '#/definitions/vstorepbKeySet'
        type: object
    vstorepbGeoPoint:
        properties:
            latitude:
                format: double
                type: number
            longitude:
                format: double
                type: number
        type: object
    vstorepbGetRequest:
        properties:
            keySets:
                items:
                    $ref: '#/definitions/vstorepbKeySet'
                type: array
        type: object
    vstorepbGetResponse:
        properties:
            entities:
                items:
                    $ref: '#/definitions/vstorepbEntityResult'
                type: array
        type: object
    vstorepbKeyFilter:
        properties:
            keys:
                description: |-
                    Keys to filter by. You must always provide parent key components if you provide any children.
                    eg: keys = [PID, AG-123], rows PID:AG-123:* are matches, but if keys = [AG-123] or ["", AG-123], you will not get any matches.
                items:
                    type: string
                type: array
            prefix:
                title: |-
                    if prefix is set to True, the filter will match an incomplete prefix on the last specified key
                    eg: keys = [PID, AG-4], row PID:AG-456 is a match with partial == true, not a match otherwise
                type: boolean
        type: object
    vstorepbKeySet:
        properties:
            keys:
                items:
                    type: string
                type: array
            kind:
                type: string
            namespace:
                type: string
        type: object
    vstorepbListValue:
        properties:
            values:
                items:
                    $ref: '#/definitions/vstorepbValue'
                type: array
        type: object
    vstorepbLookupFilter:
        properties:
            keyFilter:
                $ref: '#/definitions/vstorepbKeyFilter'
            keys:
                items:
                    type: string
                title: 'Deprecated: use `filters` instead'
                type: array
            rangeFilter:
                $ref: '#/definitions/vstorepbRangeFilter'
        type: object
    vstorepbLookupRequest:
        properties:
            cursor:
                type: string
            filter:
                $ref: '#/definitions/vstorepbLookupFilter'
            kind:
                type: string
            namespace:
                type: string
            pageSize:
                format: int64
                type: string
        type: object
    vstorepbLookupResponse:
        properties:
            entities:
                items:
                    $ref: '#/definitions/vstorepbEntityResult'
                type: array
            hasMore:
                type: boolean
            nextCursor:
                type: string
        type: object
    vstorepbRangeFilter:
        properties:
            begin:
                description: Key set to start filtering from.
                items:
                    type: string
                type: array
            end:
                description: Key set to stop filtering at.
                items:
                    type: string
                type: array
        title: RangeFilter will bound results by [begin, end)
        type: object
    vstorepbScanRequest:
        properties:
            filter:
                $ref: '#/definitions/vstorepbLookupFilter'
            kind:
                type: string
            namespace:
                type: string
            startingKeySet:
                $ref: '#/definitions/vstorepbKeySet'
        type: object
    vstorepbStruct:
        properties:
            values:
                additionalProperties:
                    $ref: '#/definitions/vstorepbValue'
                type: object
        type: object
    vstorepbUpdateRequest:
        properties:
            entity:
                $ref: '#/definitions/vstorepbEntity'
        type: object
    vstorepbValue:
        properties:
            boolValue:
                description: Represents a boolean value.
                type: boolean
            bytesValue:
                format: byte
                type: string
            doubleValue:
                description: Represents a double value.
                format: double
                type: number
            geopointValue:
                $ref: '#/definitions/vstorepbGeoPoint'
            intValue:
                format: int64
                title: Represents a int64 value
                type: string
            listValue:
                $ref: '#/definitions/vstorepbListValue'
            stringValue:
                description: Represents a string value.
                type: string
            structValue:
                $ref: '#/definitions/vstorepbStruct'
            timestampValue:
                description: Represents a timestamp value.
                format: date-time
                type: string
        type: object
info:
    title: Merged API
    version: 1.0.0
paths:
    /vstorepb.VStore/Create:
        post:
            operationId: VStore_Create
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/vstorepbCreateRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/rpcStatus'
            tags:
                - VStore
    /vstorepb.VStore/Get:
        post:
            operationId: VStore_Get
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/vstorepbGetRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/vstorepbGetResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/rpcStatus'
            tags:
                - VStore
    /vstorepb.VStore/Lookup:
        post:
            operationId: VStore_Lookup
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/vstorepbLookupRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/vstorepbLookupResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/rpcStatus'
            tags:
                - VStore
    /vstorepb.VStore/Scan:
        post:
            operationId: VStore_Scan
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/vstorepbScanRequest'
            responses:
                "200":
                    description: A successful response.(streaming responses)
                    schema:
                        properties:
                            error:
                                $ref: '#/definitions/rpcStatus'
                            result:
                                $ref: '#/definitions/vstorepbEntityResult'
                        title: Stream result of vstorepbEntityResult
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/rpcStatus'
            tags:
                - VStore
    /vstorepb.VStore/Update:
        post:
            operationId: VStore_Update
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/vstorepbUpdateRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/rpcStatus'
            tags:
                - VStore
swagger: "2.0"
