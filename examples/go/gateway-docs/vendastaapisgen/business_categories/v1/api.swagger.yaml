swagger: "2.0"
info:
  title: business_categories/v1/api.proto
  version: version not set
tags:
  - name: BusinessCategoryService
consumes:
  - application/json
produces:
  - application/json
paths:
  /businesscategories.v1.BusinessCategoryService/CreatePrimaryCategory:
    post:
      operationId: BusinessCategoryService_CreatePrimaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreatePrimaryCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreatePrimaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/CreatePrimaryCategoryMapping:
    post:
      operationId: BusinessCategoryService_CreatePrimaryCategoryMapping
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreatePrimaryCategoryMappingRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/CreateSecondaryCategory:
    post:
      operationId: BusinessCategoryService_CreateSecondaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateSecondaryCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateSecondaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/DeletePrimaryCategory:
    post:
      operationId: BusinessCategoryService_DeletePrimaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Soft delete entity marked as deleted, and will be removed from searches, and gets.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeletePrimaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/DeletePrimaryCategoryMapping:
    post:
      operationId: BusinessCategoryService_DeletePrimaryCategoryMapping
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Removes mapping from list on the primary category.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeletePrimaryCategoryMappingRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/DeleteSecondaryCategory:
    post:
      operationId: BusinessCategoryService_DeleteSecondaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Soft delete entity marked as deleted, and will be removed from searches, and gets.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteSecondaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/GetAllSources:
    post:
      operationId: BusinessCategoryService_GetAllSources
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetAllSourcesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetAllSourcesRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/GetPrimaryCategory:
    post:
      operationId: BusinessCategoryService_GetPrimaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetPrimaryCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetPrimaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/GetSecondaryCategory:
    post:
      operationId: BusinessCategoryService_GetSecondaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSecondaryCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSecondaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/ListPrimaryCategories:
    post:
      operationId: BusinessCategoryService_ListPrimaryCategories
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListPrimaryCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListPrimaryCategoriesRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/ListSecondaryCategories:
    post:
      operationId: BusinessCategoryService_ListSecondaryCategories
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListSecondaryCategoriesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListSecondaryCategoriesRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/UpdatePrimaryCategory:
    post:
      operationId: BusinessCategoryService_UpdatePrimaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdatePrimaryCategoryRequest'
      tags:
        - BusinessCategoryService
  /businesscategories.v1.BusinessCategoryService/UpdateSecondaryCategory:
    post:
      operationId: BusinessCategoryService_UpdateSecondaryCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateSecondaryCategoryRequest'
      tags:
        - BusinessCategoryService
definitions:
  CreateSecondaryCategoryRequestMode:
    type: string
    enum:
      - CREATE_SECONDARY_CATEGORY_REQUEST_MODE_ADD_MAPPING_TO_PRIMARY_REQUIRED
      - CREATE_SECONDARY_CATEGORY_REQUEST_MODE_ADD_MAPPING_TO_PRIMARY_IF_NONE_EXIST
      - CREATE_SECONDARY_CATEGORY_REQUEST_MODE_DO_NOT_ADD_MAPPING_TO_PRIMARY
    default: CREATE_SECONDARY_CATEGORY_REQUEST_MODE_ADD_MAPPING_TO_PRIMARY_REQUIRED
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1AuditFields:
    type: object
    properties:
      created:
        type: string
        format: date-time
      createdBy:
        type: string
      modified:
        type: string
        format: date-time
      modifiedBy:
        type: string
      deleted:
        type: string
        format: date-time
      deletedBy:
        type: string
  v1CategorySource:
    type: object
    properties:
      sourceId:
        type: string
        description: ID of Secondary Business Category Source like Vendasta, Factual, Uberall...
    title: Definition of Secpondary Category Source
  v1CreatePrimaryCategoryMappingRequest:
    type: object
    properties:
      primaryCategoryId:
        type: string
      sourceId:
        type: string
      secondaryCategoryId:
        type: string
    title: Creates mapping on primary category
  v1CreatePrimaryCategoryRequest:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1PrimaryCategoryCreateUpdate'
    title: CRUD messages for Primary Categories
  v1CreatePrimaryCategoryResponse:
    type: object
    properties:
      primaryCategoryId:
        type: string
        title: ID (key field) (always required) (cannot be updated)
  v1CreateSecondaryCategoryRequest:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1SecondaryCategory'
      mode:
        $ref: '#/definitions/CreateSecondaryCategoryRequestMode'
        description: |-
          Creation mode, determines whether to add to mapping in both directions by updating the primary category given
          by its ID.
    title: CRUD for Secondary Categories
  v1CreateSecondaryCategoryResponse:
    type: object
    properties:
      sourceId:
        type: string
        title: Source ID (required)
      secondaryCategoryId:
        type: string
        title: Secondary Category ID (required)
  v1DeletePrimaryCategoryMappingRequest:
    type: object
    properties:
      primaryCategoryId:
        type: string
      sourceId:
        type: string
      secondaryCategoryId:
        type: string
    description: Removes mapping from list on the primary category.
  v1DeletePrimaryCategoryRequest:
    type: object
    properties:
      primaryCategoryId:
        type: string
    description: Soft delete entity marked as deleted, and will be removed from searches, and gets.
  v1DeleteSecondaryCategoryRequest:
    type: object
    properties:
      sourceId:
        type: string
        title: Source ID (required)
      secondaryCategoryId:
        type: string
        title: Secondary Category ID (required)
    description: Soft delete entity marked as deleted, and will be removed from searches, and gets.
  v1FieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
  v1GetAllSourcesRequest:
    type: object
    title: XRXX message for Sources
  v1GetAllSourcesResponse:
    type: object
    properties:
      source:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1CategorySource'
  v1GetPrimaryCategoryRequest:
    type: object
    properties:
      primaryCategoryId:
        type: string
      projectionMask:
        $ref: '#/definitions/v1FieldMask'
        title: |-
          Field mask for projections, if not provided defaults to primary_category_id,
          name, description, is_selectable, is_veritcal, vertical_id, and audit_fields
  v1GetPrimaryCategoryResponse:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1PrimaryCategory'
  v1GetSecondaryCategoryRequest:
    type: object
    properties:
      sourceId:
        type: string
        title: Source ID (required)
      secondaryCategoryId:
        type: string
        title: Secondary Category ID (required)
      projectionMask:
        $ref: '#/definitions/v1FieldMask'
        title: |-
          Field mask for projections, if not provided defaults to source_id, secondary_category_id,
          name, primary_category_id, and audit_fields
  v1GetSecondaryCategoryResponse:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1SecondaryCategory'
  v1ListPrimaryCategoriesRequest:
    type: object
    properties:
      isVertical:
        type: boolean
        title: Whether it is a vertical
      categoryMapping:
        $ref: '#/definitions/v1SecondaryCategoryMappings'
        title: Whether Primary Category contains mapping to Secondary Category
      nameTerm:
        type: string
        description: Whether the name contains this partial term anywhere in it.
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
        title: Field mask for filter fields
      pagingOptions:
        $ref: '#/definitions/v1PagedRequestOptions'
        title: Options for how to page the response for this request
      projectionMask:
        $ref: '#/definitions/v1FieldMask'
        title: |-
          Field mask for projections, if not provided defaults to primary_category_id,
          name, description, is_selectable, is_veritcal, vertical_id, and audit_fields
      sortOptions:
        $ref: '#/definitions/v1SortOptions'
        title: sort_options for how to sort results
  v1ListPrimaryCategoryResponse:
    type: object
    properties:
      category:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1PrimaryCategory'
      pagingMetadata:
        $ref: '#/definitions/v1PagedResponseMetadata'
        title: Metadata about the paging
  v1ListSecondaryCategoriesRequest:
    type: object
    properties:
      sourceId:
        type: string
        title: Search on Source ID
      nameTerm:
        type: string
        description: Whether the name contains this partial term anywhere in it.
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
        title: Field mask for filter fields
      pagingOptions:
        $ref: '#/definitions/v1PagedRequestOptions'
        title: Options for how to page the response for this request
      projectionMask:
        $ref: '#/definitions/v1FieldMask'
        title: |-
          Field mask for projections, if not provided defaults to source_id, secondary_category_id,
          name, primary_category_id, and audit_fields
      sortOptions:
        $ref: '#/definitions/v1SecondarySortOptions'
        title: sort_options for how to sort results
  v1ListSecondaryCategoriesResponse:
    type: object
    properties:
      category:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SecondaryCategory'
      pagingMetadata:
        $ref: '#/definitions/v1PagedResponseMetadata'
        title: Metadata about the paging
  v1PagedRequestOptions:
    type: object
    properties:
      cursor:
        type: string
        title: cursor can be passed to retrieve the next page of results keyed by the cursor
      pageSize:
        type: string
        format: int64
        title: page_size specifies the number of items to return in the next page
  v1PagedResponseMetadata:
    type: object
    properties:
      nextCursor:
        type: string
        title: A cursor that can be provided to retrieve the next page of results
      hasMore:
        type: boolean
        title: Whether or not more results exist
  v1PrimaryCategory:
    type: object
    properties:
      primaryCategoryId:
        type: string
        title: ID (key field) (always required) (cannot be updated)
      name:
        type: string
        title: Human readable name category (required)
      description:
        type: string
        description: Additional information or notes about the category to help people know when to use it.
      isSelectable:
        type: boolean
        description: If the category is selectable for new accounts. Some categories are only verticles, and some will be depricated.
      isVertical:
        type: boolean
        description: If the category is a top level vertical, that other categories can reference.
      verticalId:
        type: string
        title: The ID of the vertical the category is in (optional)
      categoryMappings:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SecondaryCategoryMappings'
        description: Mappings to all of the Secondary Categories by source. Can only have one entry per source.
      isDeleted:
        type: boolean
        description: Is soft deleted, cannot be added, and in general will not be shown.
      auditFields:
        $ref: '#/definitions/v1AuditFields'
        title: Audit fields
      verticalName:
        type: string
        title: Looked up value of the vertical (read only, cannot be updated)
  v1PrimaryCategoryCreateUpdate:
    type: object
    properties:
      primaryCategoryId:
        type: string
        title: ID (key field) (always required) (cannot be updated)
      name:
        type: string
        title: Human readable name category (required on create)
      description:
        type: string
        description: Additional information or notes about the category to help people know when to use it.
      isSelectable:
        type: boolean
        description: If the category is selectable for new accounts. Some categories are only verticles, and some will be depricated.
      isVertical:
        type: boolean
        description: If the category is a top level vertical, that other categories can reference.
      verticalId:
        type: string
        title: The ID of the vertical the category is in, may be blank
    title: The fields of the primary category availiable in create or update calls
  v1SecondaryCategory:
    type: object
    properties:
      sourceId:
        type: string
        title: ID of source (key field) (required) (cannot be updated)
      secondaryCategoryId:
        type: string
        title: ID of secondary category (key field) (required) (cannot be updated)
      name:
        type: string
        title: Human readable name of secondary category (required)
      primaryCategoryId:
        type: string
        description: Which primary category it maps back to, can only be one.
      isDeleted:
        type: boolean
        description: Is soft deleted, cannot be added, and in general will not be shown.
      auditFields:
        $ref: '#/definitions/v1AuditFields'
        title: Audit fields
      primaryCategoryName:
        type: string
        title: Looked up value of the primary category (read only, cannot be updated)
    title: Secondary Category
  v1SecondaryCategoryMappings:
    type: object
    properties:
      sourceId:
        type: string
        title: ID of secondary business category source (key field on SecondaryCategory)
      secondaryCategoryId:
        type: string
        title: ID of secondary business category (key field on SecondaryCategory)
      secondaryCategoryName:
        type: string
        title: Looked up value of the secondary category name (read only, cannot be updated)
  v1SecondarySortField:
    type: string
    enum:
      - SECONDARY_SORT_FIELD_NAME
      - SECONDARY_SORT_FIELD_SECONDARY_CATEGORY_ID
    default: SECONDARY_SORT_FIELD_NAME
    description: The field to sort a result set on.
  v1SecondarySortOptions:
    type: object
    properties:
      direction:
        $ref: '#/definitions/v1SortDirection'
        title: A direction to sort results in
      field:
        $ref: '#/definitions/v1SecondarySortField'
        title: Field to sort on
    title: Options for controlling the order of query results
  v1SortDirection:
    type: string
    enum:
      - SORT_DIRECTION_ASCENDING
      - SORT_DIRECTION_DESCENDING
    default: SORT_DIRECTION_ASCENDING
    description: The directions that a result set can be sorted in.
  v1SortField:
    type: string
    enum:
      - SORT_FIELD_NAME
      - SORT_FIELD_PRIMARY_CATEGORY_ID
      - SORT_FIELD_VERTICAL_NAME
    default: SORT_FIELD_NAME
    description: The field to sort a result set on.
  v1SortOptions:
    type: object
    properties:
      direction:
        $ref: '#/definitions/v1SortDirection'
        title: A direction to sort results in
      field:
        $ref: '#/definitions/v1SortField'
        title: Field to sort on
    title: Options for controlling the order of query results
  v1UpdatePrimaryCategoryRequest:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1PrimaryCategoryCreateUpdate'
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
  v1UpdateSecondaryCategoryRequest:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1SecondaryCategory'
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
        title: Field mask for update
