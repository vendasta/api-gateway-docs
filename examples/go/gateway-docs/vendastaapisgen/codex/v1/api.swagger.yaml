swagger: "2.0"
info:
  title: codex/v1/api.proto
  version: version not set
tags:
  - name: Codex
  - name: Glossary
consumes:
  - application/json
produces:
  - application/json
paths:
  /codex.v1.Codex/CommentOnQuestion:
    post:
      operationId: Codex_CommentOnQuestion
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Answer a question posed by someone. Should include a summary of the answer and a link to a playbook on GitHub.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CommentOnQuestionRequest'
      tags:
        - Codex
  /codex.v1.Codex/CreateQuestion:
    post:
      operationId: Codex_CreateQuestion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateQuestionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateQuestionRequest'
      tags:
        - Codex
  /codex.v1.Codex/DeleteQuestion:
    post:
      operationId: Codex_DeleteQuestion
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Need a way to clean up questions; won't be called from the frontend ever, most likely.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteQuestionRequest'
      tags:
        - Codex
  /codex.v1.Codex/GetComments:
    post:
      operationId: Codex_GetComments
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetCommentsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Get the comments on a question.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetCommentsRequest'
      tags:
        - Codex
  /codex.v1.Codex/GetQuestion:
    post:
      operationId: Codex_GetQuestion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetQuestionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetQuestionRequest'
      tags:
        - Codex
  /codex.v1.Codex/ListQuestions:
    post:
      operationId: Codex_ListQuestions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListQuestionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: List questions that have been asked.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListQuestionsRequest'
      tags:
        - Codex
  /codex.v1.Codex/MarkCommentAsAnswer:
    post:
      operationId: Codex_MarkCommentAsAnswer
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1MarkCommentAsAnswerRequest'
      tags:
        - Codex
  /codex.v1.Codex/MarkCommentAsStale:
    post:
      operationId: Codex_MarkCommentAsStale
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            A comment can be marked as stale if it is no longer relevant. The reason for doing this would be to give readers
            a way to know they should take heed when considering this comment as an answer to the question at hand.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1MarkCommentAsStaleRequest'
      tags:
        - Codex
  /codex.v1.Glossary/CreateTerm:
    post:
      operationId: Glossary_CreateTerm
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateTermRequest'
      tags:
        - Glossary
  /codex.v1.Glossary/DeleteTerm:
    post:
      operationId: Glossary_DeleteTerm
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteTermRequest'
      tags:
        - Glossary
  /codex.v1.Glossary/GetTerm:
    post:
      operationId: Glossary_GetTerm
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetTermResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetTermRequest'
      tags:
        - Glossary
  /codex.v1.Glossary/ListTerms:
    post:
      operationId: Glossary_ListTerms
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListTermsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListTermsRequest'
      tags:
        - Glossary
  /codex.v1.Glossary/UpdateTerm:
    post:
      operationId: Glossary_UpdateTerm
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateTermRequest'
      tags:
        - Glossary
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1Comment:
    type: object
    properties:
      commentId:
        type: string
        title: Randomly generated identifier for this comment
      body:
        type: string
        description: The body of the comment. Pulled from a playbook on GitHub.
      playbookUrl:
        type: string
        description: The link to the Playbook directly on GitHub, so people can edit it if need be.
      summary:
        type: string
        description: A short(er) summary of the full comment, if required.
      createdAt:
        type: string
        format: date-time
        title: When the comment was created
      questionId:
        type: string
        title: Question that this comment is linked with
      isStale:
        type: boolean
        title: Whether or not this question is stale/old
      authorId:
        type: string
        title: Author of this comment
      authorName:
        type: string
        title: Author name
      title:
        type: string
        title: Title of the comment, usually a short synopsis of it
      authorEmail:
        type: string
        title: Email of the author of this comment
      source:
        $ref: '#/definitions/v1Source'
        title: Where this comment came from
    title: A possible answer to someone's question
  v1CommentOnQuestionRequest:
    type: object
    properties:
      questionId:
        type: string
      summary:
        type: string
      playbookUrl:
        type: string
      authorId:
        type: string
        title: DEPRECATED
      title:
        type: string
      source:
        $ref: '#/definitions/v1Source'
        title: Source of the comment
    description: Answer a question posed by someone. Should include a summary of the answer and a link to a playbook on GitHub.
  v1CreateQuestionRequest:
    type: object
    properties:
      authorId:
        type: string
        title: |-
          DEPRECATED
          The id of the person who asked the question
      title:
        type: string
        description: The title of the question, possibly the question being posed.
      body:
        type: string
        title: Any further information needed to ask or give context to the question
      source:
        $ref: '#/definitions/v1Source'
        title: The source of the question
  v1CreateQuestionResponse:
    type: object
    properties:
      questionId:
        type: string
        title: The question id of the question just created
  v1CreateTermRequest:
    type: object
    properties:
      term:
        $ref: '#/definitions/v1Term'
  v1DeleteQuestionRequest:
    type: object
    properties:
      questionId:
        type: string
    description: Need a way to clean up questions; won't be called from the frontend ever, most likely.
  v1DeleteTermRequest:
    type: object
    properties:
      termId:
        type: string
  v1GetCommentsRequest:
    type: object
    properties:
      questionId:
        type: string
    description: Get the comments on a question.
  v1GetCommentsResponse:
    type: object
    properties:
      comments:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Comment'
  v1GetQuestionRequest:
    type: object
    properties:
      questionId:
        type: string
      withComments:
        type: boolean
    title: Get a question by its id
  v1GetQuestionResponse:
    type: object
    properties:
      question:
        $ref: '#/definitions/v1Question'
  v1GetTermRequest:
    type: object
    properties:
      termId:
        type: string
  v1GetTermResponse:
    type: object
    properties:
      term:
        $ref: '#/definitions/v1Term'
  v1ListQuestionsRequest:
    type: object
    properties:
      pagingOptions:
        $ref: '#/definitions/v1PagedRequestOptions'
      withComments:
        type: boolean
    description: List questions that have been asked.
  v1ListQuestionsResponse:
    type: object
    properties:
      questions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Question'
      pagingMetadata:
        $ref: '#/definitions/v1PagedResponseMetadata'
  v1ListTermsRequest:
    type: object
    properties:
      cursor:
        type: string
      pageSize:
        type: string
        format: int64
  v1ListTermsResponse:
    type: object
    properties:
      terms:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Term'
      nextCursor:
        type: string
      hasMore:
        type: boolean
  v1MarkCommentAsAnswerRequest:
    type: object
    properties:
      questionId:
        type: string
      commentId:
        type: string
    title: A comment can be made into an "Answer" if it's chosen by the asking user as the definitive answer to their question
  v1MarkCommentAsStaleRequest:
    type: object
    properties:
      questionId:
        type: string
      commentId:
        type: string
    description: |-
      A comment can be marked as stale if it is no longer relevant. The reason for doing this would be to give readers
      a way to know they should take heed when considering this comment as an answer to the question at hand.
  v1PagedRequestOptions:
    type: object
    properties:
      cursor:
        type: string
        title: cursor can be passed to retrieve the next page of results keyed by the cursor
      pageSize:
        type: string
        format: int64
        title: page_size specifies the number of items to return in the next page
    title: To provide options for the paged request
  v1PagedResponseMetadata:
    type: object
    properties:
      nextCursor:
        type: string
        title: A cursor that can be provided to retrieve the next page of results
      hasMore:
        type: boolean
        title: Whether or not more results exist
      totalResults:
        type: string
        format: int64
        title: Total results found by the operation
    title: Contains metadata about the paged response
  v1Question:
    type: object
    properties:
      questionId:
        type: string
        title: Randomly generated identifier for this question
      authorId:
        type: string
        title: Probably not used at first
      authorName:
        type: string
        title: Who asked the question
      title:
        type: string
        description: The title of the question, possibly the question being posed.
      body:
        type: string
        title: Any further information needed to ask or give context to the question
      answeringCommentId:
        type: string
        title: Corresponds to a comment on this question. If it's "" then this question doesn't have a definitive answer
      isAnswered:
        type: boolean
        title: Probably just computed off the answering_comment_id
      createdAt:
        type: string
        format: date-time
        title: When the question was created
      comments:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Comment'
        title: Comments on this question
      authorEmail:
        type: string
        title: Email of the author of this question
      source:
        $ref: '#/definitions/v1Source'
        title: Where this question came from
    description: A question asked by someone.
  v1Source:
    type: string
    enum:
      - SOURCE_UNSET
      - SOURCE_INVALID
      - SOURCE_CODEX
      - SOURCE_ANSWERHUB
    default: SOURCE_UNSET
    description: Source will allow us to differentiate between grassroots questions and ones imported from other sources.
  v1Term:
    type: object
    properties:
      id:
        type: string
      description:
        type: string
  v1UpdateTermRequest:
    type: object
    properties:
      term:
        $ref: '#/definitions/v1Term'
