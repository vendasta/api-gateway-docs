swagger: "2.0"
info:
  title: embeddings/v1alpha1/api.proto
  version: version not set
tags:
  - name: EmbeddingService
  - name: AutomatedEmbeddingsService
  - name: AIAssistantService
  - name: KnowledgeBaseService
consumes:
  - application/json
produces:
  - application/json
paths:
  /embeddings.v1alpha1.AIAssistantService/GenerateChatAnswerWithEmbeddings:
    post:
      summary: GenerateChatAnswerWithEmbeddings will generate an answer to the latest message in a given chat conversation
      operationId: AIAssistantService_GenerateChatAnswerWithEmbeddings
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GenerateChatAnswerWithEmbeddingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GenerateChatAnswerWithEmbeddingsRequest'
      tags:
        - AIAssistantService
  /embeddings.v1alpha1.AIAssistantService/GetFunctionExecutionJob:
    post:
      operationId: AIAssistantService_GetFunctionExecutionJob
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GetFunctionExecutionJobResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GetFunctionExecutionJobRequest'
      tags:
        - AIAssistantService
  /embeddings.v1alpha1.AutomatedEmbeddingsService/RefreshAllBusinessProfileEmbeddings:
    post:
      summary: |-
        RefreshAllBusinessProfileEmbeddings will refresh all business profile embeddings.
        Note: Only refreshes embeddings for account groups that have an existing embedding (it does not create new embeddings).
        Note: Requires a developer role
      operationId: AutomatedEmbeddingsService_RefreshAllBusinessProfileEmbeddings
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: {}
      tags:
        - AutomatedEmbeddingsService
  /embeddings.v1alpha1.AutomatedEmbeddingsService/RefreshBusinessProfileEmbeddings:
    post:
      summary: |-
        RefreshBusinessProfileEmbeddings will use the current information on the business's listing profile to create embeddings for the content.
        Source type will be EMBEDDING_SOURCE_TYPE_BUSINESS_PROFILE.
      operationId: AutomatedEmbeddingsService_RefreshBusinessProfileEmbeddings
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1RefreshBusinessProfileEmbeddingsRequest'
      tags:
        - AutomatedEmbeddingsService
  /embeddings.v1alpha1.AutomatedEmbeddingsService/ScrapeWebsite:
    post:
      summary: |-
        Scrape will scrape a website associated with a knowledge source.
        The knowledge source must have a config type of KNOWLEDGE_SOURCE_CONFIG_TYPE_WEBSITE with valid parameters set (url, crawl_mode).
        The scrape will be performed asynchronously, you can check the progress of the scrape using KnowledgeBaseService.GetKnowledgeSource where the progress is tracked on the Knowledge Source.
        Kicking off a scrape while a previous scrape is in progress will cancel the previous scrape.
        The scrape will create/update ScrapedPages on the Knowledge Source, but it will only create/update embeddings for pages with TrainingEnabled set to true.
        Turning TrainingEnabled on for pages can be done through the KnowledgeBaseService.UpdateKnowledgeSource endpoint.
      operationId: AutomatedEmbeddingsService_ScrapeWebsite
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ScrapeWebsiteResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ScrapeWebsiteRequest'
      tags:
        - AutomatedEmbeddingsService
  /embeddings.v1alpha1.EmbeddingService/CreateEmbedding:
    post:
      operationId: EmbeddingService_CreateEmbedding
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1CreateEmbeddingResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1CreateEmbeddingRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.EmbeddingService/DeleteEmbedding:
    post:
      operationId: EmbeddingService_DeleteEmbedding
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1DeleteEmbeddingRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.EmbeddingService/FindSimilarEmbeddings:
    post:
      summary: FindSimilarEmbeddings performs a vector search with an embedding of the provided content and returns the most similar embeddings.
      operationId: EmbeddingService_FindSimilarEmbeddings
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1FindSimilarEmbeddingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1FindSimilarEmbeddingsRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.EmbeddingService/GetEmbedding:
    post:
      operationId: EmbeddingService_GetEmbedding
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GetEmbeddingResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GetEmbeddingRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.EmbeddingService/ListEmbeddings:
    post:
      summary: ListEmbeddings can be used to list all embeddings or filter by relationship and source type.
      operationId: EmbeddingService_ListEmbeddings
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListEmbeddingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListEmbeddingsRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.EmbeddingService/UpdateEmbedding:
    post:
      operationId: EmbeddingService_UpdateEmbedding
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1UpdateEmbeddingRequest'
      tags:
        - EmbeddingService
  /embeddings.v1alpha1.KnowledgeBaseService/CreateKnowledgeBase:
    post:
      summary: |-
        CreateKnowledgeBase creates a new knowledge base.
        An id can be provided, otherwise one will be generated.
      operationId: KnowledgeBaseService_CreateKnowledgeBase
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1CreateKnowledgeBaseResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1CreateKnowledgeBaseRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/CreateKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_CreateKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1CreateKnowledgeSourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1CreateKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/DeleteApp:
    post:
      operationId: KnowledgeBaseService_DeleteApp
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1DeleteAppRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/DeleteKnowledgeBase:
    post:
      operationId: KnowledgeBaseService_DeleteKnowledgeBase
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1DeleteKnowledgeBaseRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/DeleteKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_DeleteKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1DeleteKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/GetApp:
    post:
      operationId: KnowledgeBaseService_GetApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GetAppResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GetAppRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/GetKnowledgeBase:
    post:
      operationId: KnowledgeBaseService_GetKnowledgeBase
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GetKnowledgeBaseResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GetKnowledgeBaseRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/GetKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_GetKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1GetKnowledgeSourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1GetKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/ListAllAppsForKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_ListAllAppsForKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListAllAppsForKnowledgeSourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListAllAppsForKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/ListAllKnowledgeSourcesForApp:
    post:
      operationId: KnowledgeBaseService_ListAllKnowledgeSourcesForApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListAllKnowledgeSourcesForAppResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListAllKnowledgeSourcesForAppRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/ListApps:
    post:
      operationId: KnowledgeBaseService_ListApps
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListAppsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListAppsRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/ListKnowledgeBases:
    post:
      operationId: KnowledgeBaseService_ListKnowledgeBases
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListKnowledgeBasesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListKnowledgeBasesRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/ListKnowledgeSources:
    post:
      operationId: KnowledgeBaseService_ListKnowledgeSources
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alpha1ListKnowledgeSourcesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1ListKnowledgeSourcesRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/SetAppsForKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_SetAppsForKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1SetAppsForKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/TuneAIModel:
    post:
      operationId: KnowledgeBaseService_TuneAIModel
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1TuneAIModelRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/UpdateKnowledgeBase:
    post:
      operationId: KnowledgeBaseService_UpdateKnowledgeBase
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1UpdateKnowledgeBaseRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/UpdateKnowledgeSource:
    post:
      operationId: KnowledgeBaseService_UpdateKnowledgeSource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1UpdateKnowledgeSourceRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/UpsertApp:
    post:
      operationId: KnowledgeBaseService_UpsertApp
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1UpsertAppRequest'
      tags:
        - KnowledgeBaseService
  /embeddings.v1alpha1.KnowledgeBaseService/UpsertKnowledgeForApp:
    post:
      summary: Temporary endpoint to create or update an App, Knowledge Base, and Knowledge Source(s) in one call
      operationId: KnowledgeBaseService_UpsertKnowledgeForApp
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alpha1UpsertKnowledgeForAppRequest'
      tags:
        - KnowledgeBaseService
definitions:
  FindSimilarEmbeddingsRequestRerankOptions:
    type: object
    properties:
      method:
        $ref: '#/definitions/v1alpha1EmbeddingRerankerMethod'
        description: The method to use for reranking the embeddings.
  FindSimilarEmbeddingsResponseMatch:
    type: object
    properties:
      embedding:
        $ref: '#/definitions/v1alpha1Embedding'
        description: The embedding that was matched.
      similarity:
        type: number
        format: double
        description: |-
          The similarity between the query and the embedding.
          This value falls between 0 and 1, with 1 being a perfect match and 0 having no similarity.
  GenerateChatAnswerWithEmbeddingsRequestOptions:
    type: object
    properties:
      includeAllCitations:
        type: boolean
        description: This option allows the user to specify whether to disable filtering only embeddings used on messages. This will make the endpoint return citations for all embeddings found.
      enableAsyncFunctions:
        type: boolean
        description: This option allows the user to specify whether to enable async functions.
  KnowledgeSourceConfigBusinessProfileConfig:
    type: object
    properties:
      accountGroupId:
        type: string
  KnowledgeSourceConfigCustomDataConfig:
    type: object
    properties:
      text:
        type: string
        title: free-form text content
      fileUrl:
        type: string
        title: url to an uploaded file containing the content
  KnowledgeSourceConfigWebsiteScrapeConfig:
    type: object
    properties:
      url:
        type: string
        title: the url to scrape, should include the protocol (http/https)
      crawlMode:
        $ref: '#/definitions/v1alpha1WebsiteScrapeConfigCrawlMode'
        title: the crawl mode to use when scraping the website
      scrapedPages:
        type: array
        items:
          type: object
          $ref: '#/definitions/WebsiteScrapeConfigScrapedPage'
      scrapeProgress:
        $ref: '#/definitions/v1alpha1WebsiteScrapeConfigProgress'
        title: the progress of the scrape
      lastScraped:
        type: string
        format: date-time
        title: the last time the website was scraped, which will be the oldest timestamp of all the scraped pages
      error:
        $ref: '#/definitions/WebsiteScrapeConfigWebsiteScrapeConfigError'
      inProgressScrapedPages:
        type: array
        items:
          type: object
          $ref: '#/definitions/WebsiteScrapeConfigScrapedPage'
      options:
        $ref: '#/definitions/WebsiteScrapeConfigWebsiteScrapeOptions'
  NamespaceAccountGroupNamespace:
    type: object
    properties:
      accountGroupId:
        type: string
  NamespaceAdminNamespace:
    type: object
    title: only Vendasta admins can create and modify knowledge in this namespace
  NamespacePartnerNamespace:
    type: object
    properties:
      partnerId:
        type: string
  WebsiteScrapeConfigScrapedPage:
    type: object
    properties:
      url:
        type: string
        title: the url of the page that was scraped
      title:
        type: string
        title: the title of the page
      errorMessage:
        type: string
        title: error message if the page could not be scraped
      trainingEnabled:
        type: boolean
        title: whether the page is enabled for training
      lastScraped:
        type: string
        format: date-time
        title: the last time the page was scraped
      doneScraping:
        type: boolean
        title: |-
          a page is done scraping if it has finished retrieving content for the page or has an error message
          this should only be relevant for in_progress_scraped_pages
  WebsiteScrapeConfigWebsiteScrapeConfigError:
    type: object
    properties:
      errorMessage:
        type: string
        title: the error message
    title: error if the provided url could not be scraped
  WebsiteScrapeConfigWebsiteScrapeOptions:
    type: object
    properties:
      disableAutoTraining:
        type: boolean
        title: whether to disable auto training for the website scrape
    title: options for scraping the website
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1alpha1App:
    type: object
    properties:
      id:
        type: string
        title: the id of the app that is implementing knowledge bases
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the app belongs to. Can be set only on create.
      name:
        type: string
        title: the name of the app
      configurationUrl:
        type: string
        title: a url for where the knowledge bases can be edited for the app
      knowledgeBaseKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeBaseKey'
        title: the knowledge bases that the app is associated with
      appType:
        type: string
        title: The type of app
      appTypeName:
        type: string
        description: The human-readable name of the app type. Read-only.
      iconUrl:
        type: string
        description: The url to an icon for the app. Read-only.
      externalId:
        type: string
        title: the id of the external entity for the app
  v1alpha1AppKey:
    type: object
    properties:
      appId:
        type: string
        title: the id of the app
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the app belongs to.
    description: 'Deprecated: Use AppKeyV2 instead.'
  v1alpha1AppKeyV2:
    type: object
    properties:
      externalId:
        type: string
        title: the id of the external entity for the app
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the app belongs to.
      appType:
        type: string
        title: The type of app
  v1alpha1ChatAnswerCitation:
    type: object
    properties:
      type:
        $ref: '#/definitions/v1alpha1EmbeddingSourceType'
        title: The type of source
      description:
        type: string
        title: A description of the citation
      link:
        type: string
        title: The link to the cited source
      title:
        type: string
        title: The title of the cited source
      content:
        type: string
        title: The content of the citation
  v1alpha1ChatBookingOption:
    type: object
    properties:
      displayText:
        type: string
        title: The option display text
      scheduleId:
        type: string
        title: The option identifier
  v1alpha1ChatMessage:
    type: object
    properties:
      role:
        $ref: '#/definitions/v1alpha1ChatMessageRole'
        title: The role of the chat message sender
      content:
        type: string
        title: The content of the chat message
  v1alpha1ChatMessageRole:
    type: string
    enum:
      - CHAT_MESSAGE_ROLE_INVALID
      - CHAT_MESSAGE_ROLE_USER
      - CHAT_MESSAGE_ROLE_ASSISTANT
    default: CHAT_MESSAGE_ROLE_INVALID
  v1alpha1CreateEmbeddingRequest:
    type: object
    properties:
      content:
        type: string
        description: The content to vectorize into an embedding.
      metadata:
        $ref: '#/definitions/v1alpha1EmbeddingMetadata'
  v1alpha1CreateEmbeddingResponse:
    type: object
    properties:
      id:
        type: string
  v1alpha1CreateKnowledgeBaseRequest:
    type: object
    properties:
      knowledgeBase:
        $ref: '#/definitions/v1alpha1KnowledgeBase'
  v1alpha1CreateKnowledgeBaseResponse:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1CreateKnowledgeSourceRequest:
    type: object
    properties:
      knowledgeSource:
        $ref: '#/definitions/v1alpha1KnowledgeSource'
  v1alpha1CreateKnowledgeSourceResponse:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1DeleteAppRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1DeleteEmbeddingRequest:
    type: object
    properties:
      embeddingId:
        type: string
  v1alpha1DeleteKnowledgeBaseRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1DeleteKnowledgeSourceRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1Embedding:
    type: object
    properties:
      id:
        type: string
        description: The embedding ID.
      content:
        type: string
        description: The content vectorized into an embedding.
      metadata:
        $ref: '#/definitions/v1alpha1EmbeddingMetadata'
  v1alpha1EmbeddingCitation:
    type: object
    properties:
      link:
        type: string
        description: The link to the source of the content. Required.
      title:
        type: string
        description: The title of the source of the content. An application could use this to cite the content in a more readable way. Optional.
      description:
        type: string
        description: The description of the source of the content. An application could use this to cite the content in a more readable way. Optional.
  v1alpha1EmbeddingMetadata:
    type: object
    properties:
      createdBy:
        type: string
        description: The IAM user that created the embedding. Can be a service account. Can be set only on create.
      createdAt:
        type: string
        format: date-time
        description: The time the embedding was created. Read-only.
      updatedAt:
        type: string
        format: date-time
        description: The time the embedding was last updated. Read-only.
      relationship:
        $ref: '#/definitions/v1alpha1EmbeddingRelationship'
        description: The platform resource that this embedding is related to. Can only be set on create.
      sourceType:
        $ref: '#/definitions/v1alpha1EmbeddingSourceType'
        description: The source of the embedding.  Can be set only on create.
      sourceFeature:
        type: string
        description: The feature or feature set that the embedding was created by/for. Can be set only on create.
      vendorModel:
        $ref: '#/definitions/v1alpha1EmbeddingVendorModel'
        description: The embedding model used to create the embedding. Can be set only on create.
      citation:
        $ref: '#/definitions/v1alpha1EmbeddingCitation'
        description: Content citation. Optional.
      disabled:
        type: boolean
        description: Whether the embedding is disabled. Disabled embeddings are not used in search.
      tags:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1Tag'
        description: |-
          Tags associated with the embedding. Optional.
          Tags can be set on create and used to filter embeddings in search.
  v1alpha1EmbeddingRelationship:
    type: object
    properties:
      accountGroup:
        $ref: '#/definitions/v1alpha1EmbeddingRelationshipAccountGroup'
      partner:
        $ref: '#/definitions/v1alpha1EmbeddingRelationshipPartner'
      admin:
        $ref: '#/definitions/v1alpha1EmbeddingRelationshipAdmin'
  v1alpha1EmbeddingRelationshipAccountGroup:
    type: object
    properties:
      accountGroupId:
        type: string
  v1alpha1EmbeddingRelationshipAdmin:
    type: object
  v1alpha1EmbeddingRelationshipPartner:
    type: object
    properties:
      partnerId:
        type: string
  v1alpha1EmbeddingRerankerMethod:
    type: string
    enum:
      - EMBEDDING_RERANKER_METHOD_INVALID
      - EMBEDDING_RERANKER_METHOD_PREQUERY_HYDE
    default: EMBEDDING_RERANKER_METHOD_INVALID
  v1alpha1EmbeddingSourceType:
    type: string
    enum:
      - EMBEDDING_SOURCE_TYPE_INVALID
      - EMBEDDING_SOURCE_TYPE_USER_INPUT
      - EMBEDDING_SOURCE_TYPE_WEBSITE
      - EMBEDDING_SOURCE_TYPE_BUSINESS_PROFILE
      - EMBEDDING_SOURCE_TYPE_CATEGORIES
    default: EMBEDDING_SOURCE_TYPE_INVALID
  v1alpha1EmbeddingVendorModel:
    type: string
    enum:
      - EMBEDDING_MODEL_INVALID
      - EMBEDDING_MODEL_OPENAI_ADA_V2
      - EMBEDDING_MODEL_GOOGLE_GECKO_V2
      - EMBEDDING_MODEL_TUNED_CATEGORY
    default: EMBEDDING_MODEL_INVALID
  v1alpha1FindSimilarEmbeddingsRequest:
    type: object
    properties:
      filters:
        $ref: '#/definitions/v1alpha1FindSimilarEmbeddingsRequestFilters'
      query:
        type: string
        description: The query will be vectorized and compared against the embeddings so that the most similar embeddings are returned.
      limit:
        type: string
        format: int64
        description: |-
          The maximum number of embeddings to return.
          The absolute maximum is 10.
          If you want to list all embeddings, use the ListEmbeddings endpoint.
      rerankOptions:
        $ref: '#/definitions/FindSimilarEmbeddingsRequestRerankOptions'
        title: |-
          Options for reranking the embeddings.
          If not provided, no reranking will be done.
          WARNING: experimental
  v1alpha1FindSimilarEmbeddingsRequestFilters:
    type: object
    properties:
      relationship:
        $ref: '#/definitions/v1alpha1EmbeddingRelationship'
      sourceType:
        type: array
        items:
          $ref: '#/definitions/v1alpha1EmbeddingSourceType'
      vendorModel:
        $ref: '#/definitions/v1alpha1EmbeddingVendorModel'
      associatedAppId:
        type: string
      tags:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1Tag'
  v1alpha1FindSimilarEmbeddingsResponse:
    type: object
    properties:
      embeddings:
        type: array
        items:
          type: object
          $ref: '#/definitions/FindSimilarEmbeddingsResponseMatch'
  v1alpha1FunctionExecutionJob:
    type: object
    properties:
      id:
        type: string
        title: The ID of the function execution job
      status:
        $ref: '#/definitions/v1alpha1FunctionExecutionJobStatus'
        title: The status of the function execution job
      result:
        $ref: '#/definitions/v1alpha1FunctionExecutionJobResult'
        title: The result of the function execution job
      nextJobId:
        type: string
        title: The ID of the next job in the sequence
  v1alpha1FunctionExecutionJobResult:
    type: object
    properties:
      content:
        type: string
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KeyValuePair'
  v1alpha1FunctionExecutionJobStatus:
    type: string
    enum:
      - FUNCTION_EXECUTION_JOB_STATUS_INVALID
      - FUNCTION_EXECUTION_JOB_STATUS_QUEUED
      - FUNCTION_EXECUTION_JOB_STATUS_RUNNING
      - FUNCTION_EXECUTION_JOB_STATUS_COMPLETE
    default: FUNCTION_EXECUTION_JOB_STATUS_INVALID
  v1alpha1GenerateChatAnswerWithEmbeddingsRequest:
    type: object
    properties:
      appKey:
        $ref: '#/definitions/v1alpha1AppKey'
        description: 'Deprecated: Use app_key_v2 instead.'
      chatHistory:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1ChatMessage'
        description: The history of chat messages in order from oldest to latest. The answer will be generated for the latest message. The latest message MUST have the role of User.
      systemPrompt:
        type: string
        title: The system prompt defines the behaviour, tone, goals, etc of the AI when determining the chat answer
      additionalInstructions:
        type: string
        description: The additional instructions are instructions for the AI to follow in addition to the system prompt. These are usually user provided.
      options:
        $ref: '#/definitions/GenerateChatAnswerWithEmbeddingsRequestOptions'
        title: The options for generating the chat answer
      appKeyV2:
        $ref: '#/definitions/v1alpha1AppKeyV2'
        description: The key of the App that is being used to ask the question. Knowledge associated with this App will be used to determine an answer.
  v1alpha1GenerateChatAnswerWithEmbeddingsResponse:
    type: object
    properties:
      answer:
        type: string
        title: The generated answer
      citations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1ChatAnswerCitation'
        title: The citations of knowledge that was used to inform the answer
      bookingOptions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1ChatBookingOption'
        title: The booking options that are available
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KeyValuePair'
        title: The metadata associated with the answer
      pendingJobId:
        type: string
        title: The pending job ID if the answer is not yet ready
  v1alpha1GetAppRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
      includeKnowledgeBaseKeys:
        type: boolean
  v1alpha1GetAppResponse:
    type: object
    properties:
      app:
        $ref: '#/definitions/v1alpha1App'
  v1alpha1GetEmbeddingRequest:
    type: object
    properties:
      id:
        type: string
  v1alpha1GetEmbeddingResponse:
    type: object
    properties:
      embedding:
        $ref: '#/definitions/v1alpha1Embedding'
  v1alpha1GetFunctionExecutionJobRequest:
    type: object
    properties:
      id:
        type: string
        title: The ID of the function execution job
  v1alpha1GetFunctionExecutionJobResponse:
    type: object
    properties:
      job:
        $ref: '#/definitions/v1alpha1FunctionExecutionJob'
        title: The function execution job
  v1alpha1GetKnowledgeBaseRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
      includeKnowledgeSourceKeys:
        type: boolean
  v1alpha1GetKnowledgeBaseResponse:
    type: object
    properties:
      knowledgeBase:
        $ref: '#/definitions/v1alpha1KnowledgeBase'
  v1alpha1GetKnowledgeSourceRequest:
    type: object
    properties:
      id:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
      includeKnowledgeBaseKeys:
        type: boolean
  v1alpha1GetKnowledgeSourceResponse:
    type: object
    properties:
      knowledgeSource:
        $ref: '#/definitions/v1alpha1KnowledgeSource'
  v1alpha1KeyValuePair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  v1alpha1KnowledgeBase:
    type: object
    properties:
      id:
        type: string
        description: |-
          the namespace-unique identifier for the knowledge base
          On create, if this is empty, it will be auto-generated.
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the knowledge base belongs to. Can be set only on create.
      name:
        type: string
        title: the name of the knowledge base
      description:
        type: string
        title: the description of the knowledge base
      knowledgeSourceKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeSourceKey'
        title: the knowledge sources that are used to populate the knowledge base
  v1alpha1KnowledgeBaseKey:
    type: object
    properties:
      knowledgeBaseId:
        type: string
        title: the id of the knowledge base
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the knowledge base belongs to.
  v1alpha1KnowledgeSource:
    type: object
    properties:
      id:
        type: string
        title: the namespace-unique identifier for the knowledge source
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the knowledge source belongs to. Can be set only on create.
      name:
        type: string
        title: the name of the knowledge source
      description:
        type: string
        title: the description of the knowledge source
      config:
        $ref: '#/definitions/v1alpha1KnowledgeSourceConfig'
        title: the configuration for the knowledge source
      knowledgeBaseKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeBaseKey'
        title: the knowledge bases that the knowledge source is associated with
      training:
        $ref: '#/definitions/v1alpha1KnowledgeSourceTraining'
        title: training progress information of a knowledge source
  v1alpha1KnowledgeSourceConfig:
    type: object
    properties:
      businessProfileConfig:
        $ref: '#/definitions/KnowledgeSourceConfigBusinessProfileConfig'
        description: the configuration for a business profile knowledge source. Can only be used on AccountGroup namespaced sources.
      customDataConfig:
        $ref: '#/definitions/KnowledgeSourceConfigCustomDataConfig'
      websiteScrapeConfig:
        $ref: '#/definitions/KnowledgeSourceConfigWebsiteScrapeConfig'
  v1alpha1KnowledgeSourceConfigType:
    type: string
    enum:
      - KNOWLEDGE_SOURCE_CONFIG_TYPE_INVALID
      - KNOWLEDGE_SOURCE_CONFIG_TYPE_BUSINESS_PROFILE
      - KNOWLEDGE_SOURCE_CONFIG_TYPE_CUSTOM_DATA
      - KNOWLEDGE_SOURCE_CONFIG_TYPE_WEBSITE_SCRAPE
    default: KNOWLEDGE_SOURCE_CONFIG_TYPE_INVALID
  v1alpha1KnowledgeSourceKey:
    type: object
    properties:
      knowledgeSourceId:
        type: string
        title: the id of the knowledge source
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
        description: the namespace that the knowledge source belongs to.
  v1alpha1KnowledgeSourceTraining:
    type: object
    properties:
      progress:
        $ref: '#/definitions/v1alpha1TrainingProgress'
      totalUnits:
        type: string
        format: int64
      completedUnits:
        type: string
        format: int64
  v1alpha1ListAllAppsForKnowledgeSourceRequest:
    type: object
    properties:
      knowledgeSourceId:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1ListAllAppsForKnowledgeSourceResponse:
    type: object
    properties:
      apps:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1App'
  v1alpha1ListAllKnowledgeSourcesForAppRequest:
    type: object
    properties:
      appId:
        type: string
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
      filters:
        $ref: '#/definitions/v1alpha1ListAllKnowledgeSourcesForAppRequestFilters'
  v1alpha1ListAllKnowledgeSourcesForAppRequestFilters:
    type: object
    properties:
      configTypes:
        type: array
        items:
          $ref: '#/definitions/v1alpha1KnowledgeSourceConfigType'
  v1alpha1ListAllKnowledgeSourcesForAppResponse:
    type: object
    properties:
      knowledgeSources:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeSource'
  v1alpha1ListAppsRequest:
    type: object
    properties:
      filters:
        $ref: '#/definitions/v1alpha1ListAppsRequestFilters'
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
      includeKnowledgeBaseKeys:
        type: boolean
  v1alpha1ListAppsRequestFilters:
    type: object
    properties:
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1ListAppsResponse:
    type: object
    properties:
      apps:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1App'
      metadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1alpha1ListEmbeddingsRequest:
    type: object
    properties:
      filters:
        $ref: '#/definitions/v1alpha1ListEmbeddingsRequestFilters'
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
  v1alpha1ListEmbeddingsRequestFilters:
    type: object
    properties:
      relationship:
        $ref: '#/definitions/v1alpha1EmbeddingRelationship'
      sourceType:
        type: array
        items:
          $ref: '#/definitions/v1alpha1EmbeddingSourceType'
      vendorModel:
        $ref: '#/definitions/v1alpha1EmbeddingVendorModel'
      associatedAppId:
        type: string
      tags:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1Tag'
  v1alpha1ListEmbeddingsResponse:
    type: object
    properties:
      embeddings:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1Embedding'
      metadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1alpha1ListKnowledgeBasesRequest:
    type: object
    properties:
      filters:
        $ref: '#/definitions/v1alpha1ListKnowledgeBasesRequestFilters'
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
      includeKnowledgeSourceKeys:
        type: boolean
  v1alpha1ListKnowledgeBasesRequestFilters:
    type: object
    properties:
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1ListKnowledgeBasesResponse:
    type: object
    properties:
      knowledgeBases:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeBase'
      metadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1alpha1ListKnowledgeSourcesRequest:
    type: object
    properties:
      filters:
        $ref: '#/definitions/v1alpha1ListKnowledgeSourcesRequestFilters'
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
      includeKnowledgeBaseKeys:
        type: boolean
  v1alpha1ListKnowledgeSourcesRequestFilters:
    type: object
    properties:
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
      configTypes:
        type: array
        items:
          $ref: '#/definitions/v1alpha1KnowledgeSourceConfigType'
  v1alpha1ListKnowledgeSourcesResponse:
    type: object
    properties:
      knowledgeSources:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeSource'
      metadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1alpha1Namespace:
    type: object
    properties:
      accountGroupNamespace:
        $ref: '#/definitions/NamespaceAccountGroupNamespace'
      partnerNamespace:
        $ref: '#/definitions/NamespacePartnerNamespace'
      adminNamespace:
        $ref: '#/definitions/NamespaceAdminNamespace'
  v1alpha1RefreshBusinessProfileEmbeddingsRequest:
    type: object
    properties:
      accountGroupId:
        type: string
        description: The account group ID to refresh embeddings for. The current information on the business's listing profile is used to refresh the embeddings.
  v1alpha1ScrapeWebsiteRequest:
    type: object
    properties:
      knowledgeSourceId:
        type: string
        description: |-
          The knowledge source ID to scrape.
          The knowledge source must have a config type of KNOWLEDGE_SOURCE_CONFIG_TYPE_WEBSITE with valid parameters set (url, crawl_mode).
      namespace:
        $ref: '#/definitions/v1alpha1Namespace'
  v1alpha1ScrapeWebsiteResponse:
    type: object
  v1alpha1SetAppsForKnowledgeSourceRequest:
    type: object
    properties:
      knowledgeSourceKey:
        $ref: '#/definitions/v1alpha1KnowledgeSourceKey'
        description: The knowledge source key to associate with the apps.
      appKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1AppKey'
        description: 'Deprecated: Use app_keys_v2 instead.'
      appKeysV2:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1AppKeyV2'
        description: The keys of the apps to associate with the knowledge source.
  v1alpha1Tag:
    type: object
    properties:
      key:
        type: string
        description: The tag key.
      value:
        type: string
        description: The tag value.
  v1alpha1TrainingProgress:
    type: string
    enum:
      - TRAINING_INVALID
      - TRAINING_QUEUED
      - TRAINING_IN_PROGRESS
      - TRAINING_DONE
    default: TRAINING_INVALID
  v1alpha1TuneAIModelRequest:
    type: object
    properties:
      vendorModel:
        $ref: '#/definitions/v1alpha1EmbeddingVendorModel'
      outputPath:
        type: string
        description: |-
          All fields below are optional if you want to have a separate directory to source the training data, or specify a custom model name.
          Default values will be provided based on the vendor model.
      queriesPath:
        type: string
      corpusPath:
        type: string
      trainingLabelPath:
        type: string
      modelDisplayName:
        type: string
  v1alpha1UpdateEmbeddingRequest:
    type: object
    properties:
      embedding:
        $ref: '#/definitions/v1alpha1Embedding'
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
  v1alpha1UpdateKnowledgeBaseRequest:
    type: object
    properties:
      knowledgeBase:
        $ref: '#/definitions/v1alpha1KnowledgeBase'
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
  v1alpha1UpdateKnowledgeSourceRequest:
    type: object
    properties:
      knowledgeSource:
        $ref: '#/definitions/v1alpha1KnowledgeSource'
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
  v1alpha1UpsertAppRequest:
    type: object
    properties:
      app:
        $ref: '#/definitions/v1alpha1App'
  v1alpha1UpsertKnowledgeForAppRequest:
    type: object
    properties:
      app:
        $ref: '#/definitions/v1alpha1App'
        description: The app to create or update.
      knowledgeSourceKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha1KnowledgeSourceKey'
        description: The knowledge source keys to associate with the app.
  v1alpha1WebsiteScrapeConfigCrawlMode:
    type: string
    enum:
      - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_INVALID
      - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_SINGLE
      - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_RECURSIVE
      - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_SITEMAP
    default: WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_INVALID
    title: |-
      - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_SINGLE: only scrape the specified url
       - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_RECURSIVE: scrape the specified url and follow links on the page
       - WEBSITE_SCRAPE_CONFIG_CRAWL_MODE_SITEMAP: scrape via a sitemap either given directly by the url or on common paths relative to it (/robots.txt, /sitemap.xml, /sitemap_index.xml)
  v1alpha1WebsiteScrapeConfigProgress:
    type: string
    enum:
      - WEBSITE_SCRAPE_CONFIG_PROGRESS_INVALID
      - WEBSITE_SCRAPE_CONFIG_PROGRESS_QUEUED
      - WEBSITE_SCRAPE_CONFIG_PROGRESS_IN_PROGRESS
      - WEBSITE_SCRAPE_CONFIG_PROGRESS_DONE
    default: WEBSITE_SCRAPE_CONFIG_PROGRESS_INVALID
    title: |-
      - WEBSITE_SCRAPE_CONFIG_PROGRESS_QUEUED: the scrape is queued and waiting to start
      A scrape may be in a queued state for some time if it is being rate limited
       - WEBSITE_SCRAPE_CONFIG_PROGRESS_IN_PROGRESS: the scrape is in progress
       - WEBSITE_SCRAPE_CONFIG_PROGRESS_DONE: the scrape has completed and/or no scrape is in progress
  vendastatypesFieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
  vendastatypesPagedRequestOptions:
    type: object
    properties:
      cursor:
        type: string
        title: cursor can be passed to retrieve the next page of results keyed by the cursor
      pageSize:
        type: string
        format: int64
        title: page_size specifies the number of items to return in the next page
  vendastatypesPagedResponseMetadata:
    type: object
    properties:
      nextCursor:
        type: string
        title: A cursor that can be provided to retrieve the next page of results
      hasMore:
        type: boolean
        title: Whether or not more results exist
      totalResults:
        type: string
        format: int64
        title: The total number of results. This is not supported on all paged apis and will be 0 if it is not supported
