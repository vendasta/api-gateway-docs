swagger: "2.0"
info:
  title: event_broker/v1/api.proto
  version: version not set
tags:
  - name: EventBroker
consumes:
  - application/json
produces:
  - application/json
paths:
  /eventbroker.v1.EventBroker/CreateEventType:
    post:
      summary: Creates an event type
      operationId: EventBroker_CreateEventType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Create Event Type is the precursor to being able to emit events to Event Broker.
            All events have a parent EventType that they are associated to. This gives
            events a strongly typed event with the registered schema, as well an access
            management model on determining who has access to which events. The
            registerer of the event type will implicitly control who can emit events
            under this type by the same service account.

            Example(s):
            {
              "id": "/app/accounts/event-type/product-activation",
              "event_id_format": "/account-group-id/<account_group_id>/product/<product_id>/activation_date/<activation_date>",
              "description": "An event that is emitted on every product activation.",
              schema: ...
            }

            {
              "id": "/app/billing/event-type/vendasta-monthly-revenue",
              "event_id_format": "/billing-month/<billing_month>",
              "description": "A montly event that is emitted when last months revenue has been calculated from the generated partner invoices.",
              "schema": ...
            }
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateEventTypeRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/CreateSubscription:
    post:
      summary: |-
        ------  Subscription ------
        deprecated - use ReplaceSubscription instead
      operationId: EventBroker_CreateSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            DEPRECATED: Use ReplaceSubscription instead
            Subscribe to an event.

            Example:
            {
              "event_type_id": "/app/accounts/event-type/product-activation",
              "invoke": {
                "http": {
                  "url": "https://notifications.apigateway.co/notifications.v1.Notifications/Send"
                }
              },
              "filter": {
                "filters": {...}
              }
            }
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateSubscriptionRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/DeleteEventType:
    post:
      summary: Delete an event type
      operationId: EventBroker_DeleteEventType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Request to delete an Event Type.
            Any service subscribed to this event type must have its subscription deleted.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteEventTypeRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/DeleteSubscription:
    post:
      operationId: EventBroker_DeleteSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteSubscriptionRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/EmitEvent:
    post:
      summary: Emits an event
      operationId: EventBroker_EmitEvent
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Emitting an event to Event Broker will persist the event and notify all
            interested subscribers of the event.

            Example:
            {
              "event": {
                "event_type_id": "/app/accounts/event-type/product-activation",
                "emitted_at": 1536767695,
                "data": {
                  "account_group_id": "AG-KF3EWJF",
                  "product": "RM",
                  "activation_date": 1536767695,
                  "activator_id": "UID-LJKASD8TJ"
                  ...
                }
              }
            }
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1EmitEventRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/GetMultiEventType:
    post:
      summary: Get multiple event types
      operationId: EventBroker_GetMultiEventType
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetMultiEventTypeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetMultiEventTypeRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/GetSubscription:
    post:
      operationId: EventBroker_GetSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSubscriptionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSubscriptionRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/ListEventTypes:
    post:
      summary: List event types
      operationId: EventBroker_ListEventTypes
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListEventTypesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListEventTypesRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/ReplaceSubscription:
    post:
      operationId: EventBroker_ReplaceSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Subscribe to an event, replacing the configuration of the subscription if it already exists.

            Example:
            {
              "owner": "notification-service@vendasta.com",
              "event_type_id": "/app/accounts/event-type/product-activation",
              "invoke": {
                "http": {
                  "url": "https://notifications.apigateway.co/notifications.v1.Notifications/Send"
                }
              },
              "filter": {
                "filters": {...}
              }
            }
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ReplaceSubscriptionRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/ReplaySubscription:
    post:
      operationId: EventBroker_ReplaySubscription
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ReplaySubscriptionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Replays a subscription from the beginning of the topic's history.
            These are not delivered in order.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ReplaySubscriptionRequest'
      tags:
        - EventBroker
  /eventbroker.v1.EventBroker/UpdateEventType:
    post:
      summary: Updates an event type
      operationId: EventBroker_UpdateEventType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: |-
            Updates an Event Type. No breaking changes can be made to an Event Type because subscribers may not understand how
            to deal with the updated messages.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateEventTypeRequest'
      tags:
        - EventBroker
definitions:
  GetMultiEventTypeResponseEventTypeContainer:
    type: object
    properties:
      eventType:
        $ref: '#/definitions/v1EventType'
  HTTPContentType:
    type: string
    enum:
      - INVOKE_HTTP_CONTENT_TYPE_PROTOBUF
      - INVOKE_HTTP_CONTENT_TYPE_JSON
    default: INVOKE_HTTP_CONTENT_TYPE_PROTOBUF
    description: |-
      Content type is used to describe how the receiver of an event wants their payload to be encoded.

       - INVOKE_HTTP_CONTENT_TYPE_PROTOBUF: If INVOKE_HTTP_CONTENT_TYPE_PROTOBUF is set, the HTTP request will be made with the application/protobuf header.
      The content of the request will be a protobuf encoded message.
       - INVOKE_HTTP_CONTENT_TYPE_JSON: If INVOKE_HTTP_CONTENT_TYPE_JSON is set, the HTTP request will be made with the application/json header.
      The content of the request will be a json string.
  InvokeHTTP:
    type: object
    properties:
      url:
        type: string
      contentType:
        $ref: '#/definitions/HTTPContentType'
        description: Content type tells Event Broker how the receiver would like the event request encoded.
  InvokePubsubTopic:
    type: object
    properties:
      gcpProject:
        type: string
        title: the name of the google cloud platform project that the topic lives in - ie "repcore-prod"
      topicName:
        type: string
        title: the name of the existing topic
    description: |-
      PubSubTopic specifies a Cloud Pub/Sub topic to publish messages into. This is lower latency and more scalable than a HTTP invocation method.
      If you provide the same topic to multiple subscriptions, you will receive messages for multiple Event-Broker subscriptions on a single Pub/Sub subscription and may need to use the delivery event metadata to correlate which subscription that event was delivered for.
  JoinTypeJoin:
    type: object
    properties:
      eventTypeId:
        type: string
        title: The ID of the event to join with
      "on":
        $ref: '#/definitions/v1JoinNode'
        title: On specifies how to join the events
      keepProperties:
        type: object
        additionalProperties:
          type: string
        description: |-
          The properties to keep from the joining message. The key is the name of the property to keep, the value is it's
          name on the joined event. This allows for properties to be renamed if needed. If a property's new name collides
          with an existing property on the event it will be overwritten by the joining value.
      as:
        type: string
        description: |-
          "As" is the name of the property the joining events should be nested under. This is required when a join
          can result in multiple events.
      window:
        type: string
        description: |-
          Events may be emitted if the join can not be performed. However, if it's common for the joining event to be
          emitted in close proximity to the main event you may provide a window. Window describes how long Event Broker
          should allow for the joining event to come in. If the window is reached, and there is no event to join with, the
          event will be emitted.
  PropertyPIITag:
    type: string
    enum:
      - PROPERTY_PII_TAG_CLEAN
      - PROPERTY_PII_TAG_PII
      - PROPERTY_PII_TAG_PD
    default: PROPERTY_PII_TAG_CLEAN
    description: |-
      PIITag defines potential PII tags.

       - PROPERTY_PII_TAG_CLEAN: clean means the data is not PII or PD.
       - PROPERTY_PII_TAG_PII: PII means Personally Identifiable Information. It is information that can be used to retrieve personal data, such as IAM user ID.
       - PROPERTY_PII_TAG_PD: PD means personal data, such as name, email and address. They are sensitive data we need to protect in our system.
  ReplaySubscriptionRequestTimeRange:
    type: object
    properties:
      start:
        type: string
        format: date-time
        description: Events should be emitted if they happened after this timestamp.
      end:
        type: string
        format: date-time
        description: Events should be emitted if they happened before this timestamp.
  eventbrokerv1Property:
    type: object
    properties:
      property:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1BooleanOperator:
    type: string
    enum:
      - BOOLEAN_OPERATOR_AND
      - BOOLEAN_OPERATOR_OR
    default: BOOLEAN_OPERATOR_AND
  v1CreateEventTypeRequest:
    type: object
    properties:
      id:
        type: string
        description: |-
          A unique RESTful identifier. The format will be used for providing event
          type discoverability and categorizing event types.

          Example: /app/accounts/event-type/product-activation
      eventIdFormat:
        type: string
        description: |-
          A template RESTful identifier that events emitted will leverage. The
          format will be used for providing event discoverability but also as the
          unique identifier for each event.

          Example: /account-group-id/<account_group_id>
      description:
        type: string
        description: |-
          A human readable description that provides detailed information about
          the event, when it is emitted, etc..
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        title: expected schema of the event
      name:
        type: string
        title: A short, human readable name for the event, used as a title/reference for documentation
    description: |-
      Create Event Type is the precursor to being able to emit events to Event Broker.
      All events have a parent EventType that they are associated to. This gives
      events a strongly typed event with the registered schema, as well an access
      management model on determining who has access to which events. The
      registerer of the event type will implicitly control who can emit events
      under this type by the same service account.

      Example(s):
      {
        "id": "/app/accounts/event-type/product-activation",
        "event_id_format": "/account-group-id/<account_group_id>/product/<product_id>/activation_date/<activation_date>",
        "description": "An event that is emitted on every product activation.",
        schema: ...
      }

      {
        "id": "/app/billing/event-type/vendasta-monthly-revenue",
        "event_id_format": "/billing-month/<billing_month>",
        "description": "A montly event that is emitted when last months revenue has been calculated from the generated partner invoices.",
        "schema": ...
      }
  v1CreateSubscriptionRequest:
    type: object
    properties:
      name:
        type: string
        title: Name of the subscription
      eventTypeId:
        type: string
        title: The event type id that you are subscribing to
      invoke:
        $ref: '#/definitions/v1Invoke'
        description: The method that should be invoked when an event is received on this subscription.
      filter:
        $ref: '#/definitions/v1CreateSubscriptionRequestFilter'
        description: Filters provide a way of limiting what events take part in the subscription.
      join:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1JoinType'
        description: Join allows combining multiple event streams. Joins are performed from left to right.
    description: |-
      DEPRECATED: Use ReplaceSubscription instead
      Subscribe to an event.

      Example:
      {
        "event_type_id": "/app/accounts/event-type/product-activation",
        "invoke": {
          "http": {
            "url": "https://notifications.apigateway.co/notifications.v1.Notifications/Send"
          }
        },
        "filter": {
          "filters": {...}
        }
      }
  v1CreateSubscriptionRequestFilter:
    type: object
    properties:
      filters:
        type: object
        title: |-
          An equality map of key->val where each clause is ANDd together
          Deprecated: use "where" instead
      where:
        $ref: '#/definitions/v1FilterNode'
        description: Where provides a way of limiting events that take part in the subscription.
  v1DeleteEventTypeRequest:
    type: object
    properties:
      id:
        type: string
        title: The identifier of the event type to delete
    description: |-
      Request to delete an Event Type.
      Any service subscribed to this event type must have its subscription deleted.
  v1DeleteSubscriptionRequest:
    type: object
    properties:
      name:
        type: string
        title: Name of the subscription
      eventTypeId:
        type: string
        title: The event type id that the subscription is for
      owner:
        type: string
        description: The owner of the subscription. If the owner is not set it will be inferred.
    title: Delete a subscription
  v1EmitEventRequest:
    type: object
    properties:
      event:
        $ref: '#/definitions/v1Event'
    description: |-
      Emitting an event to Event Broker will persist the event and notify all
      interested subscribers of the event.

      Example:
      {
        "event": {
          "event_type_id": "/app/accounts/event-type/product-activation",
          "emitted_at": 1536767695,
          "data": {
            "account_group_id": "AG-KF3EWJF",
            "product": "RM",
            "activation_date": 1536767695,
            "activator_id": "UID-LJKASD8TJ"
            ...
          }
        }
      }
  v1Event:
    type: object
    properties:
      eventTypeId:
        type: string
        title: The event type id that has been registered with Event Broker
      emittedAt:
        type: string
        format: date-time
        title: The time that the event was emitted at
      data:
        type: object
        title: The data of the event
      created:
        type: string
        format: date-time
        title: |-
          The time that the event was created. This can be different than the emitted_at time because the emitted_at time can be set to any time
          in the past for the event to be emitted immediately
  v1EventType:
    type: object
    properties:
      id:
        type: string
        description: |-
          A unique RESTful identifier. The format will be used for providing event
          type discoverability and categorizing event types.

          Example: /app/accounts/event-type/product-activation
      eventIdFormat:
        type: string
        description: |-
          A template RESTful identifier that events emitted will leverage. The
          format will be used for providing event discoverability but also as the
          unique identifier for each event.

          Example: /account-group-id/<account_group_id>
      description:
        type: string
        description: |-
          A human readable description that provides detailed information about
          the event, when it is emitted, etc..
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        title: expected schema of the event
      name:
        type: string
        title: A short, human readable name for the event, used as a title/reference for documentation
  v1FilterNode:
    type: object
    properties:
      equal:
        $ref: '#/definitions/v1PropertyValue'
        description: Validates that a property on the Event matches a specific value.
      operator:
        $ref: '#/definitions/v1Operator'
        description: Combines multiple operations with AND or OR operators.
      not:
        $ref: '#/definitions/v1FilterNode'
        description: Not returns the opposite boolean value of the operator provided.
      missing:
        $ref: '#/definitions/eventbrokerv1Property'
        description: |-
          Filters events which are missing a specific property. This will not filter out events which have the
          property set to a null value. The "null" operator can be used to filter for properties which have null
          values.
      "null":
        $ref: '#/definitions/eventbrokerv1Property'
        description: |-
          The Subscriber would receive events which have the specified property set to the null value. This will also
          include events that are missing the property entirely. This will not match to values that are present but
          set to the zero value, use "empty" for that.
      subset:
        $ref: '#/definitions/v1PropertyValue'
        description: |-
          Events may include repeated values for a specific property. It may be useful to receive events which have
          a property in the list.

          For example, an event might have some attributes describing a category that looks like:
          ['Automotive', 'Car Dealers', 'Auto Repair']

          Subscribers may only care about Auto Repair. In this case they can provide "Auto Repair" as the value to
          only receive those events. If the Subscriber only wants events with "Auto Repair" and "Car Dealers"
          the value can be defined as ['Auto Repair', 'Car Dealers']. If you wish to receive events where it's
          "Auto Repair" OR "Car Dealers", you may use two subset operation and join them with an OR operator.

          Order does not matter when checking if a list is a subset of an event's repeated property.
      zero:
        $ref: '#/definitions/eventbrokerv1Property'
        description: "The Subscriber would recieve events that have the specified property set to the zero value for the fields type. \nThis will not match to properties which are missing entirely, use \"missing\" or \"null\" for that."
  v1GetMultiEventTypeRequest:
    type: object
    properties:
      eventTypeId:
        type: array
        items:
          type: string
        title: The unique identifiers of the desired event types
  v1GetMultiEventTypeResponse:
    type: object
    properties:
      eventTypes:
        type: array
        items:
          type: object
          $ref: '#/definitions/GetMultiEventTypeResponseEventTypeContainer'
        description: The event types, returned in the position they were requested. Missing event types will be null.
  v1GetSubscriptionRequest:
    type: object
    properties:
      name:
        type: string
      owner:
        type: string
      eventTypeId:
        type: string
  v1GetSubscriptionResponse:
    type: object
    properties:
      subscription:
        $ref: '#/definitions/v1Subscription'
  v1Invoke:
    type: object
    properties:
      http:
        $ref: '#/definitions/InvokeHTTP'
      pubsub:
        $ref: '#/definitions/InvokePubsubTopic'
    description: Invoke describes the how to route a subscriptions payload.
  v1JoinNode:
    type: object
    properties:
      equal:
        $ref: '#/definitions/v1PropertyValue'
        description: |-
          DEPRECATED: Use equal_property
          True if the name property on the Event matches the value of the property named in PropertyValue.

          For example, a PropertyValue of {property: "user_id", value: {stringValue: "uid"}} means that this will join
          the property named "user_id" on the source event to the property named "uid" on the joined event,
          not to events with literal values of "uid" on properties named "user_id".
      and:
        $ref: '#/definitions/v1JoinOperator'
        description: Combines multiple clauses with AND operators.
      equalProperty:
        $ref: '#/definitions/v1PropertyMapping'
        description: |-
          True if the value of the named property on the Event matches the value of the other named property.

          For example, a PropertyMapping of {left_property: "user_id", right_property: "uid"} means that this will join
          the property named "user_id" on the source event to the property named "uid" on the joined event.
      equalLiteral:
        $ref: '#/definitions/v1PropertyValue'
        description: |-
          For example, a PropertyMapping of {property: "uid", value: {stringValue: "U-123"}} means that this will join
          the source event on to events where the value of "uid" is exactly the string "U-123".
        title: True if the value of the named property on the Event matches the literal value of the property named by PropertyValueMapping.right_property_value
  v1JoinOperator:
    type: object
    properties:
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1JoinNode'
  v1JoinType:
    type: object
    properties:
      leftJoin:
        $ref: '#/definitions/JoinTypeJoin'
        description: |-
          Left join will attempt to join an event with another. If no event exists to join with, you will still receive an
          event. However, the "keep_properties" will be omitted.
  v1ListEventTypesRequest:
    type: object
    properties:
      cursor:
        type: string
        title: A cursor should be supplied from the last response to load the next results
      pageSize:
        type: string
        format: int64
        title: The number of results to retrieve
      searchTerm:
        type: string
        title: The search term for the event type
  v1ListEventTypesResponse:
    type: object
    properties:
      eventTypes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1EventType'
        title: A page of event types
      nextCursor:
        type: string
        title: A cursor that can be provided to retrieve the next page of results
      hasMore:
        type: boolean
        title: Whether or not more results exist
  v1Operator:
    type: object
    properties:
      operator:
        $ref: '#/definitions/v1BooleanOperator'
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1FilterNode'
  v1PropertyMapping:
    type: object
    properties:
      leftProperty:
        type: string
      rightProperty:
        type: string
  v1PropertyValue:
    type: object
    properties:
      property:
        type: string
      value: {}
  v1ReplaceSubscriptionRequest:
    type: object
    properties:
      name:
        type: string
        title: Name of the subscription
      owner:
        type: string
        description: The owner of the subscription. If the owner is not set it will be inferred.
      eventTypeId:
        type: string
        title: The event type id that you are subscribing to
      invoke:
        $ref: '#/definitions/v1Invoke'
        description: The method that should be invoked when an event is received on this subscription.
      filter:
        $ref: '#/definitions/v1ReplaceSubscriptionRequestFilter'
        description: Filters provide a way of limiting what events take part in the subscription.
      join:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1JoinType'
        description: Join allows combining multiple event streams. Joins are performed from left to right.
      retryConfig:
        $ref: '#/definitions/v1RetryConfig'
        description: Configure how Event Broker handles failing events.
    description: |-
      Subscribe to an event, replacing the configuration of the subscription if it already exists.

      Example:
      {
        "owner": "notification-service@vendasta.com",
        "event_type_id": "/app/accounts/event-type/product-activation",
        "invoke": {
          "http": {
            "url": "https://notifications.apigateway.co/notifications.v1.Notifications/Send"
          }
        },
        "filter": {
          "filters": {...}
        }
      }
  v1ReplaceSubscriptionRequestFilter:
    type: object
    properties:
      filters:
        type: object
        title: |-
          An equality map of key->val where each clause is ANDd together
          Deprecated: use "where" instead
      where:
        $ref: '#/definitions/v1FilterNode'
        description: Where provides a way of limiting events that take part in the subscription.
  v1ReplaySubscriptionRequest:
    type: object
    properties:
      eventTypeId:
        type: string
        title: The event type id that you are replaying a subscription for
      owner:
        type: string
        description: The owner of the subscription. If the owner is not set it will be inferred.
      name:
        type: string
        description: The name of the subscription. This subscription must already exist.
      latestEvents:
        type: boolean
        title: |-
          If true, only the latest version of each event will be replayed.
          If there were two events with different timestamps for `/account_group_id/AG-2222VMM7QS/updated/`, only the event with the latest timestamp will be published
      filter:
        $ref: '#/definitions/v1FilterNode'
        description: |-
          Only events which match the filter will be re-emitted.
          If latest_events is enabled, Event Broker will try to send the latest event which matches this filter.
      timeRange:
        $ref: '#/definitions/ReplaySubscriptionRequestTimeRange'
        description: |-
          Specify a range of events to be emitted.
          If latest_events is enabled, the latest event in the range will be emitted.
    description: |-
      Replays a subscription from the beginning of the topic's history.
      These are not delivered in order.
  v1ReplaySubscriptionResponse:
    type: object
    properties:
      statusUrl:
        type: string
        title: Visit this URL to see the status of your replay
  v1RetryConfig:
    type: object
    properties:
      maxAttempts:
        type: string
        format: int64
        description: |-
          The max number of times Event Broker will try to deliver a message to a subscription.
          This must be >= -1. -1 indicates unlimited retries.
      maxRetryDuration:
        type: string
        description: |-
          max_retry_duration specifies the time limit for retrying a failed event.
          Once the time limit has passed and an attempt to deliver the event has been made
          no further attempts will be made.

          If the duration is zero, the event will retry indefinitely.
      minBackoff:
        type: string
        description: |-
          If an event delivery fails, it will retry between the min_backoff
          time and the max_backoff time. If the min_backoff time is not set,
          the default time of 100ms will be used.
      maxBackoff:
        type: string
        description: |-
          If an event delivery fails, it will retry between the min_backoff
          time and the max_backoff time. If the max_backoff time is not set,
          the default time of 5 minutes will be used.
      maxDoublings:
        type: string
        format: int64
        description: |-
          When a task is retrying it will start at the min_backoff time then double max_doublings times, then increase
          linearly until the max_backoff time is reached.

          Google's Example from Cloud Tasks is as follows:
          If the min_backoff time is 10s, min_backoff is 300s, and max_doublings is 3 then the first retry will happen at
          10 seconds. The next 3 retries will be doubled then increase linearly by 2^3 * 10s. The retries will look like:
          10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, ...

          The default is 16.
        title: The time between retries will double max_doublings times
  v1Subscription:
    type: object
    properties:
      name:
        type: string
      owner:
        type: string
      eventTypeId:
        type: string
      created:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
      invoke:
        $ref: '#/definitions/v1Invoke'
      filter:
        $ref: '#/definitions/v1ReplaceSubscriptionRequestFilter'
      join:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1JoinType'
  v1UpdateEventTypeRequest:
    type: object
    properties:
      id:
        type: string
        title: The identifier of the event type to update
      name:
        type: string
        title: A short, human readable name for the event, used as a title/reference for documentation
      description:
        type: string
        title: The updated description
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        description: |-
          The updated event schema. Breaking changes can not be made to the schema.
          i.e. fields may not be removed or renamed, and existing types must remain the same.
    description: |-
      Updates an Event Type. No breaking changes can be made to an Event Type because subscribers may not understand how
      to deal with the updated messages.
  vendastatypesProperty:
    type: object
    properties:
      name:
        type: string
        title: |-
          Unique identifier for this property. Must be in snake case format.
          Example(s): account_group_id, listing_id, company_name
      type:
        $ref: '#/definitions/vendastatypesPropertyType'
        title: Type for this property
      repeated:
        type: boolean
        description: Indicates if the field is repeated.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vendastatypesProperty'
        description: |-
          Can only be specified if the Type supplied is a STRUCT.
          Is the schema of the structured property.
      piiTag:
        $ref: '#/definitions/PropertyPIITag'
      description:
        type: string
        title: Description of this property
    title: Property defines a single property for a schema
  vendastatypesPropertyType:
    type: string
    enum:
      - PROPERTY_TYPE_STRING
      - PROPERTY_TYPE_INT64
      - PROPERTY_TYPE_DOUBLE
      - PROPERTY_TYPE_BOOL
      - PROPERTY_TYPE_TIMESTAMP
      - PROPERTY_TYPE_GEOPOINT
      - PROPERTY_TYPE_STRUCT
      - PROPERTY_TYPE_BYTES
    default: PROPERTY_TYPE_STRING
  vendastatypesSchema:
    type: object
    properties:
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vendastatypesProperty'
    title: Schema describes the structure of data in a storage-agnostic way
