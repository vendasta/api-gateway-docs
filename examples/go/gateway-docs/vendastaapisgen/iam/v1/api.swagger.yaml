swagger: "2.0"
info:
  title: iam/v1/api.proto
  version: version not set
tags:
  - name: IAM
  - name: UserIAM
consumes:
  - application/json
produces:
  - application/json
paths:
  /iam.v1.IAM/AccessResource:
    post:
      summary: Asks IAM whether a certain subject has access to a certain resource
      operationId: IAM_AccessResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AccessResourceRequest'
      tags:
        - IAM
  /iam.v1.IAM/AddKey:
    post:
      summary: Add a public/private key pair to a subject. The private key is returned on the response, but is not stored in IAM.
      operationId: IAM_AddKey
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1AddKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AddKeyRequest'
      tags:
        - IAM
  /iam.v1.IAM/AddMultiUserRestriction:
    post:
      summary: AddMultiUserRestriction adds the specific restriction to the specified users
      operationId: IAM_AddMultiUserRestriction
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AddMultiUserRestrictionRequest'
      tags:
        - IAM
  /iam.v1.IAM/AuthenticateSubject:
    post:
      summary: |-
        Authenticate subject takes a context, email and password and validates the password is correct. No response
        is returned but an OK status indicates a successful authentication, while an Unauthenticated response will
        be returned on a missing subject/persona, the persona is locked, or the password is not correct.
      description: |-
        Multiple authentication attempts with the incorrect password will lock the persona for a short time period.
        This is to prevent a brute-force attempt at authenticating a user.
      operationId: IAM_AuthenticateSubject
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AuthenticateSubjectRequest'
      tags:
        - IAM
  /iam.v1.IAM/ChangeSubjectEmail:
    post:
      summary: Will change the email of a given subject persona.
      operationId: IAM_ChangeSubjectEmail
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ChangeSubjectEmailRequest'
      tags:
        - IAM
  /iam.v1.IAM/CreateExternalID:
    post:
      summary: Create the external ID of a user for a given external id type
      operationId: IAM_CreateExternalID
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateExternalIDRequest'
      tags:
        - IAM
  /iam.v1.IAM/CreateSession:
    post:
      summary: |-
        Create session subject takes in credentials for a subject, whether it be an email and password or Google id token.
        A response with a session is returned if authentication is successful, while an Unauthenticated response will
        be returned on a missing subject/persona, the persona is locked, or the password is not correct.
      description: |-
        Multiple authentication attempts with the incorrect password will lock the persona for a short time period.
        This is to prevent a brute-force attempt at authenticating a user.
      operationId: IAM_CreateSession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateSessionRequest'
      tags:
        - IAM
  /iam.v1.IAM/CreateTemporarySubject:
    post:
      summary: |-
        Create Custom Session will create a session that contains the attributes for a subject.
        in most cases a standard IAM session should be used.
      operationId: IAM_CreateTemporarySubject
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateTemporarySubjectResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateTemporarySubjectRequest'
      tags:
        - IAM
  /iam.v1.IAM/DeleteSubject:
    post:
      summary: Will delete the persona from a given subject.
      operationId: IAM_DeleteSubject
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteSubjectRequest'
      tags:
        - IAM
  /iam.v1.IAM/DeleteUser:
    post:
      summary: DeleteUser deletes a user
      operationId: IAM_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteUserRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetMultiExternalID:
    post:
      summary: Get the external ID of a user for a given external id type
      operationId: IAM_GetMultiExternalID
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetMultiExternalIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetMultiExternalIDRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetMultiUsers:
    post:
      summary: GetMultiUsers returns the users specified by either their user ID or their unique namespace/email
      operationId: IAM_GetMultiUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetMultiUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetMultiUsersRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetResetPasswordToken:
    post:
      summary: Get a one-time-use, time-sensitive JWT that allows a caller to reset a password
      operationId: IAM_GetResetPasswordToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ResetPasswordTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetResetPasswordTokenRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetSessionToken:
    post:
      summary: |-
        deprecated: Use GetSessionToken in UserIAM
        Asks IAM to exchange the caller-provided token for a IAM session token.
      operationId: IAM_GetSessionToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSessionTokenRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetShortLivedToken:
    post:
      summary: |-
        Deprecated: Use UserIAM.GetImpersonationToken or allow the desired workflow without impersonation
        Asks IAM for a short lived token for a specific user.
        This is a temporary endpoint until we back VBC, Marketplace, and SSC sessions by IAM.
      operationId: IAM_GetShortLivedToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetShortLivedTokenRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetSubjectContext:
    post:
      summary: |-
        Given a subject ID, will return the context that is associated to this persona.
        Specifically, this is useful for getting the partner id from a user ID, if the user is in a type/namespace
        context.
      operationId: IAM_GetSubjectContext
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSubjectContextResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSubjectContextRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetSubjects:
    post:
      summary: Returns a list of subject personas by their subject IDs. The request is scoped to a specific context.
      operationId: IAM_GetSubjects
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSubjectsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSubjectsRequest'
      tags:
        - IAM
  /iam.v1.IAM/GetSubjectsByEmail:
    post:
      summary: Returns a list of subject personas by their emails. The request is scoped to a specific context.
      operationId: IAM_GetSubjectsByEmail
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSubjectsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSubjectsByEmailRequest'
      tags:
        - IAM
  /iam.v1.IAM/ListPersonas:
    post:
      summary: List Personas will return a paged set of results of all the available personas across all contexts for a specific user.
      operationId: IAM_ListPersonas
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListPersonasResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1IAMListPersonasRequest'
      tags:
        - IAM
  /iam.v1.IAM/ListPersonasByEmail:
    post:
      summary: |-
        List Personas by email will return a paged set of results of all the available personas across all contexts for a specific email.
        DEPRECATED: use ListPersonas
      operationId: IAM_ListPersonasByEmail
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListPersonasResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListPersonasByEmailRequest'
      tags:
        - IAM
  /iam.v1.IAM/ListSecurityLogs:
    post:
      summary: ListSecurityLogs returns a list of security logs for a user
      operationId: IAM_ListSecurityLogs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListSecurityLogsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListSecurityLogsRequest'
      tags:
        - IAM
  /iam.v1.IAM/ListUsers:
    post:
      summary: |-
        ListUsers returns will return a paged set of results. There is an option to get all.
        For example, listing the users with an email and/or in a namespace
      operationId: IAM_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListUsersRequest'
      tags:
        - IAM
  /iam.v1.IAM/MutateAttributes:
    post:
      summary: |-
        Will update/set/delete a subject personas attributes by its subject ID. Will return a not found error if the
        subject persona doesn't exist.
      operationId: IAM_MutateAttributes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1MutateAttributesRequest'
      tags:
        - IAM
  /iam.v1.IAM/RegisterPolicy:
    post:
      summary: Registers a policy associated with a resource with IAM that is evaluated whenever a subject requests access to that type of resource.
      operationId: IAM_RegisterPolicy
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RegisterPolicyRequest registers a policy with a resource in IAM.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterPolicyRequest'
      tags:
        - IAM
  /iam.v1.IAM/RegisterResource:
    post:
      summary: Registers a specific resource with IAM. This allows IAM to ask the resource owner about its resources.
      operationId: IAM_RegisterResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RegisterResourceRequest is issued by a ResourceOwner to tell IAM that they would like to expose a resource that IAM will control access to.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterResourceRequest'
      tags:
        - IAM
  /iam.v1.IAM/RegisterResourceOwner:
    post:
      summary: Registers a resource owner with IAM. This sets an application up for integration with IAM access control system.
      operationId: IAM_RegisterResourceOwner
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RegisterResourceOwnerRequest is issued by a prospective ResourceOwner to tell IAM they intend to expose resources that IAM will control access to.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterResourceOwnerRequest'
      tags:
        - IAM
  /iam.v1.IAM/RegisterSubject:
    post:
      summary: Registers a subject with IAM, if the supplied context is already used, an already exists error will be returned.
      operationId: IAM_RegisterSubject
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterSubjectResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterSubjectRequest'
      tags:
        - IAM
  /iam.v1.IAM/RemoveKey:
    post:
      summary: Remove a public key pair from a subject. Tokens signed by the corresponding private key will no longer be valid.
      operationId: IAM_RemoveKey
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RemoveKeyRequest'
      tags:
        - IAM
  /iam.v1.IAM/RemoveMultiUserRestriction:
    post:
      summary: RemoveMultiUserRestriction removes the specific restriction from the specified users
      operationId: IAM_RemoveMultiUserRestriction
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RemoveMultiUserRestrictionRequest'
      tags:
        - IAM
  /iam.v1.IAM/SearchSubject:
    post:
      summary: Will search across a specified context. Cross context searching is not supported.
      operationId: IAM_SearchSubject
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1SearchSubjectResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SearchSubjectRequest'
      tags:
        - IAM
  /iam.v1.IAM/SendEmailVerification:
    post:
      summary: Send an email with a token on it to a user to verify their email
      operationId: IAM_SendEmailVerification
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SendEmailVerificationRequest'
      tags:
        - IAM
  /iam.v1.IAM/UpdateUser:
    post:
      summary: UpdateUser updates fields on the User
      operationId: IAM_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateUserRequest'
      tags:
        - IAM
  /iam.v1.IAM/VerifyEmail:
    post:
      summary: Verify a user's email address
      operationId: IAM_VerifyEmail
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1VerifyEmailRequest'
      tags:
        - IAM
  /iam.v1.UserIAM/GetImpersonationToken:
    post:
      summary: GetImpersonationToken produces a new token from the direct caller token for the requested impersonation if allowed
      operationId: UserIAM_GetImpersonationToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetImpersonationTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetImpersonationTokenRequest'
      tags:
        - UserIAM
  /iam.v1.UserIAM/GetSessionToken:
    post:
      summary: Asks IAM to exchange the caller-provided token for a IAM session token.
      operationId: UserIAM_GetSessionToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSessionTokenRequest'
      tags:
        - UserIAM
  /iam.v1.UserIAM/GetSubjectBySession:
    post:
      summary: Gets the subject from the given session
      operationId: UserIAM_GetSubjectBySession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetSubjectResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetSubjectBySessionRequest'
      tags:
        - UserIAM
  /iam.v1.UserIAM/GetToken:
    post:
      summary: Returns a short lived token that can be used to issue requests to other vendasta APIs.
      operationId: UserIAM_GetToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetTokenRequest'
      tags:
        - UserIAM
  /iam.v1.UserIAM/ListPersonas:
    post:
      summary: List Personas given a session id will return a paged set of results of all the available personas across all contexts for a specific Subject.
      operationId: UserIAM_ListPersonas
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListPersonasResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListPersonasRequest'
      tags:
        - UserIAM
  /iam.v1.UserIAM/ResetPasswordWithToken:
    post:
      summary: Reset a password using the one-time-use, time-sensitive JWT obtained via IAM.GetResetPasswordToken
      operationId: UserIAM_ResetPasswordWithToken
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ResetPasswordWithTokenRequest'
      tags:
        - UserIAM
definitions:
  GetMultiUsersResponseUserContainer:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1User'
  ListSecurityLogsRequestFilters:
    type: object
    properties:
      actionId:
        type: string
        title: Filter the list by an actionID
    title: Filters which can be applied to this list request
  UpdateUserRequestOperation:
    type: object
    properties:
      firstName:
        type: string
      greetingName:
        type: string
      lastName:
        type: string
      languageCode:
        type: string
  attributesAttribute:
    type: object
    properties:
      intAttribute:
        type: string
        format: int64
        description: Represents a int64 attribute.
      doubleAttribute:
        type: number
        format: double
        description: Represents a double attribute.
      stringAttribute:
        type: string
        description: Represents a string attribute.
      boolAttribute:
        type: boolean
        description: Represents a boolean attribute.
      structAttribute:
        $ref: '#/definitions/attributesStructAttribute'
        description: Represents a structured `Attribute`.
      listAttribute:
        $ref: '#/definitions/attributesListAttribute'
        description: Represents a repeated `Attribute`.
      timestampAttribute:
        type: string
        format: date-time
        description: Represents a timestamp attribute.
      geopointAttribute:
        $ref: '#/definitions/attributesGeoPointAttribute'
        description: Represents a geopoint attribute.
  attributesGeoPointAttribute:
    type: object
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  attributesListAttribute:
    type: object
    properties:
      attributes:
        type: array
        items:
          type: object
          $ref: '#/definitions/attributesAttribute'
  attributesStructAttribute:
    type: object
    properties:
      attributes:
        type: object
        additionalProperties:
          $ref: '#/definitions/attributesAttribute'
  policiesBooleanOperator:
    type: string
    enum:
      - AND
      - OR
      - NOT
    default: AND
    title: Boolean operator supports the basic boolean expressions AND, OR, NOT
  policiesForOperator:
    type: string
    enum:
      - ANY
      - ALL
    default: ANY
    description: |-
      - ANY: ANY struct inside of the list must match the PolicyNode to be true
       - ALL: ALL structs inside of the list must match the PolicyNode to be true
    title: ForOperator defines how the SubjectResourceFor clauses will evaluate the list of StructAttributes
  policiesIfClause:
    type: object
    properties:
      resourceAttributeName:
        type: string
        title: Name of the resource's attribute to compare against
      resourceAttributeValue:
        $ref: '#/definitions/attributesAttribute'
        title: Value to compare against the resource's attribute
      thenPolicy:
        $ref: '#/definitions/policiesPolicyNode'
        title: If the check matches, "then_policy" will be evaluated
      elsePolicy:
        $ref: '#/definitions/policiesPolicyNode'
        title: If the check fails, "else_policy" will be evaluated
    description: |-
      IfClause will check whether the given attribute value intersects with the resource's attribute at the given name.
      If the provided value is present on the resource, "then_policy" will be evaluated, otherwise "else_policy" will be evaluated.
  policiesOperator:
    type: object
    properties:
      operator:
        $ref: '#/definitions/policiesBooleanOperator'
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/policiesPolicyNode'
    description: |-
      Operator consists of a boolean conjunction and one to two children nodes.
      NOT is the only conjunction that supports a single child node, whereas AND and OR both require exactly two child nodes.
  policiesPolicyNode:
    type: object
    properties:
      subjectResourceIntersection:
        $ref: '#/definitions/policiesSubjectResourceIntersectionClause'
        description: Validates that the intersection between subjects and resources is not an empty set.
      operator:
        $ref: '#/definitions/policiesOperator'
        title: Allows conjuctions between many policy nodes (AND, OR, and NOT)
      subjectValueIntersection:
        $ref: '#/definitions/policiesSubjectValueIntersectionClause'
        title: Validates that the subject has a specific value
      subjectMissingValue:
        $ref: '#/definitions/policiesSubjectMissingValueClause'
        description: Validates that the subject has a specific missing value.
      subjectResourceSubset:
        $ref: '#/definitions/policiesSubjectResourceSubsetClause'
        description: Validates that the resources attributes is a subset of the subjects attributes.
      subjectResourceFor:
        $ref: '#/definitions/policiesSubjectResourceForClause'
        description: Iterates over a list of StructAttributes and validates the entries match the policy described.
      ifClause:
        $ref: '#/definitions/policiesIfClause'
        title: Checks conditional, branches into different paths depending on the result
    description: |-
      A PolicyNode can either be a Boolean operator over one or more child PolicyNodes, or it can be an SubjectResourceIntersectionClause.
      A policy tree might look like this where C1, C2, C3 are SubjectResourceIntersectionClauses:
               AND
              /   \
             C1   OR
                 /  \
                C2  C3
      This means that the expression would be evaluated as C1 && (C2 || C3)
      Arbitrary nesting is valid.
  policiesSubjectMissingValueClause:
    type: object
    properties:
      attributeName:
        type: string
    title: |-
      SubjectMissingValueClause is true if the subject attribute keyed by attribute_name is either missing or has no values.
      eg: with attribute_name = "market_id", then a subject with "market_id" = [] is TRUE, a subject with "market_id" = ["something"] is FALSE,
      and if the subject simply doesn't have an attribute called "market_id" then this clause is TRUE
  policiesSubjectResourceForClause:
    type: object
    properties:
      attributeName:
        type: string
      operator:
        $ref: '#/definitions/policiesForOperator'
      rules:
        $ref: '#/definitions/policiesPolicyNode'
    description: |-
      SubjectResourceForClause will loop through a list of StructAttributes and return true if any or all match the PolicyNode defined.
      The Subject MUST have a ListAttribute that contains StructAttributes at the attribute_name key for this to be evaluated.
  policiesSubjectResourceIntersectionClause:
    type: object
    properties:
      attributeName:
        type: string
      resourceAttributeName:
        type: string
    description: |-
      SubjectResourceIntersectionClause is true if the set of values keyed by attribute_name on the resource has a non-empty
      intersection with the set of values keyed by resource_attribute_name (or optionally attribute_name if
      resource_attribute_name is not provided) on the subject. eg: with attribute_name = "account_group_id" then the subject
      MUST have an attribute named "account_group_id" that contains any individual value of the resource's
      "account_group_id" attribute for this clause to be considered TRUE.
  policiesSubjectResourceSubsetClause:
    type: object
    properties:
      attributeName:
        type: string
      resourceAttributeName:
        type: string
    description: SubjectResourceSubsetClause is true if the set of values keyed by attribute_name on the resource is a subset of the set of values keyed by attribute_name on the subject.
  policiesSubjectValueIntersectionClause:
    type: object
    properties:
      attributeName:
        type: string
        title: Name of the attribute to compare against, use periods to denote inner struct attribute names
      attributeValue:
        type: string
        title: 'Deprecated: use structured_attribute_value instead'
      structuredAttributeValue:
        $ref: '#/definitions/attributesAttribute'
        title: Attribute value to compare against, must be a non struct attribute
    description: |-
      SubjectValueIntersectionClause describes how an attribute's value on the subject must contain the arbitrary value specified by attribute_value.
      eg: with attribute_name = "subject_type" and attribute_value = "partner", then the subject MUST have an attribute named
      "subject_type" that contains the value "partner". Note that this is different from SubjectResourceIntersectionClause because we don't
      care about this attributes presence on the resource or its value, it is purely for enforcing constraints on the subject itself.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1AccessResourceRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      subjectId:
        type: string
      email:
        type: string
      userId:
        type: string
        title: A user ID will identify a unique namespaced email and it's personas
      session:
        type: string
        title: A session token (aka an IAM token)
      ownerId:
        type: string
        title: owner_id is the app_id of the ResourceOwner that owns the resource_id
      resourceId:
        type: string
        title: resource_id is the resource type that the subject wants to access
      resourceEntityIdentifier:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1ValueList'
        title: |-
          deprecated: Use resource_entity_identifiers
          resource_entity_identifier contains the information necessary to identify a specific resource of the type specified by resource_id
      accessScope:
        type: array
        items:
          $ref: '#/definitions/v1AccessScope'
        description: |-
          access_scope represents the reasons that the user wants to access the resource.
          DEPRECATED: use the 'actions' field instead.

          READ -> "READ"
          WRITE -> "WRITE"
          DELETE -> "DELETE"
          LIST -> "LIST"
      actions:
        type: array
        items:
          type: string
        description: actions represents the action that the user wants to perform on the resource.
      resourceEntityIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ResourceIdentifier'
        title: resource_entity_identifiers contains the information necessary to identify a set of resources of the type specified by resource_id
      resourceAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        description: |-
          resource_attributes contains the resource attributes to use during policy evaluation.
          Only works for registered resources without a resource_owner_service_url specified.
    title: AccessResourceRequest asks IAM whether a subject has access to a resource
  v1AccessScope:
    type: string
    enum:
      - READ
      - WRITE
      - DELETE
      - LIST
    default: READ
    description: |-
      AccessScope represents the spectrum of intents that a resource may be accessed with. Different intents may entail the evaluation
      of different policies, as policies are associated not only to resources, but to specific AccessScope within the scope of that resource.

      DEPRECATED: use "actions" instead of "operations"
  v1AddKeyRequest:
    type: object
    properties:
      email:
        type: string
        description: |-
          Deprecated: use user_identifier instead
          The email of the subject to add a key for.
      context:
        $ref: '#/definitions/v1Context'
        title: 'Deprecated: use user_identifier instead'
      algorithmType:
        $ref: '#/definitions/v1AlgorithmType'
        title: The algorithm to use to generate the key
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        description: The identifier for the user to create a key for.
    title: Request message from IAM.AddKey
  v1AddKeyResponse:
    type: object
    properties:
      privateKey:
        type: string
        description: The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again.
      keyId:
        type: string
        description: The identifier of the matching public key.
    title: Response message from IAM.AddKey
  v1AddMultiUserRestrictionRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UserIdentifier'
        title: The list of users to add the restriction to
      restrictionType:
        $ref: '#/definitions/v1RestrictionType'
        title: The restriction type to add
  v1AlgorithmType:
    type: string
    enum:
      - ALGORITHM_TYPE_ES256
      - ALGORITHM_TYPE_RS256
    default: ALGORITHM_TYPE_ES256
    title: Supported Algorithm Types for Persona Public/Private Keys
  v1AuthenticateSubjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      email:
        type: string
      password:
        type: string
    title: Request message for IAM.AuthenticateSubject
  v1ChangeSubjectEmailRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      subjectId:
        type: string
      newEmail:
        type: string
    title: Request message for IAM.ChangeSubjectEmail
  v1Context:
    type: object
    properties:
      namespaced:
        $ref: '#/definitions/v1NamespacedContext'
      typed:
        $ref: '#/definitions/v1TypedContext'
    description: |-
      Context scopes a request to a specific persona.  A persona can either be a typed or a typed/namespace unique pair.
      A typed context scopes a persona to a specific type, such as a partner user.
      A namespaced context scopes a persona to a specific type and a given namespace, such as an SMB that belongs to a
      specific partner.
  v1CreateExternalIDRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        description: The identifier for the user to create an external id for.
      typedExternalIdentifier:
        $ref: '#/definitions/v1TypedExternalIdentifier'
        description: The type and value of external ID to create.
  v1CreateSessionRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: |-
          Credentials contains a subject's credentials for getting a session or a Google id token.
          IAM will use this data to create a new IAM session that will be returned in the response.
      oauthCredentials:
        $ref: '#/definitions/v1OAuthCredentials'
      subjectCredentials:
        $ref: '#/definitions/v1SubjectCredentials'
    title: Request message for IAM.CreateSession
  v1CreateSessionResponse:
    type: object
    properties:
      session:
        type: string
        title: A session token (aka an IAM identity token)
    title: Response for IAM.CreateSession
  v1CreateTemporarySubjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: The namespace and type of the session that is being created.
      subject:
        type: string
        description: The session subject, this should be some identifier of the subject, for example an Account Group ID.
      attributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: These attributes will be added to the session and will be used during policy evaluation
    title: Request for iam.v1.IAM/CreateTemporarySubject
  v1CreateTemporarySubjectResponse:
    type: object
    properties:
      session:
        type: string
        title: A session token (aka an IAM identity token) which contains a subject's attributes instead of referring to a user for them
    title: Response for iam.v1.IAM/CreateTemporarySubject
  v1DeleteSubjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: Context is required which indicates the specific persona of a given subject.
      subjectId:
        type: string
        description: The subject id that will be deleted.
    title: Request message for IAM.DeleteSubject
  v1DeleteUserRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        title: Identifier of the user to update
    title: Request for deleting a user
  v1FieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
  v1GetImpersonationTokenRequest:
    type: object
    properties:
      impersonatee:
        $ref: '#/definitions/v1UserIdentifier'
        title: user identifier of impersonatee (the user being impersonated)
      impersonator:
        $ref: '#/definitions/v1UserIdentifier'
        title: user identifier of impersonator
    title: Request message for IAM.GetImpersonationToken
  v1GetImpersonationTokenResponse:
    type: object
    properties:
      token:
        type: string
        title: A token with the impersonated user field set
    title: Response message for IAM.GetImpersonationToken
  v1GetMultiExternalIDRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UserIdentifier'
        title: The list of external ids to fetch
      externalIdType:
        type: string
        description: Which type of external ids to fetch.
  v1GetMultiExternalIDResponse:
    type: object
    properties:
      externalIds:
        type: array
        items:
          type: string
        description: The external ids.
  v1GetMultiUsersRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UserIdentifier'
  v1GetMultiUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/GetMultiUsersResponseUserContainer'
  v1GetResetPasswordTokenRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        title: 'Deprecated: pass a user identifier instead'
      email:
        type: string
        title: 'Deprecated: pass a user identifier instead'
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        title: The user to fetch a password reset token for
    title: Request for UserIAM.GetResetPasswordToken
  v1GetSessionTokenRequest:
    type: object
    properties:
      token:
        type: string
        description: |-
          token is a JWT provided by a subject registered with IAM. The token contains the context of which subject they want a session for.

          Example claims:
          {
               iss: my-app-id-or-pid
               aud: vendasta.com
               sub: my-subject@service-account.vendasta.com
               kid: my-public-key-id
               /* other claims like exp, iat, as normal */
          }
    title: Request message from IAM.GetSessionToken
  v1GetShortLivedTokenRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      email:
        type: string
    title: Request message for IAM.GetShortLivedToken
  v1GetSubjectBySessionRequest:
    type: object
    properties:
      session:
        type: string
        title: A session token (aka an IAM identity token)
      context:
        $ref: '#/definitions/v1Context'
    title: Request message for IAM.GetSubjectBySession
  v1GetSubjectContextRequest:
    type: object
    properties:
      subjectId:
        type: string
    title: Request message for IAM.GetSubjectContext
  v1GetSubjectContextResponse:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
    title: Response message for IAM.GetSubjectContext
  v1GetSubjectResponse:
    type: object
    properties:
      subject:
        $ref: '#/definitions/v1SubjectResult'
    title: Response message for IAM.GetSubjectBySession
  v1GetSubjectsByEmailRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      emails:
        type: array
        items:
          type: string
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
    title: Request message for IAM.GetSubjectsByEmail
  v1GetSubjectsRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
      subjectIds:
        type: array
        items:
          type: string
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
      identifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Identifier'
    title: Request message for IAM.GetSubjects
  v1GetSubjectsResponse:
    type: object
    properties:
      subjects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SubjectResult'
    title: Response message for IAM.GetSubjects and IAM.GetSubjectsByEmail
  v1GetTokenRequest:
    type: object
    title: Request message for IAM.GetTokenRequest
  v1GetTokenResponse:
    type: object
    properties:
      token:
        type: string
        description: token is a session token that has been signed by IAM. It can be used as a bearer token on subsequent calls to IAM.
    title: Response message for IAM.GetToken
  v1IAMListPersonasRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        title: user identifier for the subject
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
      type:
        type: string
        description: |-
          Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will
          allow retrieving Personas across all types.
      namespace:
        type: string
        description: |-
          namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will
          allow retrieving Personas across all namespaces. Typed Personas will always be included in list.
      alwaysIncludeSuperadmin:
        type: boolean
        title: |-
          If always_include_superadmin is true, then always return the partner persona associated to the the specified
          user_identifier if that user is a superadmin.
          This allows the inclusion of a superadmin partner persona on the list results even if the namespace doesn't match
    title: Request for iam.v1.IAM/ListPersonas
  v1Identifier:
    type: object
    properties:
      subjectId:
        type: string
        title: A subject id for a user's persona
      userId:
        type: string
        title: A user's user id
    title: Identifier is a way to identify a user
  v1ListPersonasByEmailRequest:
    type: object
    properties:
      email:
        type: string
        title: email identifier for the subject
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
      type:
        type: string
        description: |-
          Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will
          allow retrieving Personas across all types.
      namespace:
        type: string
        description: |-
          namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will
          allow retrieving Personas across all namespaces. Typed Personas will always be included in list.
    title: Request for iam.v1.IAM/ListPersonasByEmail
  v1ListPersonasRequest:
    type: object
    properties:
      session:
        type: string
        description: A session token (aka an IAM identity token). Required.
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
      type:
        type: string
        description: |-
          Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will
          allow retrieving Personas across all types.
      namespace:
        type: string
        description: |-
          namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will
          allow retrieving Personas across all namespaces. Typed Personas will always be included in list.
    title: Request message for IAM.ListPersonas
  v1ListPersonasResponse:
    type: object
    properties:
      personas:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Persona'
        title: A list of personas
      nextCursor:
        type: string
        description: |-
          A string indicating the starting position of the next set of results. The client should pass this in the
          the next request.
      hasMore:
        type: boolean
        description: A bool indicating if there are more results to be paged through.
    title: Response message for IAM.ListPersonas
  v1ListSecurityLogsRequest:
    type: object
    properties:
      userId:
        type: string
        title: UserID to list for
      filters:
        $ref: '#/definitions/ListSecurityLogsRequestFilters'
        title: Optionally apply filters
      pageSize:
        type: string
        format: int64
        title: Limit the number of results
      cursor:
        type: string
        title: Cursor to begin the list from
    title: Request for iam.v1.IAM/ListSecurityLogs
  v1ListSecurityLogsResponse:
    type: object
    properties:
      logs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SecurityLog'
        title: The list of logs
      nextCursor:
        type: string
        title: cursor to begin the list from
      hasMore:
        type: boolean
        title: Whether or not there are more logs
    title: Response for iam.v1.IAM/ListSecurityLogs
  v1ListUsersRequest:
    type: object
    properties:
      namespace:
        type: string
        description: |-
          Namespace of the users, if present, only scopes if present.
          The value of "" means users that exist outside of a namespace.
      email:
        type: string
        title: Email of the users, if present, scopes the list
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return. A page size of -1 returns all.
      userFilter:
        $ref: '#/definitions/v1UserFilter'
        title: Limit which users are included in the results
      sortOptions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UserSortOptions'
        title: ListUserSortField, defaults to created ascending if no sort options provided
  v1ListUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1User'
        title: A list of users
      nextCursor:
        type: string
        description: |-
          A string indicating the starting position of the next set of results. The client should pass this in the
          the next request.
      hasMore:
        type: boolean
        description: A bool indicating if there are more results to be paged through.
  v1MultiValueAttribute:
    type: object
    properties:
      key:
        type: string
      values:
        type: array
        items:
          type: string
    description: |-
      Represents a key-[]value pair used for representing the known attributes on a subject, as well as replace
      in IAM.MutateSubject.
  v1MutateAttributesRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: Context is required which indicates the specific persona of a given subject.
      subjectId:
        type: string
        description: The subject id to mutate.
      mutations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Mutation'
        description: A list of mutations that will be applied atomically.
    title: Request message for IAM.MutateAttributes
  v1Mutation:
    type: object
    properties:
      add:
        $ref: '#/definitions/v1SingleValueAttribute'
        description: |-
          Deprecated: use add_attributes instead
          Will add the value to the list of values at that key or if it doesnt exist will set the attribute
          to the given value.
      replace:
        $ref: '#/definitions/v1MultiValueAttribute'
        description: |-
          Deprecated: use replace_attributes instead
          Replace will delete the values at the given key and use the given list of values in its place.
      remove:
        $ref: '#/definitions/v1SingleValueAttribute'
        title: |-
          Deprecated: use remove_attributes instead
          Remove will delete the values at the given key
      dropKey:
        type: string
        title: Will drop the key specified. Use periods to drop inner keys (name.inner_name)
      replaceAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: Will set and replace the keys in the struct to the corresponding attributes
      addAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: Will add values to the corresponding attributes
      removeAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: Will remove values from the corresponding attributes
    description: Mutation mutates a subject in a MutateSubject request.
  v1NamespacedContext:
    type: object
    properties:
      namespace:
        type: string
      type:
        type: string
    description: Indicates a context that is scoped to a type/namespace pair.
  v1NamespacedEmail:
    type: object
    properties:
      namespace:
        type: string
      email:
        type: string
  v1NamespacedSession:
    type: object
    properties:
      namespace:
        type: string
        title: 'Deprecated: Ignored because a token already uniquely identifies a user'
      session:
        type: string
        title: A session token (aka an IAM identity token)
  v1OAuthCredentials:
    type: object
    properties:
      provider:
        type: string
        title: 'provider name, ie: "google"'
      idToken:
        type: string
      accessToken:
        type: string
    title: Credentials to be passed for an OAuth workflow
  v1OrderByDirection:
    type: string
    enum:
      - ASCENDING
      - DESCENDING
    default: ASCENDING
    title: Indicates the sort order for IAM.SearchSubject
  v1Persona:
    type: object
    properties:
      subject:
        $ref: '#/definitions/v1Subject'
      context:
        $ref: '#/definitions/v1Context'
    description: A Persona is a Subject and Context combination that provides the ability for cross context usage for a single subject.
  v1Policy:
    type: object
    properties:
      appId:
        type: string
        title: app_id is a unique identifier for the ResourceOwner. It must be unique across all IAM resource owners. (eg "VBC")
      resourceId:
        type: string
        description: The unique identifier for the resource this policy will be applied to.
      policyId:
        type: string
        description: The identifier for this policy. This need only be unique within the scope of the resource.
      policyName:
        type: string
        title: 'policy_name is the human readable name of the policy, often phrased as a question (eg: "Can user access account group?")'
      operations:
        type: array
        items:
          $ref: '#/definitions/v1AccessScope'
        description: |-
          Operations that a user may take on a resource.
          In particular, these will be the operations that this policy is associated with, so if this policy is associated
          with "read", and a user attempts to "read" this resource type, this policy would be evaluated.

          DEPRECATED: use 'actions' instead.

          READ -> "READ"
          WRITE -> "WRITE"
          DELETE -> "DELETE"
          LIST -> "LIST"
      actions:
        type: array
        items:
          type: string
        description: |-
          The actions for which the policy will be registered.
          The policy will run when an access check is run for ANY of its registered actions.
          This field is a replacement for the old "operations" field.
          Common actions include "READ", "WRITE", "DELETE" and "LIST", but you may
          use any action which makes sense for your resource, e.g. "PUBLISH", "REFRESH", etc.

          These values should be UPPER_SNAKE_CASE.
      policy:
        $ref: '#/definitions/policiesPolicyNode'
        description: policy is the boolean expression tree of boolean operators and attribute-based clauses that expresses the method by which the policy is evaluated.
    description: A policy is a binary boolean expression tree of attribute-based clauses that determines whether a subject is authorized to access a resource in a specific context.
  v1PublicKey:
    type: object
    properties:
      key:
        type: string
        title: key is the public key
      id:
        type: string
        description: Identifier for a public key. The `kid` claim in a JWT specifies this field, telling us which key to verify the JWT with.
      algorithmType:
        $ref: '#/definitions/v1AlgorithmType'
        title: The algorithm used for the key
    description: PublicKey is a key capable of validating a JWT that has been signed with a private key by someone else.
  v1Query:
    type: object
    properties:
      searchTerm:
        type: string
      attributeKeys:
        type: array
        items:
          type: string
    description: |-
      Query allows callers of IAM.SearchSubject to do full text search against the attributes of a scoped set of subjects.
      search_term will be queried against the supplied set of attribute keys.
  v1RegisterPolicyRequest:
    type: object
    properties:
      policy:
        $ref: '#/definitions/v1Policy'
    description: RegisterPolicyRequest registers a policy with a resource in IAM.
  v1RegisterResourceOwnerRequest:
    type: object
    properties:
      owner:
        $ref: '#/definitions/v1ResourceOwner'
        title: owner is the definition of a resource owner
    description: RegisterResourceOwnerRequest is issued by a prospective ResourceOwner to tell IAM they intend to expose resources that IAM will control access to.
  v1RegisterResourceRequest:
    type: object
    properties:
      appId:
        type: string
        title: app_id is a unique identifier for the ResourceOwner. It must be unique across all IAM resource owners. (eg "VBC")
      resourceId:
        type: string
        description: resource_id is an identifier for the resource that is unique within the resource owner's set of resources.
      resourceName:
        type: string
        title: resource_name is the human readable name of the resource (eg "Account Group")
      resourceOwnerServiceUrl:
        type: string
        title: resource_owner_service_url is the base url where a ResourceOwner grpc service is being served. IAM will use this service to ask about specific resources
      requiredResourceParams:
        type: array
        items:
          type: string
        description: |-
          required_resource_params is the set of identifiers that must be provided to ask the resource provider about a resource from
          IAM's point of view. These parameters will need to be supplied by any client asking about this resource.
          eg: ["pid", "account_group_id"] means that each time IAM asks for one of these resources, it will require the client to specify
          which "pid" and "account_group_id" they are asking about. IAM will proxy these parameters to the resource_owner_service_url.
      resourceOwnerAudience:
        type: string
        description: resource_owner_audience is a google id token audience. This is used by the resource owner to validate requests.
    description: RegisterResourceRequest is issued by a ResourceOwner to tell IAM that they would like to expose a resource that IAM will control access to.
  v1RegisterSubjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        title: Context of the persona
      email:
        type: string
        title: The email of the persona
      password:
        type: string
        title: The plain text password to set for the persona
      attributes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1MultiValueAttribute'
        description: |-
          Deprecated: use struct_attributes instead
          The set of attributes that belong to the subject persona.
      structAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        description: The set of struct attributes that belong to the subject persona.
    title: Request message for IAM.RegisterSubject
  v1RegisterSubjectResponse:
    type: object
    properties:
      subjectId:
        type: string
        description: The newly generated subject persona ID.
    title: Response message for IAM.RegisterSubject
  v1RemoveKeyRequest:
    type: object
    properties:
      email:
        type: string
        description: |-
          Deprecated: use user_identifier instead
          The email of the subject to remove a key from.
      context:
        $ref: '#/definitions/v1Context'
        title: 'Deprecated: use user_identifier instead'
      keyId:
        type: string
        description: The id of the public key to delete. Tokens signed by the corresponding private key will no longer be considered valid by IAM.
      userIdentifier:
        $ref: '#/definitions/v1UserIdentifier'
        description: The identifier for the user to remove a key from.
    title: Request message from IAM.RemoveKey
  v1RemoveMultiUserRestrictionRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UserIdentifier'
        title: The list of users to remove the restriction from
      restrictionType:
        $ref: '#/definitions/v1RestrictionType'
        title: The restriction type to remove
  v1ResetPasswordTokenResponse:
    type: object
    properties:
      token:
        type: string
        title: |-
          A one-time-use, time-sensitive JWT that can only be used to reset the password.
          The one-time-use condition will be enforced using the current password hash as part of the signing secret
    title: Response for UserIAM.GetResetPasswordToken
  v1ResetPasswordWithTokenRequest:
    type: object
    properties:
      token:
        type: string
        title: The token returned in ResetPasswordTokenResponse
      password:
        type: string
  v1ResourceIdentifier:
    type: object
    properties:
      identifiers:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1ValueList'
        description: identifiers is a set of parameters that a resource owner needs to identify a resource.
    description: ResourceIdentifier is a set of identifiers that a resource owner needs to identify a resource.
  v1ResourceOwner:
    type: object
    properties:
      appId:
        type: string
        title: app_id is a unique identifier for the registrant. It must be unique across all IAM resource owners. (eg "VBC")
      appName:
        type: string
        title: app_name is the human readable name of the application registering as a Resource Owner (eg "Vendasta Business Center")
    description: ResourceOwner is an application that owns one or many distinct resources.
  v1RestrictionType:
    type: string
    enum:
      - RESTRICTION_TYPE_UNSET
      - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN
      - RESTRICTION_TYPE_FROZEN
    default: RESTRICTION_TYPE_UNSET
    description: |-
      - RESTRICTION_TYPE_UNSET: Unset
       - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN: This restriction prevents user from logging in. Automatically cleared on password reset.
       - RESTRICTION_TYPE_FROZEN: This restriction prevents user from logging in or passing any access checks.
    title: The list of restriction types which can be applied to Users
  v1SearchSubjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: Context is required, which scopes the search to a specific set of personas.
      query:
        $ref: '#/definitions/v1Query'
        description: Query will be used as a full text search query with partial matching.
      filters:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SingleValueAttribute'
        description: Filters will be applied as a boolean filter with no partial matching.
      orderBy:
        type: string
        description: Indicates the attribute to order by.
      orderByDirection:
        $ref: '#/definitions/v1OrderByDirection'
        description: Indicates to sort by ascending or descending.
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
      fieldMask:
        $ref: '#/definitions/v1FieldMask'
        description: A field mask to apply to the results returned.
    title: Request message for IAM.SearchSubject
  v1SearchSubjectResponse:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1SubjectResult'
        description: A list of results that matched the given search criteria.
      nextCursor:
        type: string
        description: |-
          A string indicating the starting position of the next set of results. The client should pass this in the
          the next request.
      hasMore:
        type: boolean
        description: A bool indicating if there are more results to be paged through.
      totalResults:
        type: string
        format: int64
        description: An int64 indicating the total number of results returned by the query.
    title: Response message for IAM.SearchSubject
  v1SecurityLog:
    type: object
    properties:
      userId:
        type: string
        title: UserID that this log is for
      actionId:
        type: string
        title: The action which was taken
      logId:
        type: string
        title: A unique ID to identify this specific log
      description:
        type: string
        title: A description of what occurred
      created:
        type: string
        format: date-time
        title: The time this log was created
    title: SecurityLog represents a security log
  v1SendEmailVerificationRequest:
    type: object
    properties:
      userId:
        type: string
        title: ID of user to send email verification to
      recaptchaToken:
        type: string
        title: 'Optional ReCaptcha token for public email verification calls: https://developers.google.com/recaptcha/docs/verify'
  v1SingleValueAttribute:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    description: Represents a key-value pair for adding/removing values in mutate, as well as filtering results in IAM.SearchSubject.
  v1SortDirection:
    type: string
    enum:
      - SORT_DIRECTION_INVALID
      - SORT_DIRECTION_ASCENDING
      - SORT_DIRECTION_DESCENDING
    default: SORT_DIRECTION_INVALID
  v1Subject:
    type: object
    properties:
      subjectId:
        type: string
        description: A subject ID is a globally unique id across all personas and contexts.
      email:
        type: string
        description: Email of the subject.
      userId:
        type: string
        title: User ID that the subject belongs to
      partnerId:
        type: string
        description: The partner ID that the subject belongs to.
      attributes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1MultiValueAttribute'
        description: |-
          Deprecated: use struct_attributes instead
          The set of attributes that belongs to the subject persona.
      created:
        type: string
        format: date-time
        title: The time when the subject persona was created
      updated:
        type: string
        format: date-time
        description: The time when the subject peronsa was last updated.
      lastLogin:
        type: string
        format: date-time
        title: |-
          Deprecated: use last_login on the User message instead.
          The time when the subject peronsa last authenticated with IAM.AuthenticateSubject
      publicKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1PublicKey'
        description: Public keys that are able to validate tokens issued by the subject.
      structAttributes:
        $ref: '#/definitions/attributesStructAttribute'
        description: The set of struct attributes that belong to the subject persona.
    description: A subject represents a specific persona for a specified context.
  v1SubjectCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    title: A subjects email password combination
  v1SubjectResult:
    type: object
    properties:
      subject:
        $ref: '#/definitions/v1Subject'
    description: A SubjectResult wraps a subject since nil values are not allowed in a repeated set. Therefore subject can be nil.
  v1TypedContext:
    type: object
    properties:
      type:
        type: string
    description: Indicates a context that is scoped to a type.
  v1TypedExternalIdentifier:
    type: object
    properties:
      externalIdType:
        type: string
        description: The type of external id.
      externalId:
        type: string
        description: The external id.
    description: A user's external id. Identifies a user in a system outside of IAM.
  v1UpdateUserRequest:
    type: object
    properties:
      userId:
        type: string
        title: The ID of the user to update
      operations:
        type: array
        items:
          type: object
          $ref: '#/definitions/UpdateUserRequestOperation'
        title: A list of operations to perform on the user
    title: Request for updating a user
  v1User:
    type: object
    properties:
      userId:
        type: string
        description: A user ID is a globally unique id across all users.
      namespace:
        type: string
        description: Namespace of the user.
      email:
        type: string
        description: Email of the user.
      created:
        type: string
        format: date-time
        title: The time when the user was created
      updated:
        type: string
        format: date-time
        description: The time when the user was last updated.
      firstName:
        type: string
        title: The first name of the user
      greetingName:
        type: string
        title: The greeting name for the user
      lastName:
        type: string
        title: The last name of the user
      languageCode:
        type: string
        description: |-
          End-User's locale, represented as a BCP47 [RFC5646] language tag. This is an ISO 639-1 Alpha-2 [ISO639‑1]
          language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.
          For example, en-US or fr-CA.
      emailVerified:
        type: boolean
        title: Whether or not a user has verified their email
      roles:
        type: array
        items:
          type: string
        description: |-
          A list of the roles (a.k.a. subject types, a.k.a. personas) which the user has.
          Each role will be listed at most once.
          E.g. For a user which has both a salesperson persona and partner persona, this field
          will contain ['sales_person', 'partner']
          Order is not guaranteed.
          You can find the common role id's in the IAM sdk's `subject` package.
      lastLogin:
        type: string
        format: date-time
        description: The time when the user was last authenticated.
      publicKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1PublicKey'
        description: Public keys that are able to validate tokens issued by the user.
    title: A User is what uniquely occupies a namespace/email identity
  v1UserFilter:
    type: object
    properties:
      subjectTypes:
        type: array
        items:
          type: string
        title: Filter Users by `has any of the following subject types`
      searchTerms:
        type: array
        items:
          type: string
        title: Search terms filter (not scored), matches each search term if it exists within one of first name, last name, or email of the User
  v1UserIdentifier:
    type: object
    properties:
      userId:
        type: string
        title: A user ID
      namespacedEmail:
        $ref: '#/definitions/v1NamespacedEmail'
        title: 'Deprecated: Prefer to use the `user_id` or `token` fields to avoid handling email, or for `user_id` being a more stable reference to a user who may have changed their email'
      namespacedSession:
        $ref: '#/definitions/v1NamespacedSession'
        title: |-
          Deprecated: Use the `token` field instead when the user is to be inferred from the token (ex. the session from `namespaced_session`, a session token, can be used in the `token` field)
          Any namespace specified here is ignored because a token uniquely identifies a user
      token:
        type: string
        title: A token for a user signed by the platform (ie. access token or identity tokens from SSO; session tokens from IAM)
      typedExternalIdentifier:
        $ref: '#/definitions/v1TypedExternalIdentifier'
        description: Identify a user by an external identifier.
      subjectId:
        type: string
        title: Looking up a User via a Subject ID will be slower than other methods
    title: There are several ways to uniquely identify a user
  v1UserSortField:
    type: string
    enum:
      - USER_SORT_FIELD_INVALID
      - USER_SORT_FIELD_CREATED
      - USER_SORT_FIELD_FIRST_NAME
      - USER_SORT_FIELD_LAST_NAME
      - USER_SORT_FIELD_EMAIL
      - USER_SORT_FIELD_LAST_LOGIN
    default: USER_SORT_FIELD_INVALID
    description: The field to sort a result set on.
  v1UserSortOptions:
    type: object
    properties:
      direction:
        $ref: '#/definitions/v1SortDirection'
        title: A direction to sort results in
      field:
        $ref: '#/definitions/v1UserSortField'
        title: Field to sort on
    title: Options for controlling the order of query results
  v1ValueList:
    type: object
    properties:
      values:
        type: array
        items:
          type: string
    title: ValueList is a holder for multiple string values in order to be compatible with map declarations
  v1VerifyEmailRequest:
    type: object
    properties:
      token:
        type: string
        title: Email verifier token
