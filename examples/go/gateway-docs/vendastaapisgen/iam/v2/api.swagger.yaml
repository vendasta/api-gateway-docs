swagger: "2.0"
info:
  title: iam/v2/api.proto
  version: version not set
tags:
  - name: IAMAdmin
  - name: IAM
  - name: IAMSSO
consumes:
  - application/json
produces:
  - application/json
paths:
  /iam.v2.IAM/AccessResource:
    post:
      summary: Access RPCs
      operationId: IAM_AccessResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2AccessResourceRequest'
      tags:
        - IAM
  /iam.v2.IAM/AddClientKey:
    post:
      operationId: IAM_AddClientKey
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2AddClientKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2AddClientKeyRequest'
      tags:
        - IAM
  /iam.v2.IAM/AddMultiUserRestriction:
    post:
      summary: Restrict users
      operationId: IAM_AddMultiUserRestriction
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2AddMultiUserRestrictionRequest'
      tags:
        - IAM
  /iam.v2.IAM/ArchiveUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_ArchiveUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ArchiveAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/ChangePassword:
    post:
      summary: Use your current password to change your password
      operationId: IAM_ChangePassword
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ChangePasswordRequest'
      tags:
        - IAM
  /iam.v2.IAM/CreateExternalID:
    post:
      summary: Create External ID Mappings for users
      operationId: IAM_CreateExternalID
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2CreateExternalIDRequest'
      tags:
        - IAM
  /iam.v2.IAM/CreateUserAuxiliaryDataFieldSchema:
    post:
      summary: UserAuxiliaryFieldSchema service rpcs
      operationId: IAM_CreateUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/DeleteUser:
    post:
      operationId: IAM_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2DeleteUserRequest'
      tags:
        - IAM
  /iam.v2.IAM/ExchangeClientKeyAssertion:
    post:
      summary: |-
        Credential exchange RPCs
        Exchanges a claim signed using a client private key for an IAM user token.
      operationId: IAM_ExchangeClientKeyAssertion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2ExchangeClientKeyAssertionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ExchangeClientKeyAssertionRequest'
      tags:
        - IAM
  /iam.v2.IAM/GetMultiExternalID:
    post:
      summary: Get External ID mappings for users
      operationId: IAM_GetMultiExternalID
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2GetMultiExternalIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2GetMultiExternalIDRequest'
      tags:
        - IAM
  /iam.v2.IAM/GetMultiUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_GetMultiUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetMultiAuxiliaryDataFieldSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetMultiAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/GetMultiUsers:
    post:
      summary: User RPCs
      operationId: IAM_GetMultiUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2GetMultiUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2GetMultiUsersRequest'
      tags:
        - IAM
  /iam.v2.IAM/GetUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_GetUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetAuxiliaryDataFieldSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/ListSecurityLogs:
    post:
      operationId: IAM_ListSecurityLogs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2ListSecurityLogsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ListSecurityLogsRequest'
      tags:
        - IAM
  /iam.v2.IAM/ListUserAuxiliaryData:
    post:
      summary: ListUserAuxiliaryData auxiliary_data_object_id in the AuxiliaryDataObjectID refers to the user_id
      operationId: IAM_ListUserAuxiliaryData
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListAuxiliaryDataResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListAuxiliaryDataRequest'
      tags:
        - IAM
  /iam.v2.IAM/ListUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_ListUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListAuxiliaryDataFieldSchemaResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/ListUsers:
    post:
      operationId: IAM_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2ListUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ListUsersRequest'
      tags:
        - IAM
  /iam.v2.IAM/RemoveClientKey:
    post:
      operationId: IAM_RemoveClientKey
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RemoveClientKeyRequest'
      tags:
        - IAM
  /iam.v2.IAM/RemoveMultiUserRestriction:
    post:
      summary: Unrestrict users
      operationId: IAM_RemoveMultiUserRestriction
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RemoveMultiUserRestrictionRequest'
      tags:
        - IAM
  /iam.v2.IAM/ResetPassword:
    post:
      operationId: IAM_ResetPassword
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ResetPasswordRequest'
      tags:
        - IAM
  /iam.v2.IAM/SendEmailVerification:
    post:
      summary: Send an email verification Email to the user
      operationId: IAM_SendEmailVerification
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2SendEmailVerificationRequest'
      tags:
        - IAM
  /iam.v2.IAM/SendOneTimePasswordEmail:
    post:
      summary: Send an email for the given template and template data
      operationId: IAM_SendOneTimePasswordEmail
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2SendOneTimePasswordEmailRequest'
      tags:
        - IAM
  /iam.v2.IAM/UnarchiveUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_UnarchiveUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UnarchiveAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/UpdateUser:
    post:
      operationId: IAM_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2UpdateUserRequest'
      tags:
        - IAM
  /iam.v2.IAM/UpdateUserAuxiliaryDataFieldSchema:
    post:
      operationId: IAM_UpdateUserAuxiliaryDataFieldSchema
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateAuxiliaryDataFieldSchemaRequest'
      tags:
        - IAM
  /iam.v2.IAM/UpsertExternalID:
    post:
      summary: Update or insert user's external identifier
      operationId: IAM_UpsertExternalID
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2UpsertExternalIDRequest'
      tags:
        - IAM
  /iam.v2.IAM/UpsertUserAuxiliaryData:
    post:
      summary: UpsertUserAuxiliaryData auxiliary_data_object_id in the AuxiliaryDataObjectID refers to the user_id
      operationId: IAM_UpsertUserAuxiliaryData
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpsertAuxiliaryDataRequest'
      tags:
        - IAM
  /iam.v2.IAM/VerifyEmail:
    post:
      summary: Given a token, marks a user's email as verified.
      operationId: IAM_VerifyEmail
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2VerifyEmailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2VerifyEmailRequest'
      tags:
        - IAM
  /iam.v2.IAMAdmin/AccessResourceWithExplanation:
    post:
      summary: Determines if a resource can be accessed & returns explanation in event of access being denied.
      operationId: IAMAdmin_AccessResourceWithExplanation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2AccessResourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2AccessResourceRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/AddUserRole:
    post:
      summary: Add a user role with attributes, failing if the role already exists on the user.
      operationId: IAMAdmin_AddUserRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2AddUserRoleRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/CreateSession:
    post:
      summary: Backend Session Creation
      operationId: IAMAdmin_CreateSession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2CreateSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2CreateSessionRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/CreateUser:
    post:
      summary: User Management
      operationId: IAMAdmin_CreateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2CreateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2CreateUserRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/DeletePolicy:
    post:
      operationId: IAMAdmin_DeletePolicy
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2DeletePolicyRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/DeleteResourceAndPolicies:
    post:
      summary: Delete resource and all the policies associated with the given app ID and resource ID
      operationId: IAMAdmin_DeleteResourceAndPolicies
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2DeleteResourceAndPoliciesRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/GetResetPasswordToken:
    post:
      operationId: IAMAdmin_GetResetPasswordToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2GetResetPasswordTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2GetResetPasswordTokenRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/ListResources:
    post:
      operationId: IAMAdmin_ListResources
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2ListResourcesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ListResourcesRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/ListUserRolesMetadata:
    post:
      summary: List all role types
      operationId: IAMAdmin_ListUserRolesMetadata
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2ListUserRolesMetadataResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ListUserRolesMetadataRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/RegisterPolicy:
    post:
      summary: Policy Admin
      operationId: IAMAdmin_RegisterPolicy
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RegisterPolicyRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/RegisterResource:
    post:
      operationId: IAMAdmin_RegisterResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RegisterResourceRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/RegisterResourceOwner:
    post:
      summary: Resource Admin
      operationId: IAMAdmin_RegisterResourceOwner
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RegisterResourceOwnerRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/RegisterUserRoleMetadata:
    post:
      summary: |-
        Role Management
        RegisterUserRoleMetadata creates a new role "type"
      operationId: IAMAdmin_RegisterUserRoleMetadata
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RegisterUserRoleMetadataRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/RemoveUserRole:
    post:
      summary: Remove a user role.
      operationId: IAMAdmin_RemoveUserRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2RemoveUserRoleRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/ReplaceResource:
    post:
      operationId: IAMAdmin_ReplaceResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2ReplaceResourceRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/SearchUsers:
    post:
      operationId: IAMAdmin_SearchUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2SearchUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2SearchUsersRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/UpdateUserRole:
    post:
      summary: Update the attributes of an existing user role, failing if the role doesn't exist on the user.
      operationId: IAMAdmin_UpdateUserRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2UpdateUserRoleRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMAdmin/UpsertPartnerLimits:
    post:
      summary: Partner Limits
      operationId: IAMAdmin_UpsertPartnerLimits
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2UpsertPartnerLimitsRequest'
      tags:
        - IAMAdmin
  /iam.v2.IAMSSO/GetTokenForUser:
    post:
      summary: Get a token for the specified user.
      operationId: IAMSSO_GetTokenForUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2GetTokenForUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2GetTokenForUserRequest'
      tags:
        - IAMSSO
definitions:
  UpdateUserRequestPhoneNumbers:
    type: object
    properties:
      phoneNumbers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2PhoneNumber'
  attributesAttribute:
    type: object
    properties:
      intAttribute:
        type: string
        format: int64
        description: Represents a int64 attribute.
      doubleAttribute:
        type: number
        format: double
        description: Represents a double attribute.
      stringAttribute:
        type: string
        description: Represents a string attribute.
      boolAttribute:
        type: boolean
        description: Represents a boolean attribute.
      structAttribute:
        $ref: '#/definitions/attributesStructAttribute'
        description: Represents a structured `Attribute`.
      listAttribute:
        $ref: '#/definitions/attributesListAttribute'
        description: Represents a repeated `Attribute`.
      timestampAttribute:
        type: string
        format: date-time
        description: Represents a timestamp attribute.
      geopointAttribute:
        $ref: '#/definitions/attributesGeoPointAttribute'
        description: Represents a geopoint attribute.
  attributesGeoPointAttribute:
    type: object
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  attributesListAttribute:
    type: object
    properties:
      attributes:
        type: array
        items:
          type: object
          $ref: '#/definitions/attributesAttribute'
  attributesStructAttribute:
    type: object
    properties:
      attributes:
        type: object
        additionalProperties:
          $ref: '#/definitions/attributesAttribute'
  policiesBooleanOperator:
    type: string
    enum:
      - AND
      - OR
      - NOT
    default: AND
    title: Boolean operator supports the basic boolean expressions AND, OR, NOT
  policiesForOperator:
    type: string
    enum:
      - ANY
      - ALL
    default: ANY
    description: |-
      - ANY: ANY struct inside of the list must match the PolicyNode to be true
       - ALL: ALL structs inside of the list must match the PolicyNode to be true
    title: ForOperator defines how the SubjectResourceFor clauses will evaluate the list of StructAttributes
  policiesIfClause:
    type: object
    properties:
      resourceAttributeName:
        type: string
        title: Name of the resource's attribute to compare against
      resourceAttributeValue:
        $ref: '#/definitions/attributesAttribute'
        title: Value to compare against the resource's attribute
      thenPolicy:
        $ref: '#/definitions/policiesPolicyNode'
        title: If the check matches, "then_policy" will be evaluated
      elsePolicy:
        $ref: '#/definitions/policiesPolicyNode'
        title: If the check fails, "else_policy" will be evaluated
    description: |-
      IfClause will check whether the given attribute value intersects with the resource's attribute at the given name.
      If the provided value is present on the resource, "then_policy" will be evaluated, otherwise "else_policy" will be evaluated.
  policiesOperator:
    type: object
    properties:
      operator:
        $ref: '#/definitions/policiesBooleanOperator'
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/policiesPolicyNode'
    description: |-
      Operator consists of a boolean conjunction and one to two children nodes.
      NOT is the only conjunction that supports a single child node, whereas AND and OR both require exactly two child nodes.
  policiesPolicyNode:
    type: object
    properties:
      subjectResourceIntersection:
        $ref: '#/definitions/policiesSubjectResourceIntersectionClause'
        description: Validates that the intersection between subjects and resources is not an empty set.
      operator:
        $ref: '#/definitions/policiesOperator'
        title: Allows conjuctions between many policy nodes (AND, OR, and NOT)
      subjectValueIntersection:
        $ref: '#/definitions/policiesSubjectValueIntersectionClause'
        title: Validates that the subject has a specific value
      subjectMissingValue:
        $ref: '#/definitions/policiesSubjectMissingValueClause'
        description: Validates that the subject has a specific missing value.
      subjectResourceSubset:
        $ref: '#/definitions/policiesSubjectResourceSubsetClause'
        description: Validates that the resources attributes is a subset of the subjects attributes.
      subjectResourceFor:
        $ref: '#/definitions/policiesSubjectResourceForClause'
        description: Iterates over a list of StructAttributes and validates the entries match the policy described.
      ifClause:
        $ref: '#/definitions/policiesIfClause'
        title: Checks conditional, branches into different paths depending on the result
    description: |-
      A PolicyNode can either be a Boolean operator over one or more child PolicyNodes, or it can be an SubjectResourceIntersectionClause.
      A policy tree might look like this where C1, C2, C3 are SubjectResourceIntersectionClauses:
               AND
              /   \
             C1   OR
                 /  \
                C2  C3
      This means that the expression would be evaluated as C1 && (C2 || C3)
      Arbitrary nesting is valid.
  policiesSubjectMissingValueClause:
    type: object
    properties:
      attributeName:
        type: string
    title: |-
      SubjectMissingValueClause is true if the subject attribute keyed by attribute_name is either missing or has no values.
      eg: with attribute_name = "market_id", then a subject with "market_id" = [] is TRUE, a subject with "market_id" = ["something"] is FALSE,
      and if the subject simply doesn't have an attribute called "market_id" then this clause is TRUE
  policiesSubjectResourceForClause:
    type: object
    properties:
      attributeName:
        type: string
      operator:
        $ref: '#/definitions/policiesForOperator'
      rules:
        $ref: '#/definitions/policiesPolicyNode'
    description: |-
      SubjectResourceForClause will loop through a list of StructAttributes and return true if any or all match the PolicyNode defined.
      The Subject MUST have a ListAttribute that contains StructAttributes at the attribute_name key for this to be evaluated.
  policiesSubjectResourceIntersectionClause:
    type: object
    properties:
      attributeName:
        type: string
      resourceAttributeName:
        type: string
    description: |-
      SubjectResourceIntersectionClause is true if the set of values keyed by attribute_name on the resource has a non-empty
      intersection with the set of values keyed by resource_attribute_name (or optionally attribute_name if
      resource_attribute_name is not provided) on the subject. eg: with attribute_name = "account_group_id" then the subject
      MUST have an attribute named "account_group_id" that contains any individual value of the resource's
      "account_group_id" attribute for this clause to be considered TRUE.
  policiesSubjectResourceSubsetClause:
    type: object
    properties:
      attributeName:
        type: string
      resourceAttributeName:
        type: string
    description: SubjectResourceSubsetClause is true if the set of values keyed by attribute_name on the resource is a subset of the set of values keyed by attribute_name on the subject.
  policiesSubjectValueIntersectionClause:
    type: object
    properties:
      attributeName:
        type: string
        title: Name of the attribute to compare against, use periods to denote inner struct attribute names
      attributeValue:
        type: string
        title: 'Deprecated: use structured_attribute_value instead'
      structuredAttributeValue:
        $ref: '#/definitions/attributesAttribute'
        title: Attribute value to compare against, must be a non struct attribute
    description: |-
      SubjectValueIntersectionClause describes how an attribute's value on the subject must contain the arbitrary value specified by attribute_value.
      eg: with attribute_name = "subject_type" and attribute_value = "partner", then the subject MUST have an attribute named
      "subject_type" that contains the value "partner". Note that this is different from SubjectResourceIntersectionClause because we don't
      care about this attributes presence on the resource or its value, it is purely for enforcing constraints on the subject itself.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1ArchiveAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      identifier:
        $ref: '#/definitions/v1FieldSchemaIdentifier'
  v1AuxiliaryDataFieldSchema:
    type: object
    properties:
      partnerId:
        type: string
      fieldId:
        type: string
      fieldType:
        $ref: '#/definitions/v1AuxiliaryDataFieldType'
      fieldName:
        type: string
      fieldDescription:
        type: string
      created:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
      dropdownOptions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1DropdownOption'
      currencyCode:
        type: string
        title: currency code according to ISO-4217, e.g. 'USD', 'CAD', 'BRL', etc
      archived:
        type: string
        format: date-time
      externalId:
        type: string
  v1AuxiliaryDataFieldType:
    type: string
    enum:
      - AUXILIARY_DATA_FIELD_TYPE_INVALID
      - AUXILIARY_DATA_FIELD_TYPE_STRING
      - AUXILIARY_DATA_FIELD_TYPE_INTEGER
      - AUXILIARY_DATA_FIELD_TYPE_DATE
      - AUXILIARY_DATA_FIELD_TYPE_DROPDOWN
      - AUXILIARY_DATA_FIELD_TYPE_CURRENCY
    default: AUXILIARY_DATA_FIELD_TYPE_INVALID
  v1AuxiliaryDataObjectID:
    type: object
    properties:
      partnerId:
        type: string
      objectId:
        type: string
  v1CreateAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      fieldSchema:
        $ref: '#/definitions/v1AuxiliaryDataFieldSchema'
  v1DropdownOption:
    type: object
    properties:
      label:
        type: string
      value:
        type: string
  v1FieldDataUpsertOperation:
    type: object
    properties:
      fieldDataId:
        type: string
      externalId:
        type: string
      integer:
        type: string
        format: int64
      string:
        type: string
      date:
        type: string
        format: date-time
      dropdownValue:
        type: string
      currencyValue:
        type: string
        format: int64
      deleteValue:
        type: boolean
        title: deletes the field's current value from the object
  v1FieldSchemaIdentifier:
    type: object
    properties:
      fieldId:
        type: string
      externalId:
        type: string
      partnerId:
        type: string
  v1GetAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      identifier:
        $ref: '#/definitions/v1FieldSchemaIdentifier'
  v1GetAuxiliaryDataFieldSchemaResponse:
    type: object
    properties:
      fieldSchema:
        $ref: '#/definitions/v1AuxiliaryDataFieldSchema'
  v1GetMultiAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      identifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1FieldSchemaIdentifier'
  v1GetMultiAuxiliaryDataFieldSchemaResponse:
    type: object
    properties:
      fieldSchemas:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1AuxiliaryDataFieldSchema'
  v1ListAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      partnerId:
        type: string
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
      filters:
        $ref: '#/definitions/v1ListAuxiliaryDataFieldSchemaRequestFilters'
  v1ListAuxiliaryDataFieldSchemaRequestFilters:
    type: object
    properties:
      onlyArchived:
        type: boolean
  v1ListAuxiliaryDataFieldSchemaResponse:
    type: object
    properties:
      fieldSchemas:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1AuxiliaryDataFieldSchema'
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1ListAuxiliaryDataRequest:
    type: object
    properties:
      auxiliaryDataObjectId:
        $ref: '#/definitions/v1AuxiliaryDataObjectID'
      pagingOptions:
        $ref: '#/definitions/vendastatypesPagedRequestOptions'
  v1ListAuxiliaryDataResponse:
    type: object
    properties:
      jsonSchema:
        type: string
      jsonData:
        type: string
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
  v1UnarchiveAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      identifier:
        $ref: '#/definitions/v1FieldSchemaIdentifier'
  v1UpdateAuxiliaryDataFieldSchemaRequest:
    type: object
    properties:
      fieldSchema:
        $ref: '#/definitions/v1AuxiliaryDataFieldSchema'
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        description: Supported updates for name, and description only at this time.
  v1UpsertAuxiliaryDataRequest:
    type: object
    properties:
      auxiliaryDataObjectId:
        $ref: '#/definitions/v1AuxiliaryDataObjectID'
      fieldDataUpsertOperations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1FieldDataUpsertOperation'
  v2AccessResourceRequest:
    type: object
    properties:
      token:
        type: string
        description: An IAM token. Both identity tokens and access tokens are permitted.
      userId:
        type: string
        description: ID of a user to check access against.
      userAndImpersonateeId:
        $ref: '#/definitions/v2UserAndImpersonateeId'
        description: ID of a user and the impersonatee to check access against.
      ownerId:
        type: string
        title: The owner of the resource
      resourceId:
        type: string
      actions:
        type: array
        items:
          type: string
      resourceAttributes:
        type: object
        additionalProperties:
          $ref: '#/definitions/attributesStructAttribute'
        title: |-
          A map of resources, keys are caller specified.
          If ANY resources fail the access check, the call will result in
          a Permission Denied error with details in the error metadata about which
          resources failed, identified by the caller-specified keys
  v2AccessResourceResponse:
    type: object
    properties:
      explanation:
        type: string
      success:
        type: boolean
      aiExplanation:
        type: string
  v2AddClientKeyRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        description: The user to add a new client key for.
      algorithmType:
        $ref: '#/definitions/v2AlgorithmType'
        title: The type of key to add
  v2AddClientKeyResponse:
    type: object
    properties:
      privateKey:
        type: string
        description: The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again.
      clientKeyId:
        type: string
        description: The identifier of the matching public key.
  v2AddMultiUserRestrictionRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserIdentifier'
        title: The list of users to add the restriction to
      restrictionType:
        $ref: '#/definitions/v2RestrictionType'
        title: The restriction type to add
  v2AddUserRoleRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to update
      roleId:
        type: string
        description: |-
          The type of role, e.g. "smb", "partner", etc.
          Your service must own a given role in order to add it to a user.
      attributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: |-
          Attributes associated with the role.
          These are used in conjunction with policies for Access Checks
  v2Address:
    type: object
    properties:
      address:
        type: string
        title: Street Address
      city:
        type: string
        title: Name of the city
      postalCode:
        type: string
        title: Postal code/zip
      country:
        type: string
        title: 'Country code: ISO code 3166 format (CA, US)'
      state:
        type: string
        title: 'State code: ISO code 3166-2 format (CA-SK, US-FL)'
      additionalAddress:
        type: string
        title: Additional address line
  v2AlgorithmType:
    type: string
    enum:
      - ALGORITHM_TYPE_ES256
      - ALGORITHM_TYPE_RS256
    default: ALGORITHM_TYPE_ES256
    title: Supported Algorithm Types for Persona Public/Private Keys
  v2CallbackResourceData:
    type: object
    properties:
      requiredResourceParameters:
        type: array
        items:
          type: string
      resourceOwnerServiceUrl:
        type: string
      resourceOwnerAudience:
        type: string
  v2ChangePasswordRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to attempt to change their password for
      currentPassword:
        type: string
        title: The current password the user has
      newPassword:
        type: string
        title: The desired new password
  v2CreateExternalIDRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        description: The identifier for the user to create an external id for.
      typedExternalIdentifier:
        $ref: '#/definitions/v2TypedExternalIdentifier'
        description: The type and value of external ID to create.
  v2CreateSessionRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Namespace to search for the user in
      oauthCredentials:
        $ref: '#/definitions/v2OAuthCredentials'
      passwordCredentials:
        $ref: '#/definitions/v2PasswordCredentials'
      oneTimePasswordCredentials:
        $ref: '#/definitions/v2OneTimePasswordCredentials'
      subjectTypes:
        type: array
        items:
          type: string
  v2CreateSessionResponse:
    type: object
    properties:
      session:
        type: string
        title: A session token (aka an IAM session)
  v2CreateUserRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v2User'
        title: |-
          User properties to include on the created user.
          UserID should be left blank as it will be generated by the server
          UserRoles should be left blank, add them with "AddUserRole"
      typedExternalIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2TypedExternalIdentifier'
        description: Optionally used to store the ids of the user in the system that triggered the create user request.
  v2CreateUserResponse:
    type: object
    properties:
      userId:
        type: string
  v2DeletePolicyRequest:
    type: object
    properties:
      appId:
        type: string
      resourceId:
        type: string
      policyId:
        type: string
  v2DeleteResourceAndPoliciesRequest:
    type: object
    properties:
      appId:
        type: string
      resourceId:
        type: string
  v2DeleteUserRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to delete
  v2ExchangeClientKeyAssertionRequest:
    type: object
    properties:
      assertion:
        type: string
        description: |-
          'assertion' is a JWT credential signed by a Client Private Key.
          Vax will typically handle all of this for you.

          Example claims:
          {
               iss: my-app-id-or-pid
               aud: vendasta.com
               sub: my-subject@service-account.vendasta.com
               kid: my-public-key-id
               /* other claims like exp, iat, as normal */
          }
  v2ExchangeClientKeyAssertionResponse:
    type: object
    properties:
      token:
        type: string
        title: token is an IAM token
  v2GetMultiExternalIDRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserIdentifier'
        title: The list of external ids to fetch
      externalIdType:
        type: string
        description: Which type of external ids to fetch.
  v2GetMultiExternalIDResponse:
    type: object
    properties:
      externalIds:
        type: array
        items:
          type: string
        description: The external ids.
  v2GetMultiUsersRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserIdentifier'
        title: The users to get
      propertyMask:
        $ref: '#/definitions/v2UserPropertyMask'
        title: Which properties to include on the returned user
  v2GetMultiUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2User'
        title: The users
  v2GetResetPasswordTokenRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to fetch a password reset token for
  v2GetResetPasswordTokenResponse:
    type: object
    properties:
      resetPasswordToken:
        type: string
        description: A one-time-use, time-sensitive token that can only be used to reset the password.
  v2GetTokenForUserRequest:
    type: object
    properties:
      subjectId:
        type: string
        title: subject_id of the user
      email:
        type: string
        title: email of the user
      userId:
        type: string
        title: user id of the user
      refreshToken:
        type: string
        title: refresh token given by a previous call of get session
      clientAssertion:
        type: string
        title: Assertion signed by a private key provided by a client using 2-legged oauth flow
      federatedIdentityProvider:
        type: string
        title: The name of the Identity Provider used to federate identity, e.g. google
      scopes:
        type: array
        items:
          type: string
        title: Scopes to be added to the access token
      clientId:
        type: string
        description: |-
          The client id that the session is being created for.
          If an client_id is not passed, the client_id will fall back to IAM as the client_id.
          For OAuth2 a client_id should always be given, unless providing a client_assertion as your ID.
      nonce:
        type: string
        title: |-
          When an ID token is generated, a nonce field is used for to associate the client to the given id token and
          mitigate replay attacks.
          https://openid.net/specs/openid-connect-core-1_0.html#IDToken
      impersonateeUserId:
        type: string
        title: The user ID of the user being impersonated (optional)
      serviceProviderId:
        type: string
        title: Service provider id that the tokens are to be made for and returned to
      legacyUserId:
        type: string
        description: |-
          legacy_user_id is the subject ID that acted as the user ID in ssov3 marketplace integrations
          Some vendors use this to maintain backwards compatibility with marketplace APIs.
      consentingUserId:
        type: string
        description: |-
          The user ID of the person who provided consent for the scopes of a service account user.
          This field is primarily used when tokens are issued to automations where we want
          to track the user who activated the automation on behalf of the service account.
  v2GetTokenForUserResponse:
    type: object
    properties:
      identityToken:
        type: string
        description: An IAM identity token, which is different than oidc_identity_token.
      accessToken:
        type: string
        title: An IAM access token
      refreshToken:
        type: string
        title: A refresh token for the iam access token
      oidcIdentityToken:
        type: string
        title: |-
          An OpenID Connect ID Token.
          https://openid.net/specs/openid-connect-core-1_0.html#IDToken
    title: Response iam.v2.IAMSSO/GetTokenForUser
  v2LinkedIn:
    type: object
    properties:
      publicProfileId:
        type: string
        title: 'Public profile identifier used to build Linkedin public profile URL, e.g.: ''https://www.linkedin.com/in/${public_profile_id}'''
  v2ListResourcesRequest:
    type: object
    properties:
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
      filters:
        $ref: '#/definitions/v2ListResourcesRequestFilters'
      searchTerm:
        type: string
  v2ListResourcesRequestFilters:
    type: object
    properties:
      roleTypes:
        type: array
        items:
          type: string
        title: Filter to resources that support at least one of the specified role types
      resourceIds:
        type: array
        items:
          type: string
        title: Filter to resources that contain at least one of the specified resource ids
      resourceAttributes:
        type: array
        items:
          type: string
        title: Filter to resources that contain at least one of the specified resource attributes
      subjectAttributes:
        type: array
        items:
          type: string
        title: Filter to resources that contain at least one of the specified subject attributes on its policies
      actions:
        type: array
        items:
          type: string
        title: Filter to resources that contain at least one of the specified actions on its policies
      appIds:
        type: array
        items:
          type: string
        title: Filter to resources that contain at least one of the specified app ids
  v2ListResourcesResponse:
    type: object
    properties:
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2Resource'
      nextCursor:
        type: string
      hasMore:
        type: boolean
  v2ListSecurityLogsRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: User Identifier to list for
      filters:
        $ref: '#/definitions/v2ListSecurityLogsRequestFilters'
        title: Optionally apply filters
      pageSize:
        type: string
        format: int64
        title: Limit the number of results
      cursor:
        type: string
        title: Cursor to begin the list from
  v2ListSecurityLogsRequestFilters:
    type: object
    properties:
      actionId:
        type: string
        title: Filter the list by an actionID
    title: Filters which can be applied to this list request
  v2ListSecurityLogsResponse:
    type: object
    properties:
      logs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2SecurityLog'
        title: The list of logs
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
        title: Paging info
  v2ListUserRolesMetadataRequest:
    type: object
    properties:
      pageSize:
        type: string
        format: int64
        title: Limit the number of results
      cursor:
        type: string
        title: Cursor to begin the list from
  v2ListUserRolesMetadataResponse:
    type: object
    properties:
      userRoleMetadatas:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserRoleMetadata'
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
        title: Paging info
  v2ListUsersRequest:
    type: object
    properties:
      partnerId:
        type: string
        title: The partner ID
      allPartners:
        type: boolean
        title: All Partners
      userFilter:
        $ref: '#/definitions/v2UserFilter'
        title: Limit which users are included in the results
      propertyMask:
        $ref: '#/definitions/v2UserPropertyMask'
        title: Which extra properties to include on the listed users
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        title: The number of results to return
      sortOptions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserSortOptions'
        title: ListUserSortField, defaults to created ascending if no sort options provided
  v2ListUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2User'
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
        title: Paging info
  v2NamespacedEmail:
    type: object
    properties:
      namespace:
        type: string
        title: The namespace (i.e. partner id) to which a user belongs
      email:
        type: string
        title: The email ID of the user
    title: 'DEPRECATED: A user can be uniquely identified with an email and a partner ID namespace'
  v2OAuthCredentials:
    type: object
    properties:
      provider:
        type: string
        title: 'provider name, ie: "google"'
      idToken:
        type: string
      accessToken:
        type: string
    title: Credentials to be passed for an OAuth workflow
  v2OneTimePasswordCredentials:
    type: object
    properties:
      userId:
        type: string
        title: user's id
      oneTimePassword:
        type: string
        title: user's one time password
    title: A user and a one time password
  v2PasswordCredentials:
    type: object
    properties:
      email:
        type: string
        title: user's email
      password:
        type: string
        title: user's password
    title: A users email password combination
  v2PhoneNumber:
    type: object
    properties:
      phoneNumber:
        type: string
        title: The phone number stored in the tel RFC3966 format https://tools.ietf.org/html/rfc3966
      phoneNumberType:
        $ref: '#/definitions/v2PhoneNumberType'
        title: Type of the phone number
  v2PhoneNumberType:
    type: string
    enum:
      - PHONE_NUMBER_TYPE_INVALID
      - PHONE_NUMBER_TYPE_WORK
      - PHONE_NUMBER_TYPE_HOME
      - PHONE_NUMBER_TYPE_MOBILE
      - PHONE_NUMBER_TYPE_FAX
      - PHONE_NUMBER_TYPE_PAGER
    default: PHONE_NUMBER_TYPE_INVALID
  v2Policy:
    type: object
    properties:
      appId:
        type: string
      resourceId:
        type: string
      policyId:
        type: string
      policyName:
        type: string
      actions:
        type: array
        items:
          type: string
      policy:
        $ref: '#/definitions/policiesPolicyNode'
      readOnlyPolicy:
        type: string
        title: The human readable version of the policy
      resourceAttributesUsed:
        type: array
        items:
          type: string
        title: The inferred set of resource attributes used within the policy
  v2PublicKey:
    type: object
    properties:
      key:
        type: string
      id:
        type: string
      algorithmType:
        $ref: '#/definitions/v2AlgorithmType'
    title: A Client Public Key
  v2RegisterPolicyRequest:
    type: object
    properties:
      policy:
        $ref: '#/definitions/v2Policy'
        title: The policy to register
  v2RegisterResourceOwnerRequest:
    type: object
    properties:
      appId:
        type: string
        title: |-
          A kebab-case unique identifier for your app
          e.g. "vendasta-business-center"
      appName:
        type: string
        title: |-
          A human readable name for your application
          e.g. "Business Center"
  v2RegisterResourceRequest:
    type: object
    properties:
      appId:
        type: string
        title: |-
          A kebab-case unique identifier for your app
          e.g. "vendasta-business-center"
      resourceId:
        type: string
        title: |-
          A kebab-case identifier for your resource which is unique within your app
          e.g. "godaddy-domain"
      resourceName:
        type: string
        title: A human readable name for your resource
      version:
        type: string
        description: |-
          DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource
          If the specified version is the same as the current resource version updates will not be applied
          Decreasing the version will update the resource but will not rollback to a previous state.
  v2RegisterUserRoleMetadataRequest:
    type: object
    properties:
      userRoleMetadata:
        $ref: '#/definitions/v2UserRoleMetadata'
        title: A description of the role being registered
  v2RemoveClientKeyRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to remove the key from
      clientKeyId:
        type: string
        title: The identifier for the key to remove
  v2RemoveMultiUserRestrictionRequest:
    type: object
    properties:
      userIdentifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UserIdentifier'
        title: The list of users to remove the restriction from
      restrictionType:
        $ref: '#/definitions/v2RestrictionType'
        title: The restriction type to remove
  v2RemoveUserRoleRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to update
      roleId:
        type: string
        description: |-
          The type of role, e.g. "smb", "partner", etc.
          Your service must own a given role in order to remove it from a user.
  v2ReplaceResourceRequest:
    type: object
    properties:
      ownerId:
        type: string
        description: |-
          Which service owns this resource
          Should be "lower-kebab-case".
      resourceKind:
        type: string
        title: |-
          An identifier for the resource; previously "resource_id".
          Should be "lower-kebab-case"
      resourceDescription:
        type: string
        description: A human-readable description of when this resource is used for access checks.
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/policiesPolicyNode'
        title: map of action to policy for this resource
      version:
        type: string
        description: |-
          DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource
          If the specified version is the same as the current resource version updates will not be applied
          Decreasing the version will update the resource but will not rollback to a previous state.
      callbackResourceData:
        $ref: '#/definitions/v2CallbackResourceData'
        description: Contains data required for registering callback resources.
  v2ResetPasswordRequest:
    type: object
    properties:
      resetPasswordToken:
        type: string
        title: The password reset token which was sent in a password reset email
      newPassword:
        type: string
        title: The new password to set on the user
      invalidateActiveSessions:
        type: boolean
        title: Invalidates user's active sessions if reset was successful
  v2Resource:
    type: object
    properties:
      appId:
        type: string
      resourceId:
        type: string
      resourceName:
        type: string
      vstoreLink:
        type: string
      callbackResourceData:
        $ref: '#/definitions/v2CallbackResourceData'
      created:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
      policies:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2Policy'
      supportedRoleTypes:
        type: array
        items:
          type: string
      resourceAttributes:
        type: array
        items:
          type: string
        title: The inferred set of resource attributes
      actions:
        type: array
        items:
          type: string
        title: Inferred list of actions across all policies on the resource
      version:
        type: string
        title: 'DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource'
  v2RestrictionType:
    type: string
    enum:
      - RESTRICTION_TYPE_UNSET
      - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN
      - RESTRICTION_TYPE_FROZEN
    default: RESTRICTION_TYPE_UNSET
    description: |-
      - RESTRICTION_TYPE_UNSET: Unset
       - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN: This restriction prevents user from logging in. Automatically cleared on password reset.
       - RESTRICTION_TYPE_FROZEN: This restriction prevents user from logging in or passing any access checks.
    title: The list of restriction types which can be applied to Users
  v2SearchUsersRequest:
    type: object
    properties:
      searchTerm:
        type: string
      cursor:
        type: string
        description: Cursor allows paging of results, the next_cursor returned by the last response is expected.
      pageSize:
        type: string
        format: int64
        description: The number of results to return.
  v2SearchUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2User'
      pagingMetadata:
        $ref: '#/definitions/vendastatypesPagedResponseMetadata'
        title: Paging info
  v2SecurityLog:
    type: object
    properties:
      userId:
        type: string
        title: User ID that this log is for
      actionId:
        type: string
        title: The action which was taken
      logId:
        type: string
        title: A unique ID to identify this specific log
      description:
        type: string
        title: A description of what occurred
      created:
        type: string
        format: date-time
        title: The time this log was created
    title: SecurityLog represents a security log
  v2SendEmailVerificationRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: ID of user to send email verification to
      nextUrl:
        type: string
        title: Provide a url for the user to navigate to after their email has been verified
      nextUrlButtonText:
        type: string
        title: Provide the text for the button the user will click to navigate to the provided next_url
      forceEmailBrandingPartnerId:
        type: string
        description: |-
          By default, the verification email will be sent with whitelabel branding inferred from the given UserIdentifier.
          You can optionally set this field to a specific partner identifier to use a specific partner's whitelabel branding.
      recaptchaToken:
        type: string
        title: 'Optional ReCaptcha token for public email verification calls: https://developers.google.com/recaptcha/docs/verify'
  v2SendOneTimePasswordEmailRequest:
    type: object
    properties:
      userId:
        type: string
        title: User ID to send the email to
      templateId:
        type: string
        title: the template id to use for the email
      parameters:
        type: object
        title: |-
          Substitution parameters
          Supports dot pathing in the template content; for example, given `productName['.Workflow.Step1.ProductId']` will go Workflow > Step1 > ProductId into
          parameters and get the associated value
      subject:
        type: string
        title: the subject of the email
      nextUrl:
        type: string
        title: Provide a url for the user to navigate to after exchanging the OTP for a session
      nextUrlButtonText:
        type: string
        title: Provide the text for the button the user will click to navigate to the provided next_url
  v2SortDirection:
    type: string
    enum:
      - SORT_DIRECTION_INVALID
      - SORT_DIRECTION_ASCENDING
      - SORT_DIRECTION_DESCENDING
    default: SORT_DIRECTION_INVALID
  v2TypedExternalIdentifier:
    type: object
    properties:
      externalIdType:
        type: string
        description: The type of external id.
      externalId:
        type: string
        description: The external id.
    description: A user's external id. Identifies a user in a system outside of IAM.
  v2UpdateUserRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to update
      operations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UpdateUserRequestOperation'
        title: The updates to perform
  v2UpdateUserRequestOperation:
    type: object
    properties:
      firstName:
        type: string
      greetingName:
        type: string
      lastName:
        type: string
      languageCode:
        type: string
      email:
        type: string
      phoneNumbers:
        $ref: '#/definitions/UpdateUserRequestPhoneNumbers'
      address:
        $ref: '#/definitions/v2Address'
      profileImageUrl:
        type: string
      timeZone:
        type: string
      linkedIn:
        $ref: '#/definitions/v2LinkedIn'
      meetingBookingUrl:
        type: string
      externalId:
        $ref: '#/definitions/v2TypedExternalIdentifier'
        title: |-
          Set the value for the specified external id type
          To set the value of multiple types add the operation multiple times
  v2UpdateUserRoleRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        title: The user to update
      roleId:
        type: string
        description: |-
          The type of role, e.g. "smb", "partner", etc.
          Your service must own a given role in order to add it to a user.
      operations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2UpdateUserRoleRequestOperation'
        title: The role updates to perform
  v2UpdateUserRoleRequestOperation:
    type: object
    properties:
      dropAttributeKey:
        type: string
      replaceAttributes:
        $ref: '#/definitions/attributesStructAttribute'
      addAttributes:
        $ref: '#/definitions/attributesStructAttribute'
      removeAttributes:
        $ref: '#/definitions/attributesStructAttribute'
  v2UpsertExternalIDRequest:
    type: object
    properties:
      userIdentifier:
        $ref: '#/definitions/v2UserIdentifier'
        description: The identifier for the user to update/insert an external id for.
      typedExternalIdentifier:
        $ref: '#/definitions/v2TypedExternalIdentifier'
        description: The type and value of external ID to insert/update.
  v2UpsertPartnerLimitsRequest:
    type: object
    properties:
      partnerId:
        type: string
        title: Partner ID
      limitsId:
        type: string
        title: ID that maps to the limits of the Partner
  v2User:
    type: object
    properties:
      userId:
        type: string
        title: The User ID e.g. U-e7751c53-8a49-5e89-90fd-7a8140889c02
      partnerId:
        type: string
        description: The "owner" partner for the user.
      email:
        type: string
        title: The user's email
      roles:
        type: object
        additionalProperties:
          $ref: '#/definitions/v2UserRole'
        title: A map of all roles the user has, keyed by role_id
      created:
        type: string
        format: date-time
        title: When the user was first created
      updated:
        type: string
        format: date-time
        title: When the user was last updated
      firstName:
        type: string
        title: The user's first name
      greetingName:
        type: string
        description: |-
          This is a special name used to greet individuals
          which is used in certain languages.
          It's unused in Western cultures.
      lastName:
        type: string
        title: The user's surname
      languageCode:
        type: string
        title: The preferred language of the user as a locale
      publicKeys:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2PublicKey'
        title: The user's public client keys
      lastLogin:
        type: string
        format: date-time
        description: The last time the user went through the "sign-in" flow.
      emailVerified:
        type: boolean
        title: Whether or not a user has verified their email
      phoneNumbers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2PhoneNumber'
        title: List of phone numbers associated to the user
      address:
        $ref: '#/definitions/v2Address'
        title: Address of the user
      profileImageUrl:
        type: string
        title: The user's profile image
      timeZone:
        type: string
        description: Time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
      userSpecifiedPassword:
        type: string
        description: |-
          The password entered specifically by the end user.
          This field should only be used when someone is creating their OWN user, never
          when an administrator is creating a user for someone else.
          This must never be a "default" or system-generated password.
          Access to this field is limited to only the service accounts that require it.
          All other consumers of CreateUser should instead initiate the Password Reset
          process to allow the end-user themselves to set their own password.
      linkedIn:
        $ref: '#/definitions/v2LinkedIn'
        title: LinkedIn user profile information
      meetingBookingUrl:
        type: string
        title: Meeting booking url is where the user can provide a link for booking meetings
  v2UserAndImpersonateeId:
    type: object
    properties:
      userId:
        type: string
      impersonateeId:
        type: string
  v2UserFilter:
    type: object
    properties:
      roleIds:
        type: array
        items:
          type: string
        description: |-
          Users with ANY of the provided types will be returned
          Empty list will return ALL users.
      searchTerms:
        type: array
        items:
          type: string
        title: Search terms filter (not scored), matches each search term if it exists within one of first name, last name, or email of the User
      email:
        type: string
        title: Search by email
      emailVerified:
        type: boolean
        title: Search by email verified status, if requested
    title: Filter which users are returned
  v2UserIdentifier:
    type: object
    properties:
      userId:
        type: string
        title: Identifies a user by their user_id
      token:
        type: string
        description: |-
          An IAM token
          Both identity tokens and access tokens are permitted.
      namespacedEmail:
        $ref: '#/definitions/v2NamespacedEmail'
        title: 'Deprecated: Prefer to use the `user_id` or `token` fields to avoid handling email, or for `user_id` being a more stable reference to a user who may have changed their email'
      typedExternalIdentifier:
        $ref: '#/definitions/v2TypedExternalIdentifier'
        description: Identify a user by an external identifier.
      subjectId:
        type: string
        title: Looking up a User via a Subject ID will be slower than other methods
    description: A UserIdentifier uniquely identifies a user.
  v2UserPropertyMask:
    type: object
    properties:
      includeRoles:
        type: boolean
        title: |-
          Whether to include the user roles in the response
          Deprecated, roles are always included
    title: Allow including additional user data
  v2UserRole:
    type: object
    properties:
      roleId:
        type: string
        description: The type of role, e.g. "smb", "partner", etc.
      attributes:
        $ref: '#/definitions/attributesStructAttribute'
        title: |-
          Additional attributes associated with the role.
          These are used in conjunction with policies for Access Checks
      created:
        type: string
        format: date-time
        title: When this role was first created on this user
      updated:
        type: string
        format: date-time
        title: When this role was last updated on this user
    description: |-
      A user has many roles
      Roles contain attributes which are used in access checks.
  v2UserRoleMetadata:
    type: object
    properties:
      roleId:
        type: string
        title: The role's identifier, e.g. digital_agent, smb, partner
      ownerUserId:
        type: string
        description: |-
          The user who owns this role (typically a service account)
          Only the owner of a role are allowed to edit or view that role's attributes for a user.
      name:
        type: string
        title: |-
          Human readable name for the role
          E.g. "Digital Agent"
      description:
        type: string
        title: What is this role used for?
  v2UserSortField:
    type: string
    enum:
      - USER_SORT_FIELD_INVALID
      - USER_SORT_FIELD_CREATED
      - USER_SORT_FIELD_FIRST_NAME
      - USER_SORT_FIELD_LAST_NAME
      - USER_SORT_FIELD_EMAIL
      - USER_SORT_FIELD_LAST_LOGIN
    default: USER_SORT_FIELD_INVALID
    description: The field to sort a result set on.
  v2UserSortOptions:
    type: object
    properties:
      direction:
        $ref: '#/definitions/v2SortDirection'
        title: A direction to sort results in
      field:
        $ref: '#/definitions/v2UserSortField'
        title: Field to sort on
    title: Options for controlling the order of query results
  v2VerifyEmailRequest:
    type: object
    properties:
      token:
        type: string
        title: Email verifier token
      requestOtpCode:
        type: boolean
        title: Request OTP Code
  v2VerifyEmailResponse:
    type: object
    properties:
      otpCode:
        type: string
        title: OTP Code, if requested
  vendastatypesFieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
  vendastatypesPagedRequestOptions:
    type: object
    properties:
      cursor:
        type: string
        title: cursor can be passed to retrieve the next page of results keyed by the cursor
      pageSize:
        type: string
        format: int64
        title: page_size specifies the number of items to return in the next page
  vendastatypesPagedResponseMetadata:
    type: object
    properties:
      nextCursor:
        type: string
        title: A cursor that can be provided to retrieve the next page of results
      hasMore:
        type: boolean
        title: Whether or not more results exist
      totalResults:
        type: string
        format: int64
        title: The total number of results. This is not supported on all paged apis and will be 0 if it is not supported
