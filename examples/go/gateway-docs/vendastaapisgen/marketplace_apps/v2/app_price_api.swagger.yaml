swagger: "2.0"
info:
  title: marketplace_apps/v2/app_price_api.proto
  version: version not set
tags:
  - name: AppPricing
consumes:
  - application/json
produces:
  - application/json
paths:
  /marketplaceapps.v2.AppPricing/GetMultiPricing:
    post:
      summary: Returns a list of app pricing data for provided pricing contexts
      operationId: AppPricing_GetMultiPricing
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v2GetMultiPricingResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v2GetMultiPricingRequest'
      tags:
        - AppPricing
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1Fee:
    type: object
    properties:
      amount:
        type: number
        format: float
        title: Amount can be in percentage or in cents depending on the amount type
      amountType:
        $ref: '#/definitions/v1FeeAmountType'
        title: 'Type of Amount. Examples: fixed and percentage'
      feeType:
        $ref: '#/definitions/v1FeeType'
        title: 'Type of fee. Example: Management'
    title: Represents the fee to be added to a product pricing
  v1FeeAmountType:
    type: string
    enum:
      - FEE_AMOUNT_TYPE_INVALID
      - FEE_AMOUNT_TYPE_FIXED
      - FEE_AMOUNT_TYPE_PERCENTAGE
    default: FEE_AMOUNT_TYPE_INVALID
  v1FeeType:
    type: string
    enum:
      - FEE_TYPE_INVALID
      - FEE_TYPE_MANAGEMENT
    default: FEE_TYPE_INVALID
  v2AppPrice:
    type: object
    properties:
      appId:
        type: string
        title: id of App prices were returned for
      displayOverride:
        $ref: '#/definitions/v2PriceDisplayOverride'
        title: options for display prices (ie "Contact Sales" rather than a price amount)
      billingConfiguration:
        $ref: '#/definitions/v2BillingConfiguration'
        title: additional options for handling certain billing scenarios
      pricesForEditions:
        type: object
        additionalProperties:
          $ref: '#/definitions/v2UnitPrice'
        title: map of prices to editionIDs (one element for non-editioned apps)
  v2AppPrices:
    type: object
    properties:
      appId:
        type: string
        title: id of App prices were returned for
      pricesForContexts:
        type: object
        additionalProperties:
          $ref: '#/definitions/v2AppPrice'
        title: map of app prices for pricing contexts
  v2BillingConfiguration:
    type: object
    properties:
      usesVariablePricing:
        type: boolean
      usesComponentPricing:
        type: boolean
      usesEditions:
        type: boolean
  v2Commitment:
    type: object
    properties:
      initial:
        type: string
        format: int64
        title: The initial commitment required (i.e. 12 month commitment at activation)
      recurring:
        type: string
        format: int64
        title: The commitment required after the initial commitment period (i.e. repeated periods of 6 month commitments after renewal)
    title: Holds information about the commitment required by the vendor
  v2Discount:
    type: object
    properties:
      discountType:
        $ref: '#/definitions/v2DiscountType'
        description: Discount type eg. fixed_amount, percent_amount, etc.
      amount:
        type: string
        format: int64
        title: Discounted dollar amount in cents
      start:
        type: string
        format: date-time
        title: The date the discount starts/started
      end:
        type: string
        format: date-time
        title: The date the discount ends/ended
      customerId:
        type: string
        title: (OPTIONAL) The identifier of the customer the discount is applied to
  v2DiscountType:
    type: string
    enum:
      - DISCOUNT_TYPE_FIXED_AMOUNT
      - DISCOUNT_TYPE_PERCENT_AMOUNT
      - DISCOUNT_TYPE_FIXED_NUMBER_OF_UNITS
      - DISCOUNT_TYPE_FIXED_AMOUNT_PER_UNIT
    default: DISCOUNT_TYPE_FIXED_AMOUNT
  v2FrequencyPrice:
    type: object
    properties:
      frequency:
        $ref: '#/definitions/v2UnitBillingFrequency'
        title: billing frequency for this price
      setupFee:
        type: string
        format: int64
        title: additional setup fee for this price
      commitment:
        $ref: '#/definitions/v2Commitment'
        title: commitment for this price
      pricingRules:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2PricingRule'
        title: rules for how to price this unit
      instancePrice:
        $ref: '#/definitions/v2InstancePrice'
        title: instance price is related to the product's effective cost, considering quantity and possible discounts or tiered pricing
      fees:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Fee'
        title: fees are the fees that are applied as part of the price
  v2FrequencyPrices:
    type: object
    properties:
      pricesForFrequencies:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2FrequencyPrice'
        title: list of prices for frequencies (ie monthly, yearly)
  v2GetMultiPricingRequest:
    type: object
    properties:
      appIds:
        type: array
        items:
          type: string
        title: 'Deprecated (use item_ids): list of apps to return prices for'
      pricingContexts:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: list of contexts the price is being requested for (ie msrp, wholesale)
      partnerId:
        type: string
        title: id of the partner, only required for certain pricing contexts
      marketId:
        type: string
        title: id of the market, only required for certain pricing contexts
      filterOptions:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: filter_options the requester wants to hydrate on the response
      requestedApps:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2RequestedApp'
        title: 'Deprecated (use RequestedItems): list of requested apps to be hydrated based on the filter_options'
      businessId:
        type: string
        title: id of the business that an item is being sold to, only required for certain pricing contexts
      itemIds:
        type: array
        items:
          type: string
        title: list of items to return prices for (optional until we phase out app_ids field)
      requestedItems:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2RequestedApp'
        title: list of requested items to be hydrated based on the filter_options
  v2GetMultiPricingResponse:
    type: object
    properties:
      appPrices:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2AppPrices'
        title: list of pricing context prices for apps
  v2InstancePrice:
    type: object
    properties:
      total:
        type: string
        format: int64
        title: total instance price of the given product
  v2PriceDisplayOverride:
    type: string
    enum:
      - PRICE_DISPLAY_OVERRIDE_NONE
      - PRICE_DISPLAY_OVERRIDE_CONTACT_SALES
      - PRICE_DISPLAY_OVERRIDE_STARTING_AT
    default: PRICE_DISPLAY_OVERRIDE_NONE
  v2PricingRule:
    type: object
    properties:
      price:
        type: string
        format: int64
        title: price for the unit
      max:
        type: string
        format: int64
        title: maximum number of units to get this price (-1 represents no limit)
      min:
        type: string
        format: int64
        title: minimum number of units to get this price
    title: pricing rules (ie normal, stairstep)
  v2RequestedApp:
    type: object
    properties:
      appId:
        type: string
        title: (app/addon/package) id of App prices to be hydrated
      quantity:
        type: string
        format: int64
        title: app/addon/package quantity to calculate the effective cost
    title: 'TODO: rename this to RequestedItem once we''ve replaced all usages of requested_apps field'
  v2UnitBillingFrequency:
    type: string
    enum:
      - UNIT_BILLING_FREQUENCY_INVALID
      - UNIT_BILLING_FREQUENCY_MONTHLY
      - UNIT_BILLING_FREQUENCY_YEARLY
      - UNIT_BILLING_FREQUENCY_ONETIME
    default: UNIT_BILLING_FREQUENCY_INVALID
  v2UnitPrice:
    type: object
    properties:
      pricesForCurrencies:
        type: object
        additionalProperties:
          $ref: '#/definitions/v2FrequencyPrices'
        title: map of prices for currency codes
      discount:
        type: array
        items:
          type: object
          $ref: '#/definitions/v2Discount'
        title: Discounts applied for the edition
  vendastatypesFieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
