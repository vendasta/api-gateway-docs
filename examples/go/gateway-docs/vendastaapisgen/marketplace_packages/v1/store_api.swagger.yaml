swagger: "2.0"
info:
  title: marketplace_packages/v1/store_api.proto
  version: version not set
tags:
  - name: MarketplaceStore
consumes:
  - application/json
produces:
  - application/json
paths:
  /marketplace_packages.v1.MarketplaceStore/AddToStore:
    post:
      summary: AddToStore defines the endpoint for adding a product to a store.
      operationId: MarketplaceStore_AddToStore
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: AddToStoreRequest defines the request to add an app or package to a store.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AddToStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/AddToStores:
    post:
      summary: AddToStores defines the endpoint for adding a product to one or more stores.
      operationId: MarketplaceStore_AddToStores
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: AddToStoresRequest defines the request to add an app or package to one or more stores.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AddToStoresRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/CheckProductVisibility:
    post:
      summary: Check the visibility of a product for a given set of stores.
      operationId: MarketplaceStore_CheckProductVisibility
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CheckProductVisibilityResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CheckProductVisibilityRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/CreateStoreCategory:
    post:
      summary: Create a category in a given store
      operationId: MarketplaceStore_CreateStoreCategory
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateStoreCategoryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateStoreCategoryRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/DeleteStoreCategory:
    post:
      summary: Delete a specific category
      operationId: MarketplaceStore_DeleteStoreCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteStoreCategoryRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/EnableCustomCategoriesForStore:
    post:
      summary: EnableCustomCategoriesForStore enables the use of custom categories for a store and inflates the default LMI categories as custom categories
      operationId: MarketplaceStore_EnableCustomCategoriesForStore
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1EnableCustomCategoriesForStoreResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1EnableCustomCategoriesForStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/GetCategoriesForStore:
    post:
      summary: Get all categories for a store
      operationId: MarketplaceStore_GetCategoriesForStore
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetCategoriesForStoreResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetCategoriesForStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/GetMultiStorePricePreviews:
    post:
      summary: |-
        GetMultiStorePricePreviews returns a list of product price previews.
        The previews are returned for each product as a list of structures containing the product ID and name and store ID, name, currency, and a list of edition prices.
      operationId: MarketplaceStore_GetMultiStorePricePreviews
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetMultiStorePricePreviewsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: GetMultiStorePricePreviewsRequest represents the request to get the price previews for multiple products.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetMultiStorePricePreviewsRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/GetPublicStoreTheme:
    post:
      summary: GetPublicStoreTheme returns the theme for the specified public storefront.
      operationId: MarketplaceStore_GetPublicStoreTheme
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetPublicStoreThemeResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: Request to fetch the public storefront theme.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetPublicStoreThemeRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/GetStore:
    post:
      summary: |-
        Retrieves the store for a given partner and market
        If the store does not exist, one is created
      operationId: MarketplaceStore_GetStore
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetStoreResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/GetStoreWithCategories:
    post:
      summary: GetStoreWithCategories returns a list of categories in order with their corresponding packages or a list of lmi categories with their packages
      operationId: MarketplaceStore_GetStoreWithCategories
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetStoreWithCategoriesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetStoreWithCategoriesRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/HasPartnerSetStoreOrder:
    post:
      summary: HasPartnerSetStoreOrder checks if a partner has any store order set.
      operationId: MarketplaceStore_HasPartnerSetStoreOrder
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HasPartnerSetStoreOrderResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: HasPartnerSetStoreOrderRequest defines the request for checking if a partner has any store order set.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1HasPartnerSetStoreOrderRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/ListCategoriesForPackage:
    post:
      summary: List the categories that a package is in
      operationId: MarketplaceStore_ListCategoriesForPackage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListCategoriesForPackageResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListCategoriesForPackageRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/ListProductsInStore:
    post:
      summary: ListProductsInStore defines the endpoint for list the products for a store.
      operationId: MarketplaceStore_ListProductsInStore
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListProductsInStoreResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: ListProductsInStoreRequest defines the request to list products for a store.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListProductsInStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/ListStorePricePreviews:
    post:
      summary: |-
        ListStorePricePreviews returns a list of store price previews.
        The previews are returned as a list of structures containing the store ID, name, currency, and a list of edition prices.
      operationId: MarketplaceStore_ListStorePricePreviews
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListStorePricePreviewsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: ListStorePricePreviewsRequest represents the request for retrieving store price previews.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListStorePricePreviewsRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/ListStoreProductVisibilitySummaries:
    post:
      summary: |-
        ListStoreProductVisibilitySummaries finds all store products that are currently visible in ANY of a partner's stores.
        For every product that is visible in any store, the list of store IDs that it is visible in is also returned.
        Note: due to apps being the only product type currently represented by the StoreProduct model, only apps will be returned (no packages).
      operationId: MarketplaceStore_ListStoreProductVisibilitySummaries
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListStoreProductVisibilitySummariesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: ListStoreProductVisibilitySummariesRequest represents the request for retrieving a summary of information for the store products that are visible in any of a partner's stores.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListStoreProductVisibilitySummariesRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/ListVisibleAddonsForProduct:
    post:
      summary: |-
        ListVisibleAddonsForProduct returns a list of visible addons associated with a given parent app
        DEPRECATED: This RPC has been deprecated and should no longer be used
      operationId: MarketplaceStore_ListVisibleAddonsForProduct
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListVisibleAddonsForProductResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListVisibleAddonsForProductRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/RemoveFromStore:
    post:
      summary: RemoveFromStore defines the endpoint for removing a product from a store.
      operationId: MarketplaceStore_RemoveFromStore
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: RemoveFromStoreRequest defines the request to remove an app or package from a store.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RemoveFromStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/SetCategoriesForPackage:
    post:
      summary: Update the categories that a package is in, removing it from any categories that are not included in this request
      operationId: MarketplaceStore_SetCategoriesForPackage
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SetCategoriesForPackageRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/SetPackagesInCategory:
    post:
      summary: Update the packages that are in a category, removing any that are not included in this request
      operationId: MarketplaceStore_SetPackagesInCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SetPackagesInCategoryRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/SetStoreCategoryOrder:
    post:
      summary: Updates the order the custom categories will be displayed in
      operationId: MarketplaceStore_SetStoreCategoryOrder
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SetStoreCategoryOrderRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/UpdatePublicStoreTheme:
    post:
      summary: UpdatePublicStoreTheme updates the theme for the specified public storefront.
      operationId: MarketplaceStore_UpdatePublicStoreTheme
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          description: Request to update the public storefront theme.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdatePublicStoreThemeRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/UpdateStore:
    post:
      summary: |-
        Updates the store for a given partner and market
        If the store does not exist, one is created
      operationId: MarketplaceStore_UpdateStore
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateStoreRequest'
      tags:
        - MarketplaceStore
  /marketplace_packages.v1.MarketplaceStore/UpdateStoreCategory:
    post:
      summary: Update the configuration of a category
      operationId: MarketplaceStore_UpdateStoreCategory
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateStoreCategoryRequest'
      tags:
        - MarketplaceStore
definitions:
  CurrenciesCurrency:
    type: string
    enum:
      - USD
      - AUD
      - BRL
      - CAD
      - CHF
      - CNY
      - CZK
      - EUR
      - GBP
      - HKD
      - INR
      - JPY
      - KHR
      - KRW
      - MXN
      - NOK
      - NZD
      - RUB
      - SEK
      - SGD
      - TRY
      - ZAR
      - DZD
      - AWG
      - FJD
      - KYD
    default: USD
  FrequenciesFrequency:
    type: string
    enum:
      - MONTHLY
      - DAILY
      - ONCE
      - YEARLY
      - WEEKLY
      - OTHER
    default: MONTHLY
  ListStoreProductVisibilitySummariesResponseStoreProductVisibilitySummary:
    type: object
    properties:
      productId:
        type: string
      numStoresVisible:
        type: string
        format: int64
        description: The number of stores that the product is visible in.
  LmiCategories:
    type: string
    enum:
      - NOT_SET
      - WEBSITE
      - CONTENT_AND_EXPERIENCE
      - LISTINGS
      - REPUTATION
      - SEO
      - SOCIAL
      - ADVERTISING
    default: NOT_SET
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  v1AddToStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the store to which to add the product.
      appId:
        type: string
        description: The app ID of the app this store product references, if any.
    description: AddToStoreRequest defines the request to add an app or package to a store.
  v1AddToStoresRequest:
    type: object
    properties:
      partnerId:
        type: string
        title: The ID of the partner that the stores belong to
      storeIds:
        type: array
        items:
          type: string
        title: The IDs of the stores to add the product to (store IDs are synonymous to market IDs)
      itemId:
        type: string
        title: The ID of the product or add-on to add to the stores
    description: AddToStoresRequest defines the request to add an app or package to one or more stores.
  v1Category:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store the category belongs to
      categoryId:
        type: string
        title: The unique identifier of the category
      categoryName:
        type: string
        title: The name of the category
      visibleInStore:
        type: boolean
        title: |-
          A flag that controls the visibility of a category in the store navigation
          If true, the category will be visible to users
      packageIds:
        type: array
        items:
          type: string
        title: The IDs of the packages that are in the category
    title: The representation of a category in a store
  v1CheckProductVisibilityRequest:
    type: object
    properties:
      partnerId:
        type: string
        description: The ID of the store.
      marketIds:
        type: array
        items:
          type: string
        description: Array of markets to check for product visibility status.
      productReferenceId:
        type: string
        description: The product/app id to check visibility status for.
  v1CheckProductVisibilityResponse:
    type: object
    properties:
      productVisibilty:
        type: object
        additionalProperties:
          type: boolean
        description: a map keyed by marketId containing a boolean value indicating visbility status.
    title: reponse containing store product visibility information
  v1CreateStoreCategoryRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      name:
        type: string
        title: The name of the category
    title: Request to create a category in a store
  v1CreateStoreCategoryResponse:
    type: object
    properties:
      category:
        $ref: '#/definitions/v1Category'
        title: The newly created category
    title: Response containing the ID of the newly created category
  v1DeleteStoreCategoryRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      categoryId:
        type: string
        title: The ID of the category to delete
    title: Request to delete a category
  v1EnableCustomCategoriesForStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
  v1EnableCustomCategoriesForStoreResponse:
    type: object
    properties:
      categories:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Category'
        title: The LMI categories that are enflated as custom categories
  v1GetCategoriesForStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
    title: Request for getting the categories that belong to a store
  v1GetCategoriesForStoreResponse:
    type: object
    properties:
      categories:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Category'
        title: The requested categories
    title: Response containing the requested categories
  v1GetMultiStorePricePreviewsRequest:
    type: object
    properties:
      partnerId:
        type: string
        description: The ID of the partner.
      productIds:
        type: array
        items:
          type: string
        description: The IDs of the products.
    description: GetMultiStorePricePreviewsRequest represents the request to get the price previews for multiple products.
  v1GetMultiStorePricePreviewsResponse:
    type: object
    properties:
      productPreviews:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ProductPricePreviews'
        description: The list of product price previews.
    description: GetMultiStorePricePreviewsResponse represents the response to get the price previews for multiple products.
  v1GetPublicStoreThemeRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the public storefront.
    description: Request to fetch the public storefront theme.
  v1GetPublicStoreThemeResponse:
    type: object
    properties:
      publicStoreTheme:
        $ref: '#/definitions/v1PublicStoreTheme'
        description: The theme of the public storefront.
    description: Response when fetching the public storefront theme.
  v1GetStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
    title: Request for retrieving a specific store
  v1GetStoreResponse:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      publicStoreSalesPersonId:
        type: string
        title: |-
          The ID of the sales person that is associated with the public store
          This is used to populate a contact form
      useCustomCategories:
        type: boolean
        title: A flag that controls whether the store is using the old LMI categories or the new custom categories
      categoryOrder:
        type: array
        items:
          type: string
        title: A list of category IDs in the order that they should be displayed
    title: The requested store entity
  v1GetStoreWithCategoriesRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      bypassCache:
        type: boolean
      getLegacyLmiCategories:
        type: boolean
        title: Retrieve legacy lmi categories to inflact in the front-end, don't use otherwise
  v1GetStoreWithCategoriesResponse:
    type: object
    properties:
      categories:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Category'
        title: A list of category IDs in the order that they should be displayed
      publicStoreSalesPersonId:
        type: string
        title: The public store sales person id
  v1HasPartnerSetStoreOrderRequest:
    type: object
    properties:
      partnerId:
        type: string
        description: The ID of the partner.
    description: HasPartnerSetStoreOrderRequest defines the request for checking if a partner has any store order set.
  v1HasPartnerSetStoreOrderResponse:
    type: object
    properties:
      result:
        type: boolean
        description: The result of the check.
    description: HasPartnerSetStoreOrderResponse defines the response for checking if a partner has any store order set.
  v1ListCategoriesForPackageRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      packageId:
        type: string
        title: The package ID to get the categories for
    title: Request to get all categories that a package is in
  v1ListCategoriesForPackageResponse:
    type: object
    properties:
      categories:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Category'
        title: The requested categories
    title: Response containing the categories that a package is in
  v1ListProductsInStoreFilters:
    type: object
    properties:
      searchTerm:
        type: string
        description: The search term by which to filter the products.
  v1ListProductsInStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the store for which to list products.
      cursor:
        type: string
        description: The cursor for the list operation.
      pageSize:
        type: string
        format: int64
        description: The page size for the list operation.
      filters:
        $ref: '#/definitions/v1ListProductsInStoreFilters'
        description: The filters by which to filter the store's products.
    description: ListProductsInStoreRequest defines the request to list products for a store.
  v1ListProductsInStoreResponse:
    type: object
    properties:
      storeProducts:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1StoreProduct'
        description: The products returned by the list operation.
      nextCursor:
        type: string
        description: The cursor to use to fetch the next page of products.
      hasMore:
        type: boolean
        description: Whether there are more products that can be listed.
    description: ListProductsInStoreResponse defines the response to list products for a store.
  v1ListStorePricePreviewsRequest:
    type: object
    properties:
      partnerId:
        type: string
      productId:
        type: string
    description: ListStorePricePreviewsRequest represents the request for retrieving store price previews.
  v1ListStorePricePreviewsResponse:
    type: object
    properties:
      previews:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1StorePricePreviews'
    description: ListStorePricePreviewsRequest represents the response for retrieving store price previews.
  v1ListStoreProductVisibilitySummariesRequest:
    type: object
    properties:
      partnerId:
        type: string
    description: ListStoreProductVisibilitySummariesRequest represents the request for retrieving a summary of information for the store products that are visible in any of a partner's stores.
  v1ListStoreProductVisibilitySummariesResponse:
    type: object
    properties:
      summaries:
        type: object
        additionalProperties:
          $ref: '#/definitions/ListStoreProductVisibilitySummariesResponseStoreProductVisibilitySummary'
        title: Map of app ID to its corresponding summary
    description: ListStoreProductVisibilitySummariesResponse represents the response for retrieving a summary of information for the store products that are visible in any of a partner's stores.
  v1ListVisibleAddonsForProductRequest:
    type: object
    properties:
      appId:
        type: string
        description: The parent product ID.
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the store for which to list products.
      cursor:
        type: string
        description: The cursor for the list operation.
      pageSize:
        type: string
        format: int64
        description: The page size for the list operation.
    title: |-
      ListVisibleAddonsForProductRequest defines the request to list the addons for a given parent product.
      DEPRECATED: This request is associated with a deprecated RPC
  v1ListVisibleAddonsForProductResponse:
    type: object
    properties:
      storeProducts:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1StoreProduct'
        description: The addons returned by the list operation.
      nextCursor:
        type: string
        description: The cursor to use to fetch the next page of products.
      hasMore:
        type: boolean
        description: Whether there are more products that can be listed.
    title: |-
      ListVisibleAddonsForProductResponse defines the response to list addons for a given parent product.
      DEPRECATED: This request is associated with a deprecated RPC
  v1Price:
    type: object
    properties:
      price:
        type: integer
        format: int32
        title: Price of the product
      frequency:
        $ref: '#/definitions/FrequenciesFrequency'
        title: Billing frequency of the product
      isStartingPrice:
        type: boolean
        description: |-
          is_starting_price denotes whether there are potential extra charges on top of the listed price
          e.g. whether there are in-product-purchases, tiers,
          or metered components billed in addition to the listed amount.
      setupFee:
        type: integer
        format: int32
        title: additional setup fee for this price
  v1Pricing:
    type: object
    properties:
      currency:
        $ref: '#/definitions/CurrenciesCurrency'
        title: '[DEPRECATED] Currency of the pricing'
      prices:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Price'
        title: '[DEPRECATED] Prices of the package'
      price:
        $ref: '#/definitions/v1Price'
        title: Price of the package
  v1ProductPricePreviews:
    type: object
    properties:
      productId:
        type: string
        description: The ID of the product.
      productName:
        type: string
        description: The name of the product.
      storePreviews:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1StorePricePreviews'
        description: The products list of store price previews.
    description: ProductPricePreviews is a structure representing a list of store price previews.
  v1PublicStoreTheme:
    type: object
    properties:
      logoBarColor:
        type: string
        description: This value is used to theme the logo bar of the public store.
      backgroundColor:
        type: string
        description: This value is used to theme the background of the public store.
      primaryFontColor:
        type: string
        description: this value is used to theme the primary font color of the public store.
      secondaryFontColor:
        type: string
        description: this value is used to theme the secondary font color of the public store.
      accentColor:
        type: string
        description: this value is used to theme the accent colors of the public store.
      primaryCategoryColor:
        type: string
        description: this value is used to theme the primary category bar color.
      secondaryCategoryColor:
        type: string
        description: this value is used to theme the secondary category bar color.
    description: Stores the public store theming data, such as colors.
  v1RemoveFromStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the store from which to remove the product.
      productReferenceId:
        type: string
        description: The reference (app or package) ID of the product to be removed from the store.
    description: RemoveFromStoreRequest defines the request to remove an app or package from a store.
  v1SetCategoriesForPackageRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      packageId:
        type: string
        title: The package to update
      categoryIds:
        type: array
        items:
          type: string
        title: The category IDs that the package belongs in
    title: Request to set the categories that a package belongs in
  v1SetPackagesInCategoryRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      packageIds:
        type: array
        items:
          type: string
        title: The package IDs that belong in the category
      categoryId:
        type: string
        title: The category to update
    title: Request to set the packages that belong in a category
  v1SetStoreCategoryOrderRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      orderedCategoryIds:
        type: array
        items:
          type: string
        title: The store's category IDs in the order they should be displayed in
    title: Request for updating the order of the categories in the store
  v1StoreIdentifier:
    type: object
    properties:
      partnerId:
        type: string
        title: The partner ID that the store belongs to
      marketId:
        type: string
        title: The market ID that the store belongs to
    title: Contains the fields that are required to uniquely identify a store
  v1StorePricePreview:
    type: object
    properties:
      editionId:
        type: string
      editionName:
        type: string
      price:
        type: string
        format: int64
      frequency:
        $ref: '#/definitions/FrequenciesFrequency'
    description: StorePricePreview is a structure representing a product edition's price.
  v1StorePricePreviews:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
      storeName:
        type: string
      prices:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1StorePricePreview'
      currency:
        $ref: '#/definitions/CurrenciesCurrency'
    description: StorePricePreviews is a structure representing a product's prices in a store (market).
  v1StoreProduct:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The store ID of the store product.
      name:
        type: string
        description: The name of the store product.
      tagline:
        type: string
        description: The tagline of the store product.
      iconUrl:
        type: string
        description: The URL at which to find the store product's icon.
      headerImageUrl:
        type: string
        description: The URL at which to find the store product's header image.
      pricing:
        $ref: '#/definitions/v1Pricing'
        description: The pricing of the store product.
      appId:
        type: string
        description: The app ID of the app this store product references, if any.
      packageId:
        type: string
        description: The package ID of the package this store product references, if any.
      lmiCategories:
        type: array
        items:
          $ref: '#/definitions/LmiCategories'
        description: |-
          The LMI categories of the store product.
          For an app, this is the LMI categories on the app.
          For a package, this is the concatenated LMI categories of its apps.
  v1UpdatePublicStoreThemeRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        description: The ID of the public storefront.
      publicStoreTheme:
        $ref: '#/definitions/v1PublicStoreTheme'
        description: The theme of the public storefront.
    description: Request to update the public storefront theme.
  v1UpdateStoreCategoryRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      categoryId:
        type: string
        title: The ID of the category to update
      name:
        type: string
        title: The new name of the category
      visibleInStore:
        type: boolean
        title: The new setting for whether the category should be shown in the store or not
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields should be updated in the update request
    title: Request to update the configuration of a store category
  v1UpdateStoreRequest:
    type: object
    properties:
      storeId:
        $ref: '#/definitions/v1StoreIdentifier'
        title: The unique identifier for the store
      publicStoreSalesPersonId:
        type: string
        title: |-
          The ID of the sales person that is associated with the public store
          This is used to populate a contact form
      useCustomCategories:
        type: boolean
        title: A flag that controls whether the store is using the old LMI categories or the new custom categories
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields should be updated in the update request
    title: Request for updating the configuration of a store
  vendastatypesFieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
