swagger: "2.0"
info:
  title: notifications/v1/api.proto
  description: |-
    # Notifications
    The Notifications APIs allows clients to interact with notifications in a variety of ways.

    ## Service Overview

    The [Notifications](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.Notifications) service is designed to have all functionality necessary for building a frontend notification stream such as the one implemented by the [Atlas Navbar](https://github.com/vendasta/atlas) throughout the platform.

    The [NotificationsAdmin](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.NotificationsAdmin) service is designed to allow callers to create, configure and manage the lifecycle of notification types. The [Notifications Admin UI](https://admin.vendasta-internal.com/notifications) uses this API to allow developers to define new notification types and configure existing ones with a UI.

    The [Unsubscribe](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.Unsubscribe) service is designed to allow clients to unsubscribe users from Notifications. Since unsubscribing from notifications needs to be functionality that is available without an authenticated user session (unsubscribe from Email link), it is housed in a separate service because of the authentication differences.

    ## Philosophy

    Notifications should be timely, actionable and descriptive but terse.

    - **Timely**: The notification service is performant enough to provide asynchronous updates in near-real time.
    - **Actionable**: Every notification should link to a workflow designed to allow the user to take action on what the notification is describing. Notifications should drive re-engagement with the software, not be reports in themselves.
    - **Descriptive but Terse**: Every notification should be no longer than a tweet that describes *what* the user is being notified about and *why*. Let the actionable workflow link fill in the details.

    ## Sending a notification

    1. Make sure a user is subscribed to a notification. This only needs to be done once per user.
    2. Trigger a notification relevant for that user.

    ### Subscriptions
    Notifications are **off by default** for users. Few notifications are truly appropriate to address every single user who uses the Vendasta platform.

    In order to receive a notification of a certain type, a user must be subscribed to that notification type. This can be done by the user manually changing their settings, or by an application calling the [subscribe](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.Notifications.Subscribe) RPC on their behalf.

    ### Triggering a notification

    Notifications can be triggered in one of two ways:
    - They can be triggered by publishing an event. This is useful if one event should trigger a notification for multiple users.
    - They can be manually provided over API using the [NotificationsProvider](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.NotificationsProvider) service.

    #### Event-Driven notifications
    Notification types that are created with a `event_type_id` defined are event-driven and notifications of this type can only be triggered by the publishing of an event with that `event_type_id`.

    #### Provided notifications
    Notifications types that are created without defining an `event_type_id` can only be triggered via an API call (see [SaveNotification](https://buf.vendastaapis.com/vendasta/vendastaapis/docs/main:notifications.v1#notifications.v1.NotificationsProvider.SaveNotification))

    This RPC can only deliver a single notification to a single user per invocation. So if you are needing to deliver a notification to multiple users, your app needs to fan out over the recipients and call this endpoint once for each.

    ## Defining a notification type
    Since we have built a [dedicated admin UI](https://admin.vendasta-internal.com/notifications) for this use case, you are unlikely to need to rely on the APIs directly.

    Use the [official developer guide](https://github.com/vendasta/notifications/blob/master/DEVELOPER_GUIDE.md) to learn more about creating, configuring, and releasing notifications using the admin UI.
  version: version not set
tags:
  - name: Notifications
  - name: Unsubscribe
consumes:
  - application/json
produces:
  - application/json
paths:
  /notifications.v1.Notifications/GetNotificationSettings:
    post:
      summary: |-
        Get a users notification settings
        This must be called with the user's authorization header, or with a specific user_id that the caller has access to.
      operationId: Notifications_GetNotificationSettings
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetNotificationSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetNotificationSettingsRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/GetNotificationTypeSettings:
    post:
      summary: Get notification type configuration for users in a specific context
      operationId: Notifications_GetNotificationTypeSettings
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetNotificationTypeSettingsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetNotificationTypeSettingsRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/ListNotificationTypes:
    post:
      summary: List all notification types that the caller has access to
      operationId: Notifications_ListNotificationTypes
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListNotificationTypesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListNotificationTypesRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/ListNotifications:
    post:
      summary: |-
        Lists a users notifications
        This must be called with the user's authorization header.
      operationId: Notifications_ListNotifications
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListNotificationsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListNotificationsRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/RegisterAppToken:
    post:
      summary: RegisterAppToken registers the mobile app token for a user to receive push notifications
      operationId: Notifications_RegisterAppToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterAppTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterAppTokenRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/Subscribe:
    post:
      summary: |-
        Subscribe a user to a notification.
        This can be called by any service on behalf of a user, or with the user's authorization header directly, or with a specific user_id that the caller has access to.
        This operation is idempotent - if a user has explicitly unsubscribed from a notification, this will have no effect.
        Creating a subscription with a narrow context (account-level) and then executing another Subscribe RPC with a wider scope will not necessarily create a new subscription, but it will update the notification settings for the user so that they now receive notifications for the wider context if possible.
      description: Use this endpoint to subscribe a user to a relevant notification type when they use your feature.
      operationId: Notifications_Subscribe
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SubscribeRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/UpdateNotificationSettings:
    post:
      summary: |-
        Update a users notification settings
        This must be called with the user's authorization header, or with a specific user_id that the caller has access to.
      operationId: Notifications_UpdateNotificationSettings
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateNotificationSettingsRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/UpdateNotificationTypeSettings:
    post:
      summary: Updates the notification types which are available for a specific user context
      operationId: Notifications_UpdateNotificationTypeSettings
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateNotificationTypeSettingsRequest'
      tags:
        - Notifications
  /notifications.v1.Notifications/UpdateNotifications:
    post:
      summary: |-
        Marks notifications as followed/viewed
        This must be called with the user's authorization header.
      operationId: Notifications_UpdateNotifications
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateNotificationsRequest'
      tags:
        - Notifications
  /notifications.v1.Unsubscribe/GetOverview:
    post:
      summary: GetOverview returns the data for the unsubscribe overview page
      operationId: Unsubscribe_GetOverview
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetOverviewResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetOverviewRequest'
      tags:
        - Unsubscribe
  /notifications.v1.Unsubscribe/Unsubscribe:
    post:
      summary: Unsubscribe a user from a notification
      operationId: Unsubscribe_Unsubscribe
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UnsubscribeRequest'
      tags:
        - Unsubscribe
definitions:
  ListNotificationsRequestFilter:
    type: object
    properties:
      medium:
        $ref: '#/definitions/v1NotificationMedium'
        title: Controls which notification medium is returned
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: All notifications will fall underneath this contextual scope except for global notifications.
  MediumConfigurationBundleConfiguration:
    type: object
    properties:
      window:
        type: string
        title: The amount of time similar notifications should be bundled together before a new bundle is created
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template that should be used when showing bundled notifications
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id for building the link for bundled notifications
  MediumConfigurationEmailConfiguration:
    type: object
    properties:
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id for building the email content of this notification type
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id for building the link for a notification
      subjectTemplate:
        $ref: '#/definitions/v1Template'
        title: The subject line for the email, this determines threading in many email systems
      from:
        $ref: '#/definitions/MediumConfigurationEmailConfigurationParticipantTemplate'
      contentType:
        $ref: '#/definitions/v1ContentType'
        title: The content type of the email body
      espId:
        type: string
        description: An identifier that has been preconfigured for use by the `email` microservice.
      sampleData:
        type: object
        description: Sample data used for previewing email notifications.
  MediumConfigurationEmailConfigurationParticipantTemplate:
    type: object
    properties:
      nameTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id that calculates the name of the email participant
      addressTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id that calculates the address of the email participant
  MediumConfigurationWebConfiguration:
    type: object
    properties:
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the content of the notification
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the link for a notification
      sampleData:
        type: object
        description: Sample data used for previewing web notifications.
  NotificationContextAccountGroup:
    type: object
    properties:
      accountGroupId:
        type: string
    description: Account Group refers to any notification within a specific account group.
  NotificationContextPartner:
    type: object
    properties:
      partnerId:
        type: string
    description: Partner refers to any notification within a specific partner.
  NotificationContextUser:
    type: object
    properties:
      iamSubjectId:
        type: string
        description: An IAM subject ID. user_id should be used instead.
      userId:
        type: string
        description: A unified IAM user id.
    description: User refers to any notification for a specific user id.
  NotificationTypeEmailParticipantTemplate:
    type: object
    properties:
      nameTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id that calculates the name of the email participant
      addressTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id that calculates the address of the email participant
  NotificationTypeSettingContextNotificationTypeSettingContextPartner:
    type: object
    properties:
      partnerId:
        type: string
      marketId:
        type: string
    title: A partner context will affect what notifications can bee seen by a user in a specific partner and market
  NotificationTypeSettingNotificationTypeSettingMediumConfiguration:
    type: object
    properties:
      medium:
        $ref: '#/definitions/v1NotificationMedium'
        description: The medium that this configuration is for. A medium should have at most a single configuration.
      enabled:
        type: boolean
        title: If this notification is enabled for the requested context
  NotificationWebNotification:
    type: object
    properties:
      body:
        type: string
  TemplateInlineTemplate:
    type: object
    properties:
      content:
        type: string
  UpdateNotificationSettingsRequestUpdateNotificationSettingsOperation:
    type: object
    properties:
      notificationTypeId:
        type: string
        title: The ID of the notification type
      notificationMedium:
        $ref: '#/definitions/v1NotificationMedium'
        title: The location where the notification will be sent
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: |-
          The context controls the scope of the notification setting. When a setting has been set, notifications will
          always use the most specific setting. For example, a user may have a setting enabled for the Partner context,
          but may have an Account Group context disabled within that partner. If there is a notification for that
          Partner and Account Group, they will not receive it because the Account Group context is more specific
          than the Partner context.
      status:
        $ref: '#/definitions/v1NotificationStatus'
        title: The status of the notification (enabled/disabled)
      propagate:
        type: boolean
        description: |-
          This indicates that this setting mutation will mutate any setting with a more specific context as well.
          For example, if the context was Partner: ABC and Market: market-1, and the mutation was to disable the
          notification, turning this flag on would cause a setting with the context ABC, market-1, AG-123 to be disabled
          as well.
  UpdateNotificationTypeSettingsRequestUpdateNotificationTypeSettingOperation:
    type: object
    properties:
      notificationTypeId:
        type: string
        title: The notification type id of the setting being updated
      context:
        $ref: '#/definitions/v1NotificationTypeSettingContext'
        description: The context indicates the group of users which will have their notifications affected by the update.
      medium:
        $ref: '#/definitions/v1NotificationMedium'
        title: Medium of the notification type being updated
      enabled:
        type: boolean
        description: Enables a notification type for users in the given context.
  UpdateNotificationsRequestOperation:
    type: object
    properties:
      notificationId:
        type: string
        title: The unique identifier of the notification
      followed:
        type: boolean
        title: Mark the notification as followed/unfollowed
      viewed:
        type: boolean
        title: Mark the notification as viewed/unviewed
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1AccessRequirement:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
      scopeIds:
        type: array
        items:
          type: string
    title: See the resource service for more detailed information
  v1ContentType:
    type: string
    enum:
      - CONTENT_TYPE_HTML
      - CONTENT_TYPE_TEXT
    default: CONTENT_TYPE_HTML
  v1GetNotificationSettingsRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: |-
          If context is provided, all of the settings returned will be applicable to that context.
          If the context is not provided, all of the user's settings will be returned across all contexts.
      userId:
        type: string
        description: A user_id to target. If no user_id is provided, the callers' authorization header is used to determine the targeted user. This may be a subject/persona id or a user id.
      partnerId:
        type: string
        title: Required only if user_id is not set
  v1GetNotificationSettingsResponse:
    type: object
    properties:
      notificationSettings:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1NotificationSetting'
  v1GetNotificationTypeSettingsRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1NotificationTypeSettingContext'
  v1GetNotificationTypeSettingsResponse:
    type: object
    properties:
      settings:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1NotificationTypeSetting'
  v1GetOverviewRequest:
    type: object
    properties:
      token:
        type: string
        title: unsubscribe token
  v1GetOverviewResponse:
    type: object
    properties:
      email:
        type: string
        title: The email of the user who is unsubscribing from a notification
      type:
        $ref: '#/definitions/v1NotificationType'
        title: The notification type information
      partnerId:
        type: string
        title: partner id
      marketId:
        type: string
        title: market id
  v1Hydrator:
    type: object
    properties:
      accountGroup:
        type: boolean
        title: |-
          New properties: `_account_group_name`, `_account_group_address`
          Required on the event schema: `account_group_id`
      salesperson:
        type: boolean
        title: |-
          New properties: `_salesperson_name`
          Required on the event schema: `salesperson_id`, (`partner_id` OR `account_group_id`)
      product:
        type: boolean
        title: |-
          New properties: `_product_name`
          Required on the event schema: `account_group_id` OR (`partner_id` AND `market_id`), `app_id`
          Optional on the event schema: `addon_id`
      partnerBranding:
        type: boolean
        title: |-
          New properties: `_branding.name`, `_branding.primary_color`, `_branding.assets`, `_branding.apps`
          Required on the event schema: (`partner_id` AND `market_id`) OR `account_group_id`
      digitalAgent:
        type: boolean
        title: |-
          New properties: `_digital_agent_name`
          Required on the event schema: `digital_agent_id`
      user:
        type: boolean
        description: |-
          New properties: `_user.first_name`, `_user.last_name`
          Required on the event schema: `user_id`
          This hydrator supports multiples, meaning if the event schema has a repeated string property `user_ids`, the hydrator will inflate a list of `_users`, in the same order that the `user_ids` were provided.
    description: |-
      Hydrators allow a notification to have access to additional attributes that are not necessarily part of the schema
      of the event they are based on. This is useful for templating business names and other human-readable data that is
      unlikely to be part of the event.

      Hydrated data is calculated at the time that the notification is saved and is not updated.

      Each hydrator requires a different set of properties to be present on the event schema in order to perform hydration.
  v1ListNotificationTypesRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: The contextual scope of the request. A User may have access to different types of notifications in the context of different partners/accounts.
      partnerId:
        type: string
  v1ListNotificationTypesResponse:
    type: object
    properties:
      types:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1NotificationType'
  v1ListNotificationsRequest:
    type: object
    properties:
      pageSize:
        type: string
        format: int64
      cursor:
        type: string
      filter:
        $ref: '#/definitions/ListNotificationsRequestFilter'
      flatten:
        type: boolean
        description: |-
          By default, notifications are returned in a bundled format when appropriate.
          Setting flatten to true forces them to be returned in an expanded, unbundled format.
      partnerId:
        type: string
  v1ListNotificationsResponse:
    type: object
    properties:
      notifications:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Notification'
      nextCursor:
        type: string
      hasMore:
        type: boolean
  v1MediumConfiguration:
    type: object
    properties:
      medium:
        $ref: '#/definitions/v1NotificationMedium'
        title: 'deprecated: The medium that this configuration is for. A medium should have at most a single configuration - use WebConfiguration or EmailConfiguration'
      templateId:
        type: string
        title: 'deprecated: The template id for building the content of this notification type on this delivery medium - use WebConfiguration'
      linkTemplateId:
        type: string
        title: 'deprecated: The template id for building the link for this delivery medium and notification type - use WebConfiguration'
      disabled:
        type: boolean
        title: A disabled medium configuration will not have notifications delivered for it
      bundleConfiguration:
        $ref: '#/definitions/MediumConfigurationBundleConfiguration'
      emailConfiguration:
        $ref: '#/definitions/MediumConfigurationEmailConfiguration'
      webConfiguration:
        $ref: '#/definitions/MediumConfigurationWebConfiguration'
  v1Notification:
    type: object
    properties:
      notificationId:
        type: string
        title: The unique identifier of the notification
      notificationTypeId:
        type: string
        title: The type of notification
      link:
        type: string
        title: An absolute URL to where the user will be directed when clicking on the notification
      followed:
        type: boolean
        title: Indicates whether the notification's link has been followed by the user
      viewed:
        type: boolean
        title: Indicates whether the notification has been viewed by the user
      created:
        type: string
        format: date-time
        title: The date that the notification was created
      web:
        $ref: '#/definitions/NotificationWebNotification'
      partnerId:
        type: string
      marketId:
        type: string
      accountGroupId:
        type: string
  v1NotificationContext:
    type: object
    properties:
      partner:
        $ref: '#/definitions/NotificationContextPartner'
      accountGroup:
        $ref: '#/definitions/NotificationContextAccountGroup'
      user:
        $ref: '#/definitions/NotificationContextUser'
    description: Notification Context defines the scope in which notifications should be interacted with.
  v1NotificationMedium:
    type: string
    enum:
      - NOTIFICATION_MEDIUM_WEB
      - NOTIFICATION_MEDIUM_EMAIL
    default: NOTIFICATION_MEDIUM_WEB
    title: The Medium that the notification will be sent to
  v1NotificationSetting:
    type: object
    properties:
      notificationTypeId:
        type: string
        title: The ID of the notification
      category:
        type: array
        items:
          type: string
        title: |-
          The notification hierarchical category with the leaf being the Display Name
          Example: [Business, Product Activations, Rejections]
      description:
        type: string
        title: Description of the notification
      notificationMedium:
        $ref: '#/definitions/v1NotificationMedium'
        title: The location where the notification will be sent
      status:
        $ref: '#/definitions/v1NotificationStatus'
        title: The status of the notification (enabled/disabled)
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: |-
          The context controls the scope of the notification setting. When a setting has been set, notifications will
          always use the most specific setting. For example, a user may have a setting enabled for the Partner context,
          but may have an Account Group context disabled within that partner. If there is a notification for that Partner
          and Account Group, they will not receive it because the Account Group context is more specific than the Partner
          context.
  v1NotificationStatus:
    type: string
    enum:
      - NOTIFICATION_STATUS_ENABLED
      - NOTIFICATION_STATUS_DISABLED
    default: NOTIFICATION_STATUS_ENABLED
    title: The status of the notification setting
  v1NotificationType:
    type: object
    properties:
      notificationTypeId:
        type: string
        title: The unique identifier of the notification type
      category:
        type: array
        items:
          type: string
        title: |-
          The notification hierarchical category with the leaf being the Display Name
          Example: [Business, Product Activations, Rejections]
      description:
        type: string
        description: Description of the notification. Displayed to users.
      name:
        type: string
        description: The user-facing name of the notification. Should describe the notification in as few words as possible.
      eventTypeId:
        type: string
        title: The unique identifier of the event this notification type is based on
      configurations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1MediumConfiguration'
        title: |-
          Deprecated: Use the web, web_bundle and email configurations on the base message
          Separate configurations for each kind of delivery medium
      domainId:
        type: string
        title: Identifier for the domain that this notification type's links will be built relative to
      hydrators:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Hydrator'
        title: Hydrators required for this notification type
      accessRequirements:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1AccessRequirement'
        title: Access requirements needed to subscribe to or receive notifications of this type
      web:
        $ref: '#/definitions/v1NotificationTypeWeb'
        title: Web medium configuration
      webBundle:
        $ref: '#/definitions/v1NotificationTypeWebBundle'
        title: Web bundle medium configuration
      email:
        $ref: '#/definitions/v1NotificationTypeEmail'
        title: Email configuration
      personaAccessRequirements:
        type: array
        items:
          $ref: '#/definitions/v1PersonaType'
        description: |-
          In addition to the access_requirements, you can set general persona types that have access to this
          notification type.
      featureFlagId:
        type: string
        description: |-
          The feature flag identifier which controls who will receive notifications when in development.

          If a the feature flag is set, notifications will only be sent if the context of the notification,
          i.e. partner and market, have the feature enabled.

          This type will also be hidden if the partner and market does not have the feature enabled when
          looking up the types to display settings.

          This can be empty.
      locales:
        type: array
        items:
          type: string
        title: The locales supported by this notification type
  v1NotificationTypeEmail:
    type: object
    properties:
      enabled:
        type: boolean
        title: Enable email
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id for building the email content of this notification type
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template id for building the link for a notification
      subjectTemplate:
        $ref: '#/definitions/v1Template'
        title: The subject line for the email, this determines threading in many email systems
      from:
        $ref: '#/definitions/NotificationTypeEmailParticipantTemplate'
      contentType:
        $ref: '#/definitions/v1ContentType'
        title: The content type of the email body
      espId:
        type: string
        description: An identifier that has been preconfigured for use by the `email` microservice.
      sampleData:
        type: object
        description: Sample data used for previewing email notifications.
  v1NotificationTypeSetting:
    type: object
    properties:
      notificationTypeId:
        type: string
      configurations:
        type: array
        items:
          type: object
          $ref: '#/definitions/NotificationTypeSettingNotificationTypeSettingMediumConfiguration'
  v1NotificationTypeSettingContext:
    type: object
    properties:
      partner:
        $ref: '#/definitions/NotificationTypeSettingContextNotificationTypeSettingContextPartner'
  v1NotificationTypeWeb:
    type: object
    properties:
      enabled:
        type: boolean
        title: Enable the web configuration
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the content of the notification
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the link for a notification
      sampleData:
        type: object
        description: Sample data used for previewing web notifications.
  v1NotificationTypeWebBundle:
    type: object
    properties:
      enabled:
        type: boolean
        title: Enable the web bundle
      window:
        type: string
        title: Bundle window size
      contentTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the content of the notification
      linkTemplate:
        $ref: '#/definitions/v1Template'
        title: The template for building the link for a notification
      sampleData:
        type: object
        description: Sample data used for previewing web notifications.
  v1PersonaType:
    type: string
    enum:
      - PERSONA_TYPE_PARTNER
      - PERSONA_TYPE_SALES_PERSON
      - PERSONA_TYPE_DIGITAL_AGENT
      - PERSONA_TYPE_SMB
    default: PERSONA_TYPE_PARTNER
  v1RegisterAppTokenRequest:
    type: object
    properties:
      registrationToken:
        type: string
        title: The registration token to register the mobile app
      userId:
        type: string
        title: The user id to register the token for
      partnerId:
        type: string
        title: The partner id the user is namespaced in
      deviceId:
        type: string
        title: The device id the device the app is downloaded on
  v1RegisterAppTokenResponse:
    type: object
  v1Resource:
    type: object
    properties:
      id:
        type: string
  v1SubscribeRequest:
    type: object
    properties:
      notificationTypeId:
        type: string
        description: The notification type id to subscribe the user to. This is required.
      context:
        $ref: '#/definitions/v1NotificationContext'
        description: The contextual scope of the subscription. You can start by subscribing the user to a specific account or an entire pid. They will be able to adjust the scope according to their preferences at any time. Note that if they do not have access to the specific context, the request will be rejected.
      userId:
        type: string
        description: A user_id to target. This may be a subject/persona id or a user id.
      notificationMedium:
        type: array
        items:
          $ref: '#/definitions/v1NotificationMedium'
        description: The mediums to subscribe the user to. If a medium is specified that does not exist for the given notification type, subscribing to that medium will be treated as a no-op.
  v1Template:
    type: object
    properties:
      id:
        type: string
        title: the template_id of an existing template stored in the templates microservice
      inline:
        $ref: '#/definitions/TemplateInlineTemplate'
        title: an template whose content is defined in-line with this request
  v1UnsubscribeRequest:
    type: object
    properties:
      token:
        type: string
        title: unsubscribe token
  v1UpdateNotificationSettingsRequest:
    type: object
    properties:
      notificationSettings:
        type: array
        items:
          type: object
          $ref: '#/definitions/UpdateNotificationSettingsRequestUpdateNotificationSettingsOperation'
      userId:
        type: string
        description: A user_id to target. If no user_id is provided, the callers' authorization header is used to determine the targeted user. This may be a subject/persona id or a user id.
      partnerId:
        type: string
        title: Required only if user_id is not set
  v1UpdateNotificationTypeSettingsRequest:
    type: object
    properties:
      operations:
        type: array
        items:
          type: object
          $ref: '#/definitions/UpdateNotificationTypeSettingsRequestUpdateNotificationTypeSettingOperation'
  v1UpdateNotificationsRequest:
    type: object
    properties:
      operations:
        type: array
        items:
          type: object
          $ref: '#/definitions/UpdateNotificationsRequestOperation'
      partnerId:
        type: string
