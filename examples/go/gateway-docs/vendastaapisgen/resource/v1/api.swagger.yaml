swagger: "2.0"
info:
  title: resource/v1/api.proto
  version: version not set
tags:
  - name: ResourceTypes
  - name: Scopes
  - name: Resources
  - name: AttributeSets
  - name: Attributes
  - name: Roles
  - name: Bindings
  - name: UserAccess
consumes:
  - application/json
produces:
  - application/json
paths:
  /resource.v1.AttributeSets/CreateAttributeSet:
    post:
      summary: Create new Attribute Set
      operationId: AttributeSets_CreateAttributeSet
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateAttributeSetRequest'
      tags:
        - AttributeSets
  /resource.v1.AttributeSets/DeleteAttributeSet:
    post:
      summary: Deletes an existing Attribute Set
      operationId: AttributeSets_DeleteAttributeSet
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteAttributeSetRequest'
      tags:
        - AttributeSets
  /resource.v1.AttributeSets/UpdateAttributeSet:
    post:
      summary: Updates an existing Attribute Set
      operationId: AttributeSets_UpdateAttributeSet
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateAttributeSetRequest'
      tags:
        - AttributeSets
  /resource.v1.Attributes/DeleteAttributes:
    post:
      summary: Deletes attributes from the given resource
      operationId: Attributes_DeleteAttributes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteAttributesRequest'
      tags:
        - Attributes
  /resource.v1.Attributes/SetAttributes:
    post:
      summary: Sets Attributes on the given resource
      operationId: Attributes_SetAttributes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1SetAttributesRequest'
      tags:
        - Attributes
  /resource.v1.Bindings/CreateBinding:
    post:
      summary: Creates a new Binding between a role, user(s) and resource(s)
      operationId: Bindings_CreateBinding
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateBindingRequest'
      tags:
        - Bindings
  /resource.v1.Bindings/DeleteBinding:
    post:
      summary: Deletes an existing Binding
      operationId: Bindings_DeleteBinding
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteBindingRequest'
      tags:
        - Bindings
  /resource.v1.Bindings/GetBinding:
    post:
      summary: Gets an existing Binding
      operationId: Bindings_GetBinding
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetBindingResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetBindingRequest'
      tags:
        - Bindings
  /resource.v1.Bindings/UpdateBinding:
    post:
      summary: Updates an existing Binding
      operationId: Bindings_UpdateBinding
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateBindingRequest'
      tags:
        - Bindings
  /resource.v1.ResourceTypes/CreateResourceType:
    post:
      summary: Creates a new Resource Type
      operationId: ResourceTypes_CreateResourceType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateResourceTypeRequest'
      tags:
        - ResourceTypes
  /resource.v1.ResourceTypes/DeleteResourceType:
    post:
      summary: Delete a Resource Type
      operationId: ResourceTypes_DeleteResourceType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteResourceTypeRequest'
      tags:
        - ResourceTypes
  /resource.v1.ResourceTypes/UpdateResourceType:
    post:
      summary: Updates an existing Resource Type
      operationId: ResourceTypes_UpdateResourceType
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateResourceTypeRequest'
      tags:
        - ResourceTypes
  /resource.v1.Resources/CreateResource:
    post:
      summary: Creates a new Resource
      operationId: Resources_CreateResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateResourceRequest'
      tags:
        - Resources
  /resource.v1.Resources/DeleteResource:
    post:
      summary: Deletes an existing Resource
      operationId: Resources_DeleteResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteResourceRequest'
      tags:
        - Resources
  /resource.v1.Resources/QueryResources:
    post:
      summary: Queries resources
      operationId: Resources_QueryResources
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/v1HydratedResource'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of v1HydratedResource
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1QueryResourcesRequest'
      tags:
        - Resources
  /resource.v1.Resources/UpdateResource:
    post:
      summary: Updates an existing Resource
      operationId: Resources_UpdateResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateResourceRequest'
      tags:
        - Resources
  /resource.v1.Roles/CreateRole:
    post:
      summary: Creates creates a new role
      operationId: Roles_CreateRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateRoleRequest'
      tags:
        - Roles
  /resource.v1.Roles/DeleteRole:
    post:
      summary: Deletes an existing role
      operationId: Roles_DeleteRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteRoleRequest'
      tags:
        - Roles
  /resource.v1.Roles/UpdateRole:
    post:
      summary: Updates an existing Role
      operationId: Roles_UpdateRole
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateRoleRequest'
      tags:
        - Roles
  /resource.v1.Scopes/CreateScopes:
    post:
      summary: Creates new scopes
      operationId: Scopes_CreateScopes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateScopesRequest'
      tags:
        - Scopes
  /resource.v1.Scopes/DeleteScopes:
    post:
      summary: Deletes existing scopes
      operationId: Scopes_DeleteScopes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteScopesRequest'
      tags:
        - Scopes
  /resource.v1.Scopes/UpdateScopes:
    post:
      summary: Updates existing scopes
      operationId: Scopes_UpdateScopes
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateScopesRequest'
      tags:
        - Scopes
  /resource.v1.UserAccess/ExplainUserHasAccess:
    post:
      summary: Determines which policies were evaluated, and the resulting scopes available from each evaluation
      operationId: UserAccess_ExplainUserHasAccess
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ExplainUserHasAccessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UserHasAccessRequest'
      tags:
        - UserAccess
  /resource.v1.UserAccess/HasAccess:
    post:
      summary: Determines whether the caller has access to the given permissions for the given resource
      operationId: UserAccess_HasAccess
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HasAccessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1HasAccessRequest'
      tags:
        - UserAccess
  /resource.v1.UserAccess/ListPermissions:
    post:
      summary: Lists the callers available permissions for the given resource id
      operationId: UserAccess_ListPermissions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListPermissionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ListPermissionsRequest'
      tags:
        - UserAccess
  /resource.v1.UserAccess/UserHasAccess:
    post:
      summary: |-
        Determines whether the specified user has access to the given permissions for the given resource
        Note: This RPC requires that the caller has permissions to check on behalf of the given user
      operationId: UserAccess_UserHasAccess
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HasAccessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UserHasAccessRequest'
      tags:
        - UserAccess
definitions:
  PropertyPIITag:
    type: string
    enum:
      - PROPERTY_PII_TAG_CLEAN
      - PROPERTY_PII_TAG_PII
      - PROPERTY_PII_TAG_PD
    default: PROPERTY_PII_TAG_CLEAN
    description: |-
      PIITag defines potential PII tags.

       - PROPERTY_PII_TAG_CLEAN: clean means the data is not PII or PD.
       - PROPERTY_PII_TAG_PII: PII means Personally Identifiable Information. It is information that can be used to retrieve personal data, such as IAM user ID.
       - PROPERTY_PII_TAG_PD: PD means personal data, such as name, email and address. They are sensitive data we need to protect in our system.
  PropertyType:
    type: string
    enum:
      - PROPERTY_TYPE_STRING
      - PROPERTY_TYPE_INT64
      - PROPERTY_TYPE_DOUBLE
      - PROPERTY_TYPE_BOOL
      - PROPERTY_TYPE_TIMESTAMP
      - PROPERTY_TYPE_GEOPOINT
      - PROPERTY_TYPE_STRUCT
      - PROPERTY_TYPE_BYTES
    default: PROPERTY_TYPE_STRING
  ScopeConfigDenyAll:
    type: object
    title: Indicates all scopes should be denied at this level
  ScopeConfigGrantAll:
    type: object
    title: Indicates all scopes should be granted at this level (other levels can override this)
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  resourcev1ScopeSet:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: string
    title: A set of scopes
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1AttributeSet:
    type: object
    properties:
      id:
        $ref: '#/definitions/v1AttributeSetIdentifier'
        title: Attribute Set ID
      resource:
        $ref: '#/definitions/v1ResourceType'
        title: the resource name
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        title: the schema of the fields
      displayName:
        type: string
        title: The display name of the attribute set
    description: |-
      An AttributeSet is a child of a Resource. It defines a Schema of a list of attributes that
      can be added onto each individual resource.
  v1AttributeSetIdentifier:
    type: object
    properties:
      id:
        type: string
        description: |-
          Id of the Attribute Set. This must be globally unique.

          Follows the restful identifier semantics.

          µService naming would be: `application/brands` or might have additional components if necessary
    title: Identifier of an Attribute Set
  v1Binding:
    type: object
    properties:
      id:
        type: string
        description: Can optionally be provided, otherwise an id will be generated for you. Must be globally unique.
      parentResource:
        $ref: '#/definitions/v1Resource'
        title: The parent resource this binding is attached to
      userId:
        type: string
        title: The User ID this policy is associated to
      matchingUsers:
        $ref: '#/definitions/v1FilterAttributes'
        title: Matches resources by attributes on a resource
      resource:
        $ref: '#/definitions/v1Resource'
        title: A specific resource
      matchingResources:
        $ref: '#/definitions/v1FilterAttributes'
        title: Matches resources by attributes on a resource
      scopeConfig:
        $ref: '#/definitions/v1ScopeConfig'
        title: Scopes being set by the binding
      roleId:
        type: string
        title: Permissions inherited from a role
      policies:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Policy'
    description: A Binding describes for a set of user(s) and set of resource(s), what set of permissions they have.
  v1CreateAttributeSetRequest:
    type: object
    properties:
      attributeType:
        $ref: '#/definitions/v1AttributeSet'
        title: Attribute Set to create
    title: Create Attribute Set with a set of fields and their schemas
  v1CreateBindingRequest:
    type: object
    properties:
      binding:
        $ref: '#/definitions/v1Binding'
        title: Binding to create
    title: Request message for Resources.CreateBinding
  v1CreateResourceRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: The resource type this resource will be created under
      data:
        type: object
        description: |-
          The data of the resource. This information should only contain information necessary to evaluate the
          registered policies.
      version:
        type: string
        format: int64
        title: Initial version on create
    title: Request message for Resources.CreateResource
  v1CreateResourceTypeRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: Resource type
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        title: Schema of the properties on the resource type
      resourceKind:
        $ref: '#/definitions/v1ResourceKind'
        title: The kind of resource
    title: Request message for Resources.CreateResourceType
  v1CreateRoleRequest:
    type: object
    properties:
      role:
        $ref: '#/definitions/v1Role'
        title: The Role to create
    title: Request message for Resources.CreateRole
  v1CreateScopesRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        description: The resource type that this scope is associated with.
      scopes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Scope'
        title: Set of scopes available to this resource
    title: Request message for Resources.CreateScopes
  v1DeleteAttributeSetRequest:
    type: object
    properties:
      id:
        $ref: '#/definitions/v1AttributeSetIdentifier'
        title: Attribute Set ID
  v1DeleteAttributesRequest:
    type: object
    properties:
      id:
        $ref: '#/definitions/v1AttributeSetIdentifier'
        title: Attribute Set ID
      resource:
        $ref: '#/definitions/v1Resource'
        title: ID of the resource
  v1DeleteBindingRequest:
    type: object
    properties:
      bindingId:
        type: string
        title: Binding to delete
    title: Request message for Resources.DeleteBinding
  v1DeleteResourceRequest:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        title: Resource to delete
    title: Request message for Resources.DeleteResource
  v1DeleteResourceTypeRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: Resource type
  v1DeleteRoleRequest:
    type: object
    properties:
      roleId:
        type: string
        title: The Role to delete
      resource:
        $ref: '#/definitions/v1Resource'
        title: The resource the Role is underneath
    title: Request message for Resources.DeleteRole
  v1DeleteScopesRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        description: The resource type that this scope is associated with.
      scopeIds:
        type: array
        items:
          type: string
        title: Scopes to delete
  v1EvaluationStepResult:
    type: object
    properties:
      evaluatedPolicy:
        $ref: '#/definitions/v1Policy'
        title: The policy evaluated for this step
      scopes:
        $ref: '#/definitions/resourcev1ScopeSet'
        title: The set of scopes available for this requested resource at this particular evaluation step
    title: EvaluationStepResult describes the resulting scopes available from a step in the policy evaluation process
  v1ExplainUserHasAccessResponse:
    type: object
    properties:
      resourceEvaluationResult:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ResourceEvaluationResult'
        title: Evaluation result for each resource requested
    title: Response message for providing an explanation of why a user receives a HasAccess response result
  v1FilterAttributes:
    type: object
    properties:
      attributeSetId:
        $ref: '#/definitions/v1AttributeSetIdentifier'
        title: Attribute Set id
      filter:
        $ref: '#/definitions/vendastatypesMatcherNode'
        title: Matches resources by a specific criteria
    title: FilterAttributes supports filtering on attributes of a resource
  v1GetBindingRequest:
    type: object
    properties:
      bindingId:
        type: string
        title: Binding to get
    title: Request message for Resources.GetBinding
  v1GetBindingResponse:
    type: object
    properties:
      binding:
        $ref: '#/definitions/v1Binding'
        title: Binding retrieved
    title: Response message for Resources.GetBinding
  v1HasAccessRequest:
    type: object
    properties:
      resource:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Resource'
        title: The resource being requested access to
      scopeIds:
        type: array
        items:
          type: string
        title: The scopes being requested access to
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields come back on the response
    title: Request message for Resources.HasAccess
  v1HasAccessResponse:
    type: object
    properties:
      scopeIds:
        type: array
        items:
          type: string
        description: |-
          Deprecated
          The list of scopes ids that the caller has access to. If there were many resources requested, this represents
          the union of available scopes across all requested resources.
      unionScopes:
        $ref: '#/definitions/resourcev1ScopeSet'
        description: The set of scopes that are available across all requested resources.
      scopes:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcev1ScopeSet'
        description: The set of scopes available for each requested resource.
    title: Response message for Resources.HasAccess
  v1HydratedResource:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        title: The resource id
      data:
        type: object
        description: The data of the resource.
      version:
        type: string
        format: int64
        title: Version of the resource
    title: A resource that has been hydrated with attributes that were chosen
  v1ListPermissionsRequest:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        title: The ID of the resource
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields come back on the response
      pageSize:
        type: string
        format: int64
        title: Number of results to include in the response
      cursor:
        type: string
        description: The previous next_cursor from [ListPermissionsResponse], or "" if it is the first call.
    title: Request message for Resources.ListPermissions
  v1ListPermissionsResponse:
    type: object
    properties:
      permissions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Permission'
      nextCursor:
        type: string
        title: To be provided to ListPermissions on a subsequent call to get the next page of results
    title: Request message for Resources.ListPermissions
  v1Permission:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        title: The resource id that this permission was granted for
      scopes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Scope'
        title: the set of scopes granted
    title: The list of available scopes for the specified resource
  v1Policy:
    type: object
    properties:
      userId:
        type: string
        title: The User ID this policy is associated to
      resource:
        $ref: '#/definitions/v1Resource'
        title: A specific resource
      matchingResources:
        $ref: '#/definitions/v1FilterAttributes'
        title: |-
          Deprecated
          Matches resources by attributes on a resource
      resourceFilter:
        $ref: '#/definitions/v1ResourceFilter'
        title: Matches resources with a filter
      scopeConfig:
        $ref: '#/definitions/v1ScopeConfig'
        title: Scopes being set by the binding
      roleId:
        type: string
        title: Permissions inherited from a role
      bindingId:
        type: string
        title: The id of the binding that this policy is within
    title: Policy grants scopes to specific user(s) for a set of resources(s)
  v1QueryResourcesRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: The resource type to query
      filter:
        $ref: '#/definitions/vendastatypesMatcherNode'
        title: The filter to run
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields to select
      limit:
        type: string
        format: int64
        title: The number of results to return
    title: Request message for Resources.QueryResource
  v1Resource:
    type: object
    properties:
      id:
        type: string
        title: |-
          ID of the resource. If the resource type was an AccountGroup, the Resource would be a specific
          account group and the id would be /partner/ABC/accountGroup/AG-J7B4AP
    description: Resource represents an instance of a ResourceType.
  v1ResourceEvaluationResult:
    type: object
    properties:
      evaluatedPolicies:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Policy'
        title: List of the policies that were evaluated for the given user
      evaluationStepResults:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1EvaluationStepResult'
        title: List of the evaluation step results, in order of their evaluation
      scopes:
        $ref: '#/definitions/resourcev1ScopeSet'
        title: The final set of allowed scopes for this requested resource
    title: ResourceEvaluationResult describes the result of each requested resource's evaluation
  v1ResourceFilter:
    type: object
    properties:
      resourceSelector:
        $ref: '#/definitions/v1ResourceSelector'
        title: Selects which resource types to filter
      filterAttributes:
        $ref: '#/definitions/v1FilterAttributes'
        title: The filter to narrow down the resources to
    title: Filters resource by resource hierachy and attributes on the resources
  v1ResourceKind:
    type: string
    enum:
      - RESOURCE_KIND_RESOURCE
      - RESOURCE_KIND_USER
    default: RESOURCE_KIND_RESOURCE
    title: |-
      - RESOURCE_KIND_RESOURCE: The default resource kind
       - RESOURCE_KIND_USER: Indicates the resource is a user
  v1ResourceSelector:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: Selects the given resource type
      children:
        $ref: '#/definitions/v1ResourceType'
        title: Selects the children of the specified resource types
    title: ResourceSelector allows controlling which resource types to look at
  v1ResourceType:
    type: object
    properties:
      name:
        type: string
        description: |-
          The full restful name of the resource type. For example an Account Group resource:
          `/partner/*/accountGroup/*`.
          See [Resource
          Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
          for more information.

          In the account group example, Account Group is a child resource of a Partner resource, and the Partner resource
          must exist prior to being registered.
    description: |-
      ResourceType represents a resource type within the Vendasta platform. Examples are:
      Partner, Market, Account Group, Executive Report, Product Activations, Brands, Products, Packages, etc...
  v1Role:
    type: object
    properties:
      id:
        type: string
        title: Can optionally be provided, otherwise an ID will be generated for you
      resource:
        $ref: '#/definitions/v1Resource'
        title: The resource the Role is underneath
      scopeConfig:
        $ref: '#/definitions/v1ScopeConfig'
        title: Scopes being set by the role
  v1Scope:
    type: object
    properties:
      id:
        type: string
        title: 'Unique ID of the scope. For example: partner.accountGroup.editBusinessProfile'
      displayName:
        type: string
        title: 'Display name of the scope. For example: Edit Business Profile'
    description: |-
      Scope is associated to 1 or many resources. They describe an action that can be taken against that specific
      resource. A scope can be granted by a higher resource level, if applicable.
  v1ScopeConfig:
    type: object
    properties:
      blackList:
        $ref: '#/definitions/v1ScopeConfigScopeSet'
        title: Scopes explicitly removed
      whiteList:
        $ref: '#/definitions/v1ScopeConfigScopeSet'
        title: Scopes explicitly added
      grantAll:
        $ref: '#/definitions/ScopeConfigGrantAll'
        title: All scopes granted
      denyAll:
        $ref: '#/definitions/ScopeConfigDenyAll'
        title: All scopes denied
      canGrant:
        type: boolean
        title: Indicates if the user is given rights to grant equal scopes to other users
    title: The set of available scopes
  v1ScopeConfigScopeSet:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: string
    title: A set of scopes
  v1SetAttributesRequest:
    type: object
    properties:
      id:
        $ref: '#/definitions/v1AttributeSetIdentifier'
        title: Attribute Set ID
      resource:
        $ref: '#/definitions/v1Resource'
        title: ID of the resource
      data:
        type: object
        title: Data of the attributes
      version:
        type: string
        format: int64
        title: Version to manage concurrency control
    title: Set Attributes attaches key-values to a resource (the attribute set must be created on the resource first)
  v1UpdateAttributeSetRequest:
    type: object
    properties:
      attributeType:
        $ref: '#/definitions/v1AttributeSet'
        title: Attribute Set to update
      fieldMask:
        $ref: '#/definitions/vendastatypesFieldMask'
        title: Controls which fields to update
  v1UpdateBindingRequest:
    type: object
    properties:
      binding:
        $ref: '#/definitions/v1Binding'
        title: Binding to update
    title: Request message for Resources.UpdateBinding
  v1UpdateResourceRequest:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        title: Resource to edit
      data:
        type: object
        title: Data to update (pieces of the id may not be updated)
      version:
        type: string
        format: int64
        title: Version to manage concurrency control
    title: Request message for Resources.UpdateResource
  v1UpdateResourceTypeRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        title: Resource type
      schema:
        $ref: '#/definitions/vendastatypesSchema'
        title: Schema of the properties on the resource type
    title: Request message for Resources.UpdateResourceType
  v1UpdateRoleRequest:
    type: object
    properties:
      role:
        $ref: '#/definitions/v1Role'
        title: The Role to update
    title: Request message for Resources.UpdateRole
  v1UpdateScopesRequest:
    type: object
    properties:
      resourceType:
        $ref: '#/definitions/v1ResourceType'
        description: The resource type that this scope is associated with.
      scopes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Scope'
        title: Set of scopes available to this resource
  v1UserHasAccessRequest:
    type: object
    properties:
      hasAccess:
        $ref: '#/definitions/v1HasAccessRequest'
        title: The request to make on behalf of the given user
      id:
        type: string
      email:
        type: string
      iamJwt:
        type: string
    title: Request message for Resources.UserHasAccessRequest
  vendastatypesBooleanOperator:
    type: string
    enum:
      - BOOLEAN_OPERATOR_AND
      - BOOLEAN_OPERATOR_OR
    default: BOOLEAN_OPERATOR_AND
  vendastatypesFieldMask:
    type: object
    properties:
      paths:
        type: array
        items:
          type: string
        description: The set of field mask paths.
    description: |-
      paths: "f.a"
          paths: "f.b.d"

      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:

          f {
            a : 22
            b {
              d : 1
              x : 2
            }
            y : 13
          }
          z: 8

      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):


          f {
            a : 22
            b {
              d : 1
            }
          }

      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, the existing
      repeated values in the target resource will be overwritten by the new values.
      Note that a repeated field is only allowed in the last position of a `paths`
      string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then the existing sub-message in the target resource is
      overwritten. Given the target message:

          f {
            b {
              d : 1
              x : 2
            }
            c : 1
          }

      And an update message:

          f {
            b {
              d : 10
            }
          }

      then if the field mask is:

       paths: "f.b"

      then the result will be:

          f {
            b {
              d : 10
            }
            c : 1
          }

      However, if the update mask was:

       paths: "f.b.d"

      then the result would be:

          f {
            b {
              d : 10
              x : 2
            }
            c : 1
          }

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:

          message Profile {
            User user = 1;
            Photo photo = 2;
          }
          message User {
            string display_name = 1;
            string address = 2;
          }

      In proto a field mask for `Profile` may look as such:

          mask {
            paths: "user.display_name"
            paths: "photo"
          }

      In JSON, the same mask is represented as below:

          {
            mask: "user.displayName,photo"
          }

      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:

          message SampleMessage {
            oneof test_oneof {
              string name = 4;
              SubMessage sub_message = 9;
            }
          }

      The field mask can be:

          mask {
            paths: "name"
          }

      Or:

          mask {
            paths: "sub_message"
          }

      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.
    title: '`FieldMask` represents a set of symbolic field paths, for example:'
  vendastatypesMatcherNode:
    type: object
    properties:
      equal:
        $ref: '#/definitions/vendastatypesPropertyValue'
        description: Validates that a property matches a specific value.
      operator:
        $ref: '#/definitions/vendastatypesOperator'
        description: Combines multiple operations with AND or OR operators.
      not:
        $ref: '#/definitions/vendastatypesMatcherNode'
        description: Not returns the opposite boolean value of the operator provided.
      missing:
        $ref: '#/definitions/vendastatypesPropertyName'
        description: |-
          Matches results which are not missing a specific property. This will not match out items which have the
          property set to a null value. The "null" operator can be used to match for properties which have null
          values.
      "null":
        $ref: '#/definitions/vendastatypesPropertyName'
        description: |-
          Matches results which do not have the specified property set to the null value. This will also
          include events that are missing the property entirely.
      subset:
        $ref: '#/definitions/vendastatypesPropertyValue'
        description: |-
          Items may include repeated values for a specific property. It may be useful to receive items which have
          a property in the list.

          For example, an item might have some attributes describing a category that looks like:
          ['Automotive', 'Car Dealers', 'Auto Repair']

          Subscribers may only care about Auto Repair. In this case they can provide "Auto Repair" as the value to
          only receive those events. If the Subscriber only wants events with "Auto Repair" and "Car Dealers"
          the value can be defined as ['Auto Repair', 'Car Dealers']. If you wish to receive events where it's
          "Auto Repair" OR "Car Dealers", you may use two subset operation and join them with an OR operator.

          Order does not matter when checking if a list is a subset of an item's repeated property.
      prefix:
        $ref: '#/definitions/vendastatypesPropertyValue'
        title: Validates that a property has a given prefix
  vendastatypesOperator:
    type: object
    properties:
      operator:
        $ref: '#/definitions/vendastatypesBooleanOperator'
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/vendastatypesMatcherNode'
  vendastatypesProperty:
    type: object
    properties:
      name:
        type: string
        title: |-
          Unique identifier for this property. Must be in snake case format.
          Example(s): account_group_id, listing_id, company_name
      type:
        $ref: '#/definitions/PropertyType'
        title: Type for this property
      repeated:
        type: boolean
        description: Indicates if the field is repeated.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vendastatypesProperty'
        description: |-
          Can only be specified if the Type supplied is a STRUCT.
          Is the schema of the structured property.
      piiTag:
        $ref: '#/definitions/PropertyPIITag'
      description:
        type: string
        title: Description of this property
    title: Property defines a single property for a schema
  vendastatypesPropertyName:
    type: object
    properties:
      property:
        type: string
  vendastatypesPropertyValue:
    type: object
    properties:
      property:
        type: string
      value: {}
  vendastatypesSchema:
    type: object
    properties:
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vendastatypesProperty'
    title: Schema describes the structure of data in a storage-agnostic way
