swagger: "2.0"
info:
  title: tesseract/v1/admin.proto
  version: version not set
tags:
  - name: Admin
consumes:
  - application/json
produces:
  - application/json
paths:
  /tesseract.v1.Admin/CreateKind:
    post:
      operationId: Admin_CreateKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateKindRequest'
      tags:
        - Admin
  /tesseract.v1.Admin/CreateNamespace:
    post:
      operationId: Admin_CreateNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateNamespaceRequest'
      tags:
        - Admin
  /tesseract.v1.Admin/DeleteKind:
    post:
      operationId: Admin_DeleteKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteKindRequest'
      tags:
        - Admin
  /tesseract.v1.Admin/DeleteNamespace:
    post:
      operationId: Admin_DeleteNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1DeleteNamespaceRequest'
      tags:
        - Admin
  /tesseract.v1.Admin/GetKind:
    post:
      operationId: Admin_GetKind
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetKindResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1GetKindRequest'
      tags:
        - Admin
  /tesseract.v1.Admin/UpdateKind:
    post:
      operationId: Admin_UpdateKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateKindRequest'
      tags:
        - Admin
definitions:
  KindDistributedTable:
    type: object
    properties:
      distributionColumn:
        type: string
      colocateWithNamespace:
        type: string
        title: The namespace of the table to explicitly colocate with
      colocateWithKind:
        type: string
        title: The kind of the table to explicitly colocate with
    title: |-
      DistributedTables are distributed based upon the column specified, optionally explicitly colocated with another
      tesseract table to reduce network overhead when these tables are utilized together
  KindLastModifiedConcurrencyControl:
    type: object
    properties:
      lastModifiedField:
        type: string
    title: Provides concurrency control through a timestamp based approach
  KindLocalTable:
    type: object
    title: LocalTables are ordinary tables that do not participate in the distributed architecture
  KindReferenceTable:
    type: object
    title: |-
      ReferenceTables are tables which are not distributed, but rather replicated everywhere, making them available
      to participate in queries with distributed tables without network overhead
  KindVersionConcurrencyControl:
    type: object
    properties:
      versionField:
        type: string
    title: Provides concurrency control through a monotonically increasing version number
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  tesseractv1Property:
    type: object
    properties:
      name:
        type: string
        title: |-
          Unique identifier for this property. Must be in snake case format.
          Example(s): account_group_id, listing_id, company_name
      type:
        $ref: '#/definitions/tesseractv1PropertyType'
        title: Type for this property
      repeated:
        type: boolean
        description: Indicates if the field is repeated.
      length:
        type: string
        format: int64
        description: |-
          Sets the max length of a string property, typically used to ensure your primary key fits within the bounds of
          the 768 limit of your primary key.
  tesseractv1PropertyType:
    type: string
    enum:
      - STRING
      - INT64
      - DOUBLE
      - BOOL
      - TIMESTAMP
      - GEOPOINT
      - TREE
    default: STRING
    title: |-
      - TREE: Tree type properties contain labels delimited by periods, representing a path in a tree structure
      See https://www.postgresql.org/docs/9.1/static/ltree.html for more information
  v1CreateKindRequest:
    type: object
    properties:
      kind:
        $ref: '#/definitions/v1Kind'
  v1CreateNamespaceRequest:
    type: object
    properties:
      namespace:
        type: string
        description: |-
          Unique namespace id unique to your project/microservice. Must be in lower snake case format.
          Example(s): repcore, partner-central, central-identity-service, marketing-automation.
  v1DeleteKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        title: Id of an existing kind
  v1DeleteNamespaceRequest:
    type: object
    properties:
      namespace:
        type: string
        description: Id of an existing namespace.
  v1GetKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        title: Id of an existing kind
  v1GetKindResponse:
    type: object
    properties:
      kind:
        $ref: '#/definitions/v1Kind'
  v1Kind:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        description: |-
          Unique name of the kind that are creating. Must be in capital camel case format.
          Example(s): AccountGroup, Partner, Review, Listing.
      primaryKey:
        type: array
        items:
          type: string
        description: |-
          List of fields that compose of the primary key. The order is important as it is used for building keysets,
          as well as lookups can be done by the leading pieces of a keyset.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/tesseractv1Property'
        description: |-
          Schema for the kind. Indexing of any entities into this namespace/kind requires that a type has been set
          for every field being indexed.  No inference is done and explicit types are required. Fields also are not
          able to have their types changed or deleted, and only additive changes are allowed once a kind has been created.
      versionConcurrencyControl:
        $ref: '#/definitions/KindVersionConcurrencyControl'
      lastModifiedConcurrencyControl:
        $ref: '#/definitions/KindLastModifiedConcurrencyControl'
      distributedTable:
        $ref: '#/definitions/KindDistributedTable'
      referenceTable:
        $ref: '#/definitions/KindReferenceTable'
      localTable:
        $ref: '#/definitions/KindLocalTable'
  v1UpdateKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        description: 'TODO: Fill in details'
        title: Id of an existing kind
