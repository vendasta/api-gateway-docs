swagger: "2.0"
info:
  title: vstorepb/admin.proto
  version: version not set
tags:
  - name: VStoreAdmin
consumes:
  - application/json
produces:
  - application/json
paths:
  /vstorepb.VStoreAdmin/CreateKind:
    post:
      operationId: VStoreAdmin_CreateKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbCreateKindRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/CreateNamespace:
    post:
      operationId: VStoreAdmin_CreateNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbCreateNamespaceRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/DeleteKind:
    post:
      operationId: VStoreAdmin_DeleteKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbDeleteKindRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/DeleteNamespace:
    post:
      operationId: VStoreAdmin_DeleteNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbDeleteNamespaceRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/GetKind:
    post:
      operationId: VStoreAdmin_GetKind
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vstorepbGetKindResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbGetKindRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/UpdateKind:
    post:
      operationId: VStoreAdmin_UpdateKind
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbUpdateKindRequest'
      tags:
        - VStoreAdmin
  /vstorepb.VStoreAdmin/UpdateNamespace:
    post:
      operationId: VStoreAdmin_UpdateNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbUpdateNamespaceRequest'
      tags:
        - VStoreAdmin
definitions:
  BackupConfigBackupFrequency:
    type: string
    enum:
      - WEEKLY
      - DAILY
      - MONTHLY
    default: WEEKLY
  Elasticsearch7AnalysisCustomAnalyzer:
    type: object
    properties:
      name:
        type: string
        description: The name of the analyzer. This must be unique per index.
      analyzerJson:
        type: string
        title: |-
          The serialized JSON containing the configuration of the analyzer.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-custom-analyzer.html
          Example value:
          {
            "type": "custom",
            "tokenizer": "standard",
            "char_filter": [
              "html_strip"
            ],
            "filter": [
              "lowercase",
              "asciifolding"
            ]
          }
    title: CustomAnalyzer lets you set a custom analyzer on an index
  Elasticsearch7AnalysisCustomCharFilter:
    type: object
    properties:
      name:
        type: string
        description: The name of the charFilter. This must be unique per index.
      charFilterJson:
        type: string
        title: |-
          The serialized JSON containing the configuration of the charFilter.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html
          Example value:
          {
            "type": "mapping",
            "mappings": [
              ":) => _happy_",
              ":( => _sad_"
            ]
          }
    title: CustomCharFilter lets you set a custom charFilter on an index
  Elasticsearch7AnalysisCustomFilter:
    type: object
    properties:
      name:
        type: string
        description: The name of the filter. This must be unique per index.
      filterJson:
        type: string
        title: |-
          The serialized JSON containing the configuration of the filter.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html
          Example value:
          {
            "type": "stop",
            "stopwords": "_english_"
          }
    title: CustomFilter lets you set a custom filter on an index
  Elasticsearch7AnalysisCustomNormalizer:
    type: object
    properties:
      name:
        type: string
        description: The name of the normalizer. This must be unique per index.
      normalizerJson:
        type: string
        title: |-
          The serialized JSON containing the configuration of the normalizer.
          See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/normalizer.html
          Example value:
          {
            "type": "custom",
            "char_filter": [],
            "filter": ["lowercase", "asciifolding"]
          }
    title: CustomNormalizer lets you set a normalizer on an index
  Elasticsearch7AnalysisCustomTokenizer:
    type: object
    properties:
      name:
        type: string
        description: The name of the tokenizer. This must be unique per index.
      tokenizerJson:
        type: string
        title: |-
          The serialized JSON containing the configuration of the tokenizer.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html
          Example value:
          {
            "type": "pattern",
            "pattern": "[ .,!?]"
          }
    title: CustomTokenizer lets you set a custom tokenizer on an index
  PropertyPIITag:
    type: string
    enum:
      - PROPERTY_PII_TAG_CLEAN
      - PROPERTY_PII_TAG_PII
      - PROPERTY_PII_TAG_PD
    default: PROPERTY_PII_TAG_CLEAN
    description: |-
      PIITag defines potential PII tags.

       - PROPERTY_PII_TAG_CLEAN: clean means the data is not PII or PD.
       - PROPERTY_PII_TAG_PII: PII means Personally Identifiable Information. It is information that can be used to retrieve personal data, such as IAM user ID.
       - PROPERTY_PII_TAG_PD: PD means personal data, such as name, email and address. They are sensitive data we need to protect in our system.
  PropertyType:
    type: string
    enum:
      - STRING
      - INT64
      - DOUBLE
      - BOOL
      - TIMESTAMP
      - GEOPOINT
      - STRUCT
      - BYTES
    default: STRING
  SecondaryIndexPropertyConfigCloudSQL:
    type: object
    properties:
      type:
        type: string
      exclude:
        type: boolean
  SecondaryIndexPropertyConfigElasticsearch:
    type: object
    properties:
      type:
        type: string
      index:
        type: string
      exclude:
        type: boolean
      fields:
        type: array
        items:
          type: object
          $ref: '#/definitions/SecondaryIndexPropertyConfigElasticsearchField'
        title: Allows fields to be stored multiple times with different analyzers
    title: Elasticsearch Property Config
  SecondaryIndexPropertyConfigElasticsearch7:
    type: object
    properties:
      type:
        type: string
        title: Name of the property being stored
      index:
        type: boolean
        description: Index controls whether field values are indexed. It accepts true or false and defaults to true. Fields that are not indexed are not queryable.
      exclude:
        type: boolean
        title: Exclude keeps field from being synced to elasticsearch
      fields:
        type: array
        items:
          type: object
          $ref: '#/definitions/SecondaryIndexPropertyConfigElasticsearch7Field'
        title: Allows fields to be stored multiple times with different analyzers
      ignoreAbove:
        type: string
        format: int64
        title: |-
          Ignore_above specifies that strings longer than the ignore_above setting will not be indexed or stored.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/ignore-above.html
    title: Elasticsearch7 Property Config
  SecondaryIndexPropertyConfigElasticsearch7Field:
    type: object
    properties:
      name:
        type: string
        title: Name of the property being stored
      type:
        type: string
        title: Type is what kind of data the field contains, for more https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html
      index:
        type: boolean
        description: Index controls whether field values are indexed. It accepts true or false and defaults to true. Fields that are not indexed are not queryable.
      analyzer:
        type: string
        title: |-
          Analyzer lets you specify how you want to process text fields for searching at index time, see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html
          for more about the built in analyzers or specifying custom analyzers
      searchAnalyzer:
        type: string
        title: |-
          Search Analyzer lets you specify the analyzer you want to use for processing a text field for searching at query time, see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-analyzer.html
          for more about available search analyzer
      normalizer:
        type: string
        title: Normalizer specifies which normalizer the field should use, see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/normalizer.html
      ignoreAbove:
        type: string
        format: int64
        title: |-
          Ignore_above specifies that strings longer than the ignore_above setting will not be indexed or stored.
          See https://www.elastic.co/guide/en/elasticsearch/reference/current/ignore-above.html
  SecondaryIndexPropertyConfigElasticsearchField:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      index:
        type: string
      analyzer:
        type: string
  SecondaryIndexPropertyConfigPostgreSQL:
    type: object
    properties:
      type:
        type: string
      exclude:
        type: boolean
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  vstorepbBackupConfig:
    type: object
    properties:
      frequency:
        $ref: '#/definitions/BackupConfigBackupFrequency'
  vstorepbBigQueryConfig:
    type: object
    properties:
      indexName:
        type: string
      labels:
        type: object
        additionalProperties:
          type: string
        description: |-
          The key and value pairs of labels that will be added to the BigQuery table and view
          Keys and values can have a maximum length of 63 characters.
          Keys must begin with a lowercase letter, and contain only lowercase letters, numeric characters, underscores, and dashes.
  vstorepbCloudSQLConfig:
    type: object
    properties:
      indexName:
        type: string
      instanceIp:
        type: string
      userName:
        type: string
      password:
        type: string
      clientKey:
        type: string
        format: byte
      clientCert:
        type: string
        format: byte
      serverCertificateAuthority:
        type: string
        format: byte
      projectId:
        type: string
      instanceName:
        type: string
  vstorepbCreateKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        description: |-
          Unique name of the kind that are creating. Must be in capital camel case format.
          Example(s): AccountGroup, Partner, Review, Listing.
      primaryKey:
        type: array
        items:
          type: string
        description: |-
          List of fields that compose of the primary key. The order is important as it is used for building keysets,
          as well as lookups can be done by the leading pieces of a keyset.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbProperty'
        description: |-
          Schema for the kind. Indexing of any entities into this namespace/kind requires that a type has been set
          for every field being indexed.  No inference is done and explicit types are required. Fields also are not
          able to have their types changed or deleted, and only additive changes are allowed once a kind has been created.
      secondaryIndexes:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbSecondaryIndex'
        description: Configured set of secondary indexes that you would like vStore to replicate to.
      backupConfig:
        $ref: '#/definitions/vstorepbBackupConfig'
        title: Backup configuration
      extendedKeyLength:
        type: boolean
        title: Allows longer keys, but restricts Secondary Index options (CloudSQL)
      description:
        type: string
        description: Description for the kind.
  vstorepbCreateNamespaceRequest:
    type: object
    properties:
      namespace:
        type: string
        description: |-
          Unique namespace id unique to your project/microservice. Must be in lower snake case format.
          Example(s): repcore, partner-central, central-identity-service, marketing-automation.
      authorizedServiceAccounts:
        type: array
        items:
          type: string
        description: List of service account ids that are authorized to access the data in this namespace.
  vstorepbDeleteKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        title: Id of an existing kind
  vstorepbDeleteNamespaceRequest:
    type: object
    properties:
      namespace:
        type: string
        description: Id of an existing namespace.
  vstorepbElasticsearch7Analysis:
    type: object
    properties:
      analyzers:
        type: array
        items:
          type: object
          $ref: '#/definitions/Elasticsearch7AnalysisCustomAnalyzer'
      tokenizers:
        type: array
        items:
          type: object
          $ref: '#/definitions/Elasticsearch7AnalysisCustomTokenizer'
      charFilters:
        type: array
        items:
          type: object
          $ref: '#/definitions/Elasticsearch7AnalysisCustomCharFilter'
      filters:
        type: array
        items:
          type: object
          $ref: '#/definitions/Elasticsearch7AnalysisCustomFilter'
      normalizers:
        type: array
        items:
          type: object
          $ref: '#/definitions/Elasticsearch7AnalysisCustomNormalizer'
  vstorepbElasticsearch7Cluster:
    type: object
    properties:
      host:
        type: string
      kibanaHost:
        type: string
    title: |-
      Elasticsearch7Cluster contains information necessary for VStore to communicate with an arbitrary ES Cluster
      VStore needs to be authed as a user with full CRUD permissions to this cluster
  vstorepbElasticsearch7Config:
    type: object
    properties:
      numberOfShards:
        type: string
        format: int64
      numberOfReplicas:
        type: string
        format: int64
      refreshInterval:
        type: string
      indexName:
        type: string
      cluster:
        $ref: '#/definitions/vstorepbElasticsearch7Cluster'
      analysis:
        $ref: '#/definitions/vstorepbElasticsearch7Analysis'
        description: |-
          Analysis lets you configure custom analyzers, tokenizer, character filters, and token filters on an index.
          Adding a new analyzer/tokenizer/charfilter/filter to an existing index is possible, but referencing the analyzer from fields with existing values or from analyzers who are configured on fields with existing values is not - you need to reindex your data to do that.
          Whenever you are writing a custom analyzer, you should use the Elastic API/Sense to test your analyzer with example values before registering it with VStore. If you do not provide valid JSON configuration, VStore will not be able to update your index.
      maxNgramDiff:
        type: string
        format: int64
  vstorepbElasticsearchAnalysis:
    type: object
    properties:
      analyzers:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbElasticsearchAnalyzer'
      filters:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbElasticsearchFilter'
      charFilters:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbElasticsearchCharFilter'
      tokenizers:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbElasticsearchTokenizer'
    title: https://www.elastic.co/guide/en/elasticsearch/guide/current/custom-analyzers.html
  vstorepbElasticsearchAnalyzer:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      stemExclusion:
        type: array
        items:
          type: string
      stopWords:
        type: array
        items:
          type: string
      charFilter:
        type: array
        items:
          type: string
      tokenizer:
        type: string
      filter:
        type: array
        items:
          type: string
    description: |-
      ElasticsearchAnalyzer configures a custom analyzer that can be built to transform your data into a
      configuration that suites your particular needs.
  vstorepbElasticsearchCharFilter:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      pattern:
        type: string
      replacement:
        type: string
    description: Character filters are used to “tidy up” a string before it is tokenized.
  vstorepbElasticsearchCluster:
    type: object
    properties:
      hostName:
        type: string
      username:
        type: string
      password:
        type: string
    title: |-
      ElasticsearchCluster contains information necessary for VStore to communicate with an arbitrary ES Cluster
      VStore needs to be authed as a user with full CRUD permissions
  vstorepbElasticsearchConfig:
    type: object
    properties:
      numberOfShards:
        type: string
        format: int64
      numberOfReplicas:
        type: string
        format: int64
      refreshInterval:
        type: string
      analysis:
        $ref: '#/definitions/vstorepbElasticsearchAnalysis'
      indexName:
        type: string
      cluster:
        $ref: '#/definitions/vstorepbElasticsearchCluster'
    description: |-
      ElasticsearchConfig uses our proprietary clusters as a destination for your indices.
      If you specify an ElasticsearchCluster, VStore will instead use that cluster as a destination.
  vstorepbElasticsearchFilter:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      pattern:
        type: string
      replacement:
        type: string
      synonyms:
        type: array
        items:
          type: string
    description: Token filters may change, add, or remove tokens.
  vstorepbElasticsearchRawConfig:
    type: object
    properties:
      mappingJson:
        type: string
      settingsJson:
        type: string
      indexName:
        type: string
    description: ElasticsearchRawConfig is deprecated and will be removed in a future release.
  vstorepbElasticsearchTokenizer:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      delimiter:
        type: string
      pattern:
        type: string
    description: The tokenizer breaks up the string into individual terms or tokens.
  vstorepbGetKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        title: Id of an existing kind
  vstorepbGetKindResponse:
    type: object
    properties:
      primaryKey:
        type: array
        items:
          type: string
        description: |-
          List of fields that compose of the primary key. The order is important as it is used for building keysets,
          as well as lookups can be done by the leading pieces of a keyset.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbProperty'
        description: |-
          Schema for the kind. Indexing of any entities into this namespace/kind requires that a type has been set
          for every field being indexed.  No inference is done and explicit types are required. Fields also are not
          able to have their types changed or deleted, and only additive changes are allowed once a kind has been created.
      secondaryIndexes:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbSecondaryIndex'
        description: Configured set of secondary indexes VStore is replicating to.
      backupConfig:
        $ref: '#/definitions/vstorepbBackupConfig'
        title: Backup configuration
      extendedKeyLength:
        type: boolean
        title: Allows longer keys, but restricts Secondary Index options (CloudSQL)
      description:
        type: string
        description: Description for the kind.
  vstorepbProperty:
    type: object
    properties:
      name:
        type: string
        title: |-
          Unique identifier for this property. Must be in snake case format.
          Example(s): account_group_id, listing_id, company_name
      type:
        $ref: '#/definitions/PropertyType'
        title: Type for this property
      repeated:
        type: boolean
        description: Indicates if the field is repeated.
      required:
        type: boolean
        description: |-
          Indicates if the field is required. Only validates that the field has been supplied in create/update requests,
          and not the actual value.
          Example(s):
          1) A required string field would allow an empty string if the field was passed, but would fail if the field
          was not present in the request.
          2) A required int property would allow 0 as a value, but would fail if the field was not supplied in the request.
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbProperty'
        description: |-
          Can only be specified if the Type supplied is a STRUCT.
          Is the schema of the structured property.
      secondaryIndexConfigs:
        type: object
        additionalProperties:
          $ref: '#/definitions/vstorepbSecondaryIndexPropertyConfig'
      piiTag:
        $ref: '#/definitions/PropertyPIITag'
      description:
        type: string
  vstorepbPubSubConfig:
    type: object
    properties:
      indexName:
        type: string
  vstorepbSecondaryIndex:
    type: object
    properties:
      name:
        type: string
        title: Name of the secondary index, this name must be unique from other secondary indexes
      esRawConfig:
        $ref: '#/definitions/vstorepbElasticsearchRawConfig'
        description: Deprecated.
      esConfig:
        $ref: '#/definitions/vstorepbElasticsearchConfig'
      cloudSqlConfig:
        $ref: '#/definitions/vstorepbCloudSQLConfig'
        title: mysql
      pubsubConfig:
        $ref: '#/definitions/vstorepbPubSubConfig'
      bigQueryConfig:
        $ref: '#/definitions/vstorepbBigQueryConfig'
      postgresqlConfig:
        $ref: '#/definitions/vstorepbCloudSQLConfig'
      es7Config:
        $ref: '#/definitions/vstorepbElasticsearch7Config'
  vstorepbSecondaryIndexPropertyConfig:
    type: object
    properties:
      elasticsearchPropertyConfig:
        $ref: '#/definitions/SecondaryIndexPropertyConfigElasticsearch'
      cloudsqlPropertyConfig:
        $ref: '#/definitions/SecondaryIndexPropertyConfigCloudSQL'
      postgresqlPropertyConfig:
        $ref: '#/definitions/SecondaryIndexPropertyConfigPostgreSQL'
      elasticsearch7PropertyConfig:
        $ref: '#/definitions/SecondaryIndexPropertyConfigElasticsearch7'
  vstorepbUpdateKindRequest:
    type: object
    properties:
      namespace:
        type: string
        title: Id of an existing namespace
      kind:
        type: string
        title: Id of an existing kind
      properties:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbProperty'
        description: |-
          Schema for the kind with any new fields included in the request. Changes to any existing fields will cause
          the request to fail.
      secondaryIndexes:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbSecondaryIndex'
        description: Configured set of secondary indexes that you would like vStore to replicate to.
      extendedKeyLength:
        type: boolean
        title: Allows longer keys, but restricts Secondary Index options (CloudSQL)
      description:
        type: string
        description: Description for the kind.
  vstorepbUpdateNamespaceRequest:
    type: object
    properties:
      namespace:
        type: string
        description: Id of an existing namespace.
      authorizedServiceAccounts:
        type: array
        items:
          type: string
        description: |-
          List of service account ids that are authorized to access the data in this namespace.
          Replaces the list of authorized service accounts that are currently on the namespace.
