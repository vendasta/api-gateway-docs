swagger: "2.0"
info:
  title: vstorepb/api.proto
  version: version not set
tags:
  - name: VStore
consumes:
  - application/json
produces:
  - application/json
paths:
  /vstorepb.VStore/Create:
    post:
      operationId: VStore_Create
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbCreateRequest'
      tags:
        - VStore
  /vstorepb.VStore/Get:
    post:
      operationId: VStore_Get
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vstorepbGetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbGetRequest'
      tags:
        - VStore
  /vstorepb.VStore/Lookup:
    post:
      operationId: VStore_Lookup
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vstorepbLookupResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbLookupRequest'
      tags:
        - VStore
  /vstorepb.VStore/Scan:
    post:
      operationId: VStore_Scan
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/vstorepbEntityResult'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of vstorepbEntityResult
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbScanRequest'
      tags:
        - VStore
  /vstorepb.VStore/Update:
    post:
      operationId: VStore_Update
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/vstorepbUpdateRequest'
      tags:
        - VStore
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  vstorepbCreateRequest:
    type: object
    properties:
      entity:
        $ref: '#/definitions/vstorepbEntity'
  vstorepbEntity:
    type: object
    properties:
      namespace:
        type: string
      kind:
        type: string
      data:
        $ref: '#/definitions/protobufAny'
      version:
        type: string
        format: int64
      values:
        $ref: '#/definitions/vstorepbStruct'
      v1KindId:
        type: string
        title: v1 fields for pubsub forward compatability
      v1Values:
        type: object
      v1Version:
        type: string
        format: int64
  vstorepbEntityResult:
    type: object
    properties:
      keySet:
        $ref: '#/definitions/vstorepbKeySet'
      entity:
        $ref: '#/definitions/vstorepbEntity'
  vstorepbGeoPoint:
    type: object
    properties:
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  vstorepbGetRequest:
    type: object
    properties:
      keySets:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbKeySet'
  vstorepbGetResponse:
    type: object
    properties:
      entities:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbEntityResult'
  vstorepbKeyFilter:
    type: object
    properties:
      keys:
        type: array
        items:
          type: string
        description: |-
          Keys to filter by. You must always provide parent key components if you provide any children.
          eg: keys = [PID, AG-123], rows PID:AG-123:* are matches, but if keys = [AG-123] or ["", AG-123], you will not get any matches.
      prefix:
        type: boolean
        title: |-
          if prefix is set to True, the filter will match an incomplete prefix on the last specified key
          eg: keys = [PID, AG-4], row PID:AG-456 is a match with partial == true, not a match otherwise
  vstorepbKeySet:
    type: object
    properties:
      namespace:
        type: string
      kind:
        type: string
      keys:
        type: array
        items:
          type: string
  vstorepbListValue:
    type: object
    properties:
      values:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbValue'
  vstorepbLookupFilter:
    type: object
    properties:
      keys:
        type: array
        items:
          type: string
        title: 'Deprecated: use `filters` instead'
      keyFilter:
        $ref: '#/definitions/vstorepbKeyFilter'
      rangeFilter:
        $ref: '#/definitions/vstorepbRangeFilter'
  vstorepbLookupRequest:
    type: object
    properties:
      namespace:
        type: string
      kind:
        type: string
      pageSize:
        type: string
        format: int64
      cursor:
        type: string
      filter:
        $ref: '#/definitions/vstorepbLookupFilter'
  vstorepbLookupResponse:
    type: object
    properties:
      entities:
        type: array
        items:
          type: object
          $ref: '#/definitions/vstorepbEntityResult'
      nextCursor:
        type: string
      hasMore:
        type: boolean
  vstorepbRangeFilter:
    type: object
    properties:
      begin:
        type: array
        items:
          type: string
        description: Key set to start filtering from.
      end:
        type: array
        items:
          type: string
        description: Key set to stop filtering at.
    title: RangeFilter will bound results by [begin, end)
  vstorepbScanRequest:
    type: object
    properties:
      namespace:
        type: string
      kind:
        type: string
      filter:
        $ref: '#/definitions/vstorepbLookupFilter'
      startingKeySet:
        $ref: '#/definitions/vstorepbKeySet'
  vstorepbStruct:
    type: object
    properties:
      values:
        type: object
        additionalProperties:
          $ref: '#/definitions/vstorepbValue'
  vstorepbUpdateRequest:
    type: object
    properties:
      entity:
        $ref: '#/definitions/vstorepbEntity'
  vstorepbValue:
    type: object
    properties:
      intValue:
        type: string
        format: int64
        title: Represents a int64 value
      doubleValue:
        type: number
        format: double
        description: Represents a double value.
      stringValue:
        type: string
        description: Represents a string value.
      boolValue:
        type: boolean
        description: Represents a boolean value.
      structValue:
        $ref: '#/definitions/vstorepbStruct'
        description: Represents a structured value.
      timestampValue:
        type: string
        format: date-time
        description: Represents a timestamp value.
      listValue:
        $ref: '#/definitions/vstorepbListValue'
        description: Represents a repeated `Value`.
      geopointValue:
        $ref: '#/definitions/vstorepbGeoPoint'
      bytesValue:
        type: string
        format: byte
