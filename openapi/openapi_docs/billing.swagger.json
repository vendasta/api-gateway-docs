{
  "swagger": "2.0",
  "info": {
    "title": "billing/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "BankReconciliationService"
    },
    {
      "name": "Billing"
    },
    {
      "name": "ContractService"
    },
    {
      "name": "ContractDocumentService"
    },
    {
      "name": "DiscountService"
    },
    {
      "name": "InvoiceService"
    },
    {
      "name": "CreditNoteService"
    },
    {
      "name": "RecurringInvoiceService"
    },
    {
      "name": "MerchantService"
    },
    {
      "name": "PaymentService"
    },
    {
      "name": "PricingService"
    },
    {
      "name": "PurchaseService"
    },
    {
      "name": "RefundService"
    },
    {
      "name": "TaxService"
    },
    {
      "name": "SalesCreditNoteService"
    },
    {
      "name": "SalesInvoiceService"
    },
    {
      "name": "VendorService"
    },
    {
      "name": "ProductService"
    },
    {
      "name": "BundleService"
    },
    {
      "name": "RetailCustomerConfigurationService"
    },
    {
      "name": "PaymentMethodService"
    },
    {
      "name": "CreditService"
    },
    {
      "name": "ProductSummaryService"
    },
    {
      "name": "SubscriptionRelationshipService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/billing.v1.BankReconciliationService/ListPayouts": {
      "post": {
        "summary": "Returns a list of payouts from stripe. These payouts represent how much money we are getting (usually on a daily) from stripe.",
        "operationId": "BankReconciliationService_ListPayouts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPayoutsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPayoutsRequest"
            }
          }
        ],
        "tags": [
          "BankReconciliationService"
        ]
      }
    },
    "/billing.v1.BankReconciliationService/ReconcilePayout": {
      "post": {
        "summary": "This RPC is used to reconcile a stripe payout for bank reconciliation statement.",
        "operationId": "BankReconciliationService_ReconcilePayout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReconcilePayoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReconcilePayoutRequest"
            }
          }
        ],
        "tags": [
          "BankReconciliationService"
        ]
      }
    },
    "/billing.v1.Billing/BillItem": {
      "post": {
        "summary": "Bills for the specified item. This could be instantly charge, or add to invoice.\nWhen you need to have high confidence in this RPC being successful, call CanBillItem\nahead of time to validate the prerequisites have been met.\nDEPRECATED: Use Billing.CreateSubscription",
        "operationId": "Billing_BillItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Bill for the specified item. This could be instantly, or just add to next invoice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BillItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/BillMultipleItems": {
      "post": {
        "summary": "Bills for the specified items. This could be instantly charge, or add to invoice.\nDEPRECATED: Use Billing.CreateSubscriptions",
        "operationId": "Billing_BillMultipleItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillMultipleItemsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Bill for the specified items. This could be instantly, or just add to next invoice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BillMultipleItemsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CanBillItem": {
      "post": {
        "summary": "CanBillItem is an RPC allowing you to validate the pre-requisites to be\nable to bill for an item (via the BillItem RPC) is likely to succeed. Use this\nRPC when you want to have a high confidence that billing for an item will be successful,\nsuch as when building activation user interfaces.\nThis is not a guarantee - payments can still fail (e.g. if the charge amount is above their available limit).",
        "operationId": "Billing_CanBillItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CanBillItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CanCreateSubscriptions": {
      "post": {
        "summary": "Is a validation check to see if each supplied SKU and quantity will be able to\ncreate a subscription sucessfully for a partner. Returns an object for each SKU whether\nthe subscription can be created, and reason is provided for if they can or cannot.\nThis is not a guarantee - payments can still fail (e.g. if the total charge amount is above their available limit).",
        "operationId": "Billing_CanCreateSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CanCreateSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CanCreateSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ChangeCustomUnitPrice": {
      "post": {
        "summary": "ChangeCustomUnitPrice updates the custom unit price of a billable item",
        "operationId": "Billing_ChangeCustomUnitPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeCustomUnitPriceRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ChangeFrequency": {
      "post": {
        "summary": "ChangeFrequency updates the frequency of a billable item",
        "operationId": "Billing_ChangeFrequency",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeFrequencyRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ChangeRenewalDate": {
      "post": {
        "summary": "ChangeRenewalDate updates the next renewal date of a billable item",
        "operationId": "Billing_ChangeRenewalDate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "ChangeRenewalDateRequest will update the next renewal_start date of an existing billable item. This will not handle proration calculations.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeRenewalDateRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreateMeteredComponent": {
      "post": {
        "summary": "CreateMeteredComponent creates a new Component for doing metered billing",
        "operationId": "Billing_CreateMeteredComponent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMeteredComponentRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreatePricingPlan": {
      "post": {
        "summary": "Create a pricing plan",
        "operationId": "Billing_CreatePricingPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePricingPlanResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePricingPlanRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreatePricingPlanProduct": {
      "post": {
        "summary": "Create a pricing plan product\nDEPRECATED: Use PricingService.UpsertWholesale",
        "operationId": "Billing_CreatePricingPlanProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePricingPlanProductResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePricingPlanProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreateSubscription": {
      "post": {
        "summary": "Creates a new subscription for an item. This could be instantly charge, or add to invoice.\nWhen you need to have high confidence in this RPC being successful, call CanBillItem\nahead of time to validate the prerequisites have been met.",
        "operationId": "Billing_CreateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreateSubscriptions": {
      "post": {
        "summary": "Creates multiple subscriptions for the specified items. This could be instantly charge, or add to invoice.",
        "operationId": "Billing_CreateSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/CreateUsage": {
      "post": {
        "summary": "Creates usage for a subscription",
        "operationId": "Billing_CreateUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUsageRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/DeleteBillableItem": {
      "post": {
        "summary": "Delete a Billable Item",
        "operationId": "Billing_DeleteBillableItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteBillableItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/DeletePricingPlanProduct": {
      "post": {
        "summary": "Delete a pricing plan product",
        "operationId": "Billing_DeletePricingPlanProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePricingPlanProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ExpireBillableItem": {
      "post": {
        "summary": "Sets the expiration date on a Billable Item",
        "operationId": "Billing_ExpireBillableItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExpireBillableItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ExportSubscriptions": {
      "post": {
        "summary": "Prepares a list of wholesale subscriptions for download and notifies the user",
        "operationId": "Billing_ExportSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GenerateBillableItemsCSV": {
      "post": {
        "summary": "Generates a CSV of the billable items",
        "operationId": "Billing_GenerateBillableItemsCSV",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateBillableItemsCSVResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateBillableItemsCSVRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetBillableItem": {
      "post": {
        "summary": "Gets an existing Billable Item\nnote: the GetMulti version of this is the GetMultiSubscriptions.",
        "operationId": "Billing_GetBillableItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBillableItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetBillableItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMerchantWholesaleCurrency": {
      "post": {
        "summary": "Get merchant wholesale currency from contract",
        "operationId": "Billing_GetMerchantWholesaleCurrency",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMerchantWholesaleCurrencyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMerchantWholesaleCurrencyRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiContract": {
      "post": {
        "summary": "GetMulti Contracts",
        "operationId": "Billing_GetMultiContract",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiContractsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiContractsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiPricingPlan": {
      "post": {
        "summary": "Gets the pricing plans corresponding to the requested ids.",
        "operationId": "Billing_GetMultiPricingPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiPricingPlanResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiPricingPlanRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiPricingPlanProduct": {
      "post": {
        "summary": "Get multi pricing plan product retrieves list of pricing plan product records\nNOTE: Does not represent the calculated pricing for a product, which can be the combination of several pricing plans",
        "operationId": "Billing_GetMultiPricingPlanProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiPricingPlanProductResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiPricingPlanProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiProduct": {
      "post": {
        "summary": "GetMulti Product",
        "operationId": "Billing_GetMultiProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiProductResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiProductPricing": {
      "post": {
        "summary": "GetMultiPricing calculates annd returns the merchant specific pricing for multiple products",
        "operationId": "Billing_GetMultiProductPricing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiProductPricingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiProductPricingRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetMultiSubscriptions": {
      "post": {
        "summary": "Gets subscription records for items.",
        "operationId": "Billing_GetMultiSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "request structure for getting billable items.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetPricingPlanProduct": {
      "post": {
        "summary": "Get pricing plan product retrieves a single pricing plan product record\nNOTE: Does not represent the calculated pricing for a product, which can be the combination of several pricing plans",
        "operationId": "Billing_GetPricingPlanProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPricingPlanProductResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPricingPlanProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetProductSummariesTotal": {
      "post": {
        "summary": "Get total for product summaries",
        "operationId": "Billing_GetProductSummariesTotal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProductSummariesTotalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetProductSummariesTotalRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/GetPurchaseCost": {
      "post": {
        "summary": "Deprecated: This RPC has been moved to the Pricing Service\nGet the cost for upcoming purchases",
        "operationId": "Billing_GetPurchaseCost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPurchaseCostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPurchaseCostRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListBillableItems": {
      "post": {
        "summary": "Lists existing Billable Items\nDEPRECATED: Use Billing.ListSubscriptions",
        "operationId": "Billing_ListBillableItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBillableItemsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListBillableItemsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListContracts": {
      "post": {
        "summary": "List contracts",
        "operationId": "Billing_ListContracts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListContractsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListContractsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListMerchantBillingReports": {
      "post": {
        "summary": "List Merchant reports",
        "operationId": "Billing_ListMerchantBillingReports",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMerchantBillingReportsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMerchantBillingReportsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListPricingPlanProducts": {
      "post": {
        "summary": "List pricing plan products",
        "operationId": "Billing_ListPricingPlanProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPricingPlanProductsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPricingPlanProductsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListProductSummaries": {
      "post": {
        "summary": "List product summaries",
        "operationId": "Billing_ListProductSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProductSummariesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListProductSummariesRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListProducts": {
      "post": {
        "summary": "List Products",
        "operationId": "Billing_ListProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProductsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListProductsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListRetailSubscriptions": {
      "post": {
        "summary": "Lists retail subscriptions, which are subscriptions a customer is billed for",
        "operationId": "Billing_ListRetailSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ListSubscriptions": {
      "post": {
        "summary": "Lists wholesale subscriptions, which are subscriptions a merchant is billed for",
        "operationId": "Billing_ListSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ReplaceSubscriptionPresets": {
      "post": {
        "summary": "ReplaceSubscriptionPresets is an RPC that allows you to provide data that will be hydrated when a Subscription is created.\nYou would call ReplaceSubscriptionPresets to obtain a reference you can later use in a CreateSubscription(s) request.\nBy providing that id in the CreateSubscription(s) request, the Subscription will be hydrated with data previously sent via this RPC.",
        "operationId": "Billing_ReplaceSubscriptionPresets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReplaceSubscriptionPresetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceSubscriptionPresetsRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ResetContractPricing": {
      "post": {
        "summary": "Reset contract pricing",
        "operationId": "Billing_ResetContractPricing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetContractPricingRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/ReverseSubscription": {
      "post": {
        "summary": "ReverseSubscription reverts all billing for for a specified subscription.",
        "operationId": "Billing_ReverseSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReverseSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/SetAutoBillable": {
      "post": {
        "summary": "SetAutoBillable sets whether the subscription should result in charges to the customer (ie. through invoices) or not.",
        "operationId": "Billing_SetAutoBillable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetAutoBillableRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/SetRenewalStart": {
      "post": {
        "summary": "Sets the renewal start date on an existing subscription. If the renewal start date has already been set, this call will fail.\nThe current time, coupled with the frequency of the subscription renewal will be used to set renewal start to the current day of the next renewal cycle. (ie next month, or next year)",
        "operationId": "Billing_SetRenewalStart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetRenewalStartRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/StartRevRecTemplateBackfill": {
      "post": {
        "summary": "This endpoint kicks off asynchronous work to backfill the \"Revenue Recognition Template\" field on Sales Invoices and Credit Notes in Financial Force\nSales Invoices and Credit Notes created by the billing service all have this field filled out, but those documents created manually by users in Financial Force are missing this field\nEach month before finance closes out their reporting period, they must run revenue recognition. Each document that contributes to revenue recognition must have a this template field filled out for revenue recognition to work correctly\nSince the time it takes to complete month end each month is variable, this backfill cannot simply be kicked off by a cron and instead must be manually triggered by a user when Finance has completed all manual entries to FF",
        "operationId": "Billing_StartRevRecTemplateBackfill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1StartRevRecTemplateBackfillRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/TickComponentUsage": {
      "post": {
        "summary": "TickComponentUsage increments the usage of a metered pricing component",
        "operationId": "Billing_TickComponentUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TickComponentUsageRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/UnexpireBillableItem": {
      "post": {
        "summary": "Clears the expiration date on a Billable Item",
        "operationId": "Billing_UnexpireBillableItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UnexpireBillableItemRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/UpdatePricingPlan": {
      "post": {
        "summary": "Update a pricing plan",
        "operationId": "Billing_UpdatePricingPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePricingPlanResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePricingPlanRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/UpdatePricingPlanProduct": {
      "post": {
        "summary": "Update a pricing plan product. Empty field mask means update all fields, else pass in the fields you are updating.\nDEPRECATED: Use PricingService.UpsertWholesale",
        "operationId": "Billing_UpdatePricingPlanProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePricingPlanProductResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePricingPlanProductRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.Billing/UpdateSubscription": {
      "post": {
        "summary": "Update an existing subscription using field masks.\nThis is an in-progress rpc that only supports specific fields on the subscription. See the UpdateSubscriptionRequest for more details.",
        "operationId": "Billing_UpdateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing.v1.BundleService/GetMulti": {
      "post": {
        "summary": "GetMulti will retrieve a map of bundles keyed by bundle id",
        "operationId": "BundleService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiBundleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiBundleRequest"
            }
          }
        ],
        "tags": [
          "BundleService"
        ]
      }
    },
    "/billing.v1.BundleService/List": {
      "post": {
        "summary": "List will retrieve a filtered list bundles",
        "operationId": "BundleService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBundlesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListBundlesRequest"
            }
          }
        ],
        "tags": [
          "BundleService"
        ]
      }
    },
    "/billing.v1.BundleService/Upsert": {
      "post": {
        "summary": "Upsert creates a new bundle or inserts against an existing bundle",
        "operationId": "BundleService_Upsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertBundleRequest"
            }
          }
        ],
        "tags": [
          "BundleService"
        ]
      }
    },
    "/billing.v1.ContractDocumentService/Delete": {
      "post": {
        "summary": "Delete Contract Doucment",
        "operationId": "ContractDocumentService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteContractDocumentRequest"
            }
          }
        ],
        "tags": [
          "ContractDocumentService"
        ]
      }
    },
    "/billing.v1.ContractDocumentService/List": {
      "post": {
        "summary": "List Contract Documents",
        "operationId": "ContractDocumentService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListContractDocumentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListContractDocumentsRequest"
            }
          }
        ],
        "tags": [
          "ContractDocumentService"
        ]
      }
    },
    "/billing.v1.ContractService/Create": {
      "post": {
        "summary": "Create a new contract",
        "operationId": "ContractService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateContractResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateContractRequest"
            }
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/billing.v1.ContractService/Get": {
      "post": {
        "summary": "Get a contract",
        "operationId": "ContractService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetContractResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetContractRequest"
            }
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/billing.v1.ContractService/Update": {
      "post": {
        "summary": "Update a contract",
        "operationId": "ContractService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateContractResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateContractRequest"
            }
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/billing.v1.ContractService/UpdateSubscription": {
      "post": {
        "summary": "Changes a contract's platform subscription",
        "operationId": "ContractService_UpdateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateContractSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "ContractService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/Calculate": {
      "post": {
        "summary": "Calculate will calculate all monetary amounts of a credit note",
        "operationId": "CreditNoteService_Calculate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalculateCreditNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CalculateCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/Create": {
      "post": {
        "summary": "Create a credit note",
        "operationId": "CreditNoteService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCreditNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/Get": {
      "post": {
        "summary": "Get a credit note",
        "operationId": "CreditNoteService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCreditNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/GetMulti": {
      "post": {
        "summary": "Get multiple credit notes",
        "operationId": "CreditNoteService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiCreditNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/List": {
      "post": {
        "summary": "List credit notes",
        "operationId": "CreditNoteService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCreditNotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListCreditNotesRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditNoteService/Send": {
      "post": {
        "summary": "Send a credit note",
        "operationId": "CreditNoteService_Send",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "CreditNoteService"
        ]
      }
    },
    "/billing.v1.CreditService/Add": {
      "post": {
        "summary": "Add will increase the balance of credit",
        "operationId": "CreditService_Add",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCreditRequest"
            }
          }
        ],
        "tags": [
          "CreditService"
        ]
      }
    },
    "/billing.v1.CreditService/GetBalance": {
      "post": {
        "summary": "Get will get the credit balance",
        "operationId": "CreditService_GetBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetBalanceRequest"
            }
          }
        ],
        "tags": [
          "CreditService"
        ]
      }
    },
    "/billing.v1.DiscountService/Create": {
      "post": {
        "summary": "Create discount will create discounts if it doesn't exist",
        "operationId": "DiscountService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDiscountRequest"
            }
          }
        ],
        "tags": [
          "DiscountService"
        ]
      }
    },
    "/billing.v1.DiscountService/Expire": {
      "post": {
        "summary": "Expire discount will expire a discount.",
        "operationId": "DiscountService_Expire",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExpireDiscountRequest"
            }
          }
        ],
        "tags": [
          "DiscountService"
        ]
      }
    },
    "/billing.v1.DiscountService/List": {
      "post": {
        "summary": "List Discounts",
        "operationId": "DiscountService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDiscountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDiscountsRequest"
            }
          }
        ],
        "tags": [
          "DiscountService"
        ]
      }
    },
    "/billing.v1.DiscountService/Update": {
      "post": {
        "summary": "Update discount will update an existing discount for a sku",
        "operationId": "DiscountService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDiscountRequest"
            }
          }
        ],
        "tags": [
          "DiscountService"
        ]
      }
    },
    "/billing.v1.InvoiceService/AddBundle": {
      "post": {
        "summary": "Add a bundle to an invoice",
        "operationId": "InvoiceService_AddBundle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddBundleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddBundleRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/AddLineItem": {
      "post": {
        "summary": "Add a line item to an invoice",
        "operationId": "InvoiceService_AddLineItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddLineItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddLineItemRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Charge": {
      "post": {
        "summary": "Charge an invoice against the requested payment method",
        "operationId": "InvoiceService_Charge",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChargeInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Create": {
      "post": {
        "summary": "Create an invoice",
        "operationId": "InvoiceService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/CreatePaymentLink": {
      "post": {
        "summary": "Create a payment link for an invoice",
        "operationId": "InvoiceService_CreatePaymentLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePaymentLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePaymentLinkRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Delete": {
      "post": {
        "summary": "Delete an invoice",
        "operationId": "InvoiceService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/DeleteLineItem": {
      "post": {
        "summary": "Delete a line item from an invoice",
        "operationId": "InvoiceService_DeleteLineItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteLineItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteLineItemRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Duplicate": {
      "post": {
        "summary": "Duplicate an existing invoice",
        "operationId": "InvoiceService_Duplicate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DuplicateInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DuplicateInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Get": {
      "post": {
        "summary": "Get returns an invoice",
        "operationId": "InvoiceService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/GetUpcomingInvoicePreview": {
      "post": {
        "summary": "Get a preview of the next upcoming invoice for a customer",
        "operationId": "InvoiceService_GetUpcomingInvoicePreview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUpcomingInvoicePreviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUpcomingInvoicePreviewRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/List": {
      "post": {
        "summary": "List invoices",
        "operationId": "InvoiceService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInvoicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListInvoicesRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Pay": {
      "post": {
        "summary": "Pay an invoice out of band from vendasta payments",
        "operationId": "InvoiceService_Pay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PayInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/RemoveBundle": {
      "post": {
        "summary": "Remove a bundle from an invoice",
        "operationId": "InvoiceService_RemoveBundle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveBundleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveBundleRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Send": {
      "post": {
        "summary": "Send sends an invoice to the customer and marks draft invoices as due",
        "operationId": "InvoiceService_Send",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Update": {
      "post": {
        "summary": "Update an invoice",
        "operationId": "InvoiceService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/UpdateBundle": {
      "post": {
        "summary": "Updates a bundle on the invoice",
        "operationId": "InvoiceService_UpdateBundle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateBundleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateBundleRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/UpdateDefaultTaxRates": {
      "post": {
        "summary": "Update the default taxes of an invoice",
        "operationId": "InvoiceService_UpdateDefaultTaxRates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateDefaultTaxRatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDefaultTaxRatesRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/UpdateLineItem": {
      "post": {
        "summary": "Update an invoice line item",
        "operationId": "InvoiceService_UpdateLineItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateLineItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateLineItemRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.InvoiceService/Void": {
      "post": {
        "summary": "Void an invoice which was accidentally finalized or contains a mistake",
        "operationId": "InvoiceService_Void",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VoidInvoiceRequest"
            }
          }
        ],
        "tags": [
          "InvoiceService"
        ]
      }
    },
    "/billing.v1.MerchantService/CancelRetailBilling": {
      "post": {
        "summary": "CancelRetailBilling will turn off all retail billing for a merchant",
        "operationId": "MerchantService_CancelRetailBilling",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CancelRetailBillingRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/ChargeSalesInvoice": {
      "post": {
        "summary": "ChargeSalesInvoice charges a specified amount against an invoice",
        "operationId": "MerchantService_ChargeSalesInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChargeSalesInvoiceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/Create": {
      "post": {
        "summary": "Creates a Merchant",
        "operationId": "MerchantService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMerchantRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/CreatePaymentCard": {
      "post": {
        "summary": "Adds a payment card to the system",
        "operationId": "MerchantService_CreatePaymentCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePaymentCardRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/CreateReportRun": {
      "post": {
        "summary": "CreateReportRun begins building a report for a merchant to download.",
        "operationId": "MerchantService_CreateReportRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MerchantServicesReportRun"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMerchantServicesReportRun"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/CreateStripeExternalAccount": {
      "post": {
        "summary": "CreateStripeExternalAccount create an external account on a stripe connect account",
        "operationId": "MerchantService_CreateStripeExternalAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStripeExternalAccountRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/DeleteBankAccount": {
      "post": {
        "summary": "DeleteBankAccount deletes a bank account for the specified merchant and bank account identifiers",
        "operationId": "MerchantService_DeleteBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteBankAccountRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/Get": {
      "post": {
        "summary": "Gets a Merchant",
        "operationId": "MerchantService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMerchantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMerchantRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetMultiRetailConfigurations": {
      "post": {
        "summary": "GetMultiRetailConfigurations returns multiple retail configurations for the given ids",
        "operationId": "MerchantService_GetMultiRetailConfigurations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiRetailConfigurationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiRetailConfigurationsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetNextRetailInvoiceSequence": {
      "post": {
        "operationId": "MerchantService_GetNextRetailInvoiceSequence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNextRetailInvoiceSequenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetNextRetailInvoiceSequenceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetOutstandingBalance": {
      "post": {
        "summary": "Gets the outstanding balance of a merchant",
        "operationId": "MerchantService_GetOutstandingBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOutstandingBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOutstandingBalanceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetPayoutSummary": {
      "post": {
        "summary": "GetPayoutSummary retrieves the payouts, balance, and details for a merchant's retail accounts (one for each currency they sell in)",
        "operationId": "MerchantService_GetPayoutSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPayoutSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPayoutSummaryRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetReportRun": {
      "post": {
        "summary": "GetReportRun returns a report run.",
        "operationId": "MerchantService_GetReportRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MerchantServicesReportRun"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMerchantServicesReportRun"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetRetailAccountBalance": {
      "post": {
        "summary": "GetRetailAccountBalance returns the balance for a merchant's retail account",
        "operationId": "MerchantService_GetRetailAccountBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailAccountBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailAccountBalanceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetRetailBalance": {
      "post": {
        "summary": "GetRetailBalance retrieves the balances for a merchant's retail accounts (one for each currency they sell in)\nDEPRECATED: Use MerchantService.GetRetailAccountBalance",
        "operationId": "MerchantService_GetRetailBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailBalanceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetRetailPayout": {
      "post": {
        "summary": "GetRetailPayout retrieves a retail payout by its ID",
        "operationId": "MerchantService_GetRetailPayout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailPayoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailPayoutRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/GetStatistics": {
      "post": {
        "summary": "GetStatistics gets the billable stats for a merchant",
        "operationId": "MerchantService_GetStatistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetStatisticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetStatisticsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/ListBankAccounts": {
      "post": {
        "summary": "ListBankAccountsRequest returns the bank accounts attached to the connected account of the merchant",
        "operationId": "MerchantService_ListBankAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBankAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListBankAccountsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/ListPaymentCards": {
      "post": {
        "summary": "List payment cards",
        "operationId": "MerchantService_ListPaymentCards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentCardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPaymentCardsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/ListRetailPayouts": {
      "post": {
        "summary": "ListRetailPayouts lists the upcoming and completed payouts for the merchant's retail accounts",
        "operationId": "MerchantService_ListRetailPayouts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRetailPayoutsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRetailPayoutsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/ResetPaymentFacilitator": {
      "post": {
        "summary": "ResetPaymentFacilitator clears the existing payment facilitator account information for a merchant and all related RetailCustomerConfigs",
        "operationId": "MerchantService_ResetPaymentFacilitator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetPaymentFacilitatorRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/Search": {
      "post": {
        "summary": "Search merchants",
        "operationId": "MerchantService_Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchMerchantsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SearchMerchantsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SendSalesInvoiceEmail": {
      "post": {
        "summary": "SendSalesInvoiceEmail sends a sales invoice email to a merchant",
        "operationId": "MerchantService_SendSalesInvoiceEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendSalesInvoiceEmailRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SendSalesInvoiceReceiptEmail": {
      "post": {
        "summary": "SendSalesInvoiceReceiptEmail sends the sales invoice receipt email to the merchant",
        "operationId": "MerchantService_SendSalesInvoiceReceiptEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendSalesInvoiceReceiptEmailRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetAutoChargeInvoices": {
      "post": {
        "summary": "SetAutoChargeInvoices adjusts whether a merchant's invoices will be auto charged or not",
        "operationId": "MerchantService_SetAutoChargeInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetAutoChargeInvoicesRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetAutoPostInvoices": {
      "post": {
        "summary": "SetAutoPostInvoices sets the auto post invoices setting for a merchant",
        "operationId": "MerchantService_SetAutoPostInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetAutoPostInvoicesRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetDefaultBankAccount": {
      "post": {
        "summary": "SetDefaultBankAccount sets the default bank account of a merchant",
        "operationId": "MerchantService_SetDefaultBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetDefaultBankAccountRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetDefaultPaymentCard": {
      "post": {
        "summary": "SetDefaultPaymentCard sets the default payment method for a specific merchant to be the passed card_id.\nThe corresponding card will be charged when we collect payment in the billing system.",
        "operationId": "MerchantService_SetDefaultPaymentCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetDefaultPaymentCardRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetHasAlternativePaymentMethod": {
      "post": {
        "summary": "SetHasAlternativePaymentMethod sets a flag indicating whether a merchant has a payment method other than credit card on file",
        "operationId": "MerchantService_SetHasAlternativePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetHasAlternativePaymentMethodRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetIncludeInFinancialRecords": {
      "post": {
        "summary": "SetIncludeInFinancialRecords adjusts whether a merchant will be included within financial records",
        "operationId": "MerchantService_SetIncludeInFinancialRecords",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetIncludeInFinancialRecordsRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/SetNextRetailInvoiceSequence": {
      "post": {
        "summary": "SetNextRetailInvoiceSequence updates the next retail invoice sequence for a merchant",
        "operationId": "MerchantService_SetNextRetailInvoiceSequence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetNextRetailInvoiceSequenceRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/Update": {
      "post": {
        "summary": "Update a Merchant",
        "operationId": "MerchantService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMerchantRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/UpdatePaymentCard": {
      "post": {
        "summary": "Update a payment card in the system",
        "operationId": "MerchantService_UpdatePaymentCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePaymentCardRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/UpsertDefaultRetailCustomerConfiguration": {
      "post": {
        "summary": "UpsertDefaultRetailCustomerConfiguration updates the default retail customer configuration for the given merchant/group ID",
        "operationId": "MerchantService_UpsertDefaultRetailCustomerConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertDefaultRetailCustomerConfigurationRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.MerchantService/UpsertRetailConfiguration": {
      "post": {
        "summary": "UpsertRetailConfigurations creates or updates the retail group configuration",
        "operationId": "MerchantService_UpsertRetailConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertRetailConfigurationRequest"
            }
          }
        ],
        "tags": [
          "MerchantService"
        ]
      }
    },
    "/billing.v1.PaymentMethodService/DeletePaymentCard": {
      "post": {
        "summary": "DeletePaymentCard will remove the specific payment card using the unique ID",
        "operationId": "PaymentMethodService_DeletePaymentCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePaymentCardRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethodService"
        ]
      }
    },
    "/billing.v1.PaymentMethodService/List": {
      "post": {
        "summary": "List lists PaymentMethods\nCurrently, this only works for retail payment methods.",
        "operationId": "PaymentMethodService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPaymentMethodsRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethodService"
        ]
      }
    },
    "/billing.v1.PaymentMethodService/ListPaymentCards": {
      "post": {
        "summary": "ListRetailPaymentCards will retrieve all the card payment methods for a customer.\nImportant note: Currently, this endpoint only works for RETAIL payment methods. Please use MerchantService.ListPaymentCards for WHOLESALE.\nDeprecated: use List instead (handles more than just card)",
        "operationId": "PaymentMethodService_ListPaymentCards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentCardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPaymentCardsRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethodService"
        ]
      }
    },
    "/billing.v1.PaymentMethodService/SetDefaultPaymentMethod": {
      "post": {
        "summary": "SetDefaultPaymentMethod will set the specific payment method as default using the unique ID",
        "operationId": "PaymentMethodService_SetDefaultPaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetDefaultPaymentMethodRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethodService"
        ]
      }
    },
    "/billing.v1.PaymentService/CloseRetailDispute": {
      "post": {
        "summary": "Close a retail dispute for a payment",
        "operationId": "PaymentService_CloseRetailDispute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloseRetailDisputeRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/ConfigureRetailProvider": {
      "post": {
        "summary": "set up a new payment provider to accept retail payments",
        "operationId": "PaymentService_ConfigureRetailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConfigureRetailPaymentProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ConfigureRetailPaymentProviderRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/ConfirmRetail": {
      "post": {
        "summary": "Confirm a retail payment",
        "operationId": "PaymentService_ConfirmRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ConfirmRetailPaymentRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/GetRetail": {
      "post": {
        "summary": "Get a retail payment.",
        "operationId": "PaymentService_GetRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailPaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailPaymentRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/GetRetailDispute": {
      "post": {
        "summary": "Get a retail dispute for a payment",
        "operationId": "PaymentService_GetRetailDispute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailDisputeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailDisputeRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/GetRetailProvider": {
      "post": {
        "summary": "get retail provider gets the retail payment provider assigned to the merchant",
        "operationId": "PaymentService_GetRetailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailPaymentProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailPaymentProviderRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/GetWholesaleProviderPublicKey": {
      "post": {
        "summary": "GetWholesaleProviderPublicKey returns the payment provider's public API key for a merchant or location",
        "operationId": "PaymentService_GetWholesaleProviderPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWholesaleProviderPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWholesaleProviderPublicKeyRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/List": {
      "post": {
        "summary": "List wholesale payments",
        "operationId": "PaymentService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPaymentRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/ListRetail": {
      "post": {
        "summary": "Deprecated: use ListRetailTransactions",
        "operationId": "PaymentService_ListRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRetailPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRetailPaymentsRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/ListRetailDisputes": {
      "post": {
        "summary": "ListRetailDisputes list the disputes made against retail payments",
        "operationId": "PaymentService_ListRetailDisputes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRetailDisputesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRetailDisputesRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/ListRetailTransactions": {
      "post": {
        "summary": "ListRetailPayments lists the retail payments and refunds that have been made for a merchant",
        "operationId": "PaymentService_ListRetailTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRetailTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRetailTransactionsRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/PrepareRetail": {
      "post": {
        "summary": "Prepare a retail payment",
        "operationId": "PaymentService_PrepareRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PrepareRetailPaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PrepareRetailPaymentRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/RefundRetail": {
      "post": {
        "summary": "RefundRetail will create a refund against a retail payment. Can refund only up to the remaining, unrefunded amount of the charge.",
        "operationId": "PaymentService_RefundRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefundRetailPaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefundRetailPaymentRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/RetailPaymentsEnabled": {
      "post": {
        "summary": "returns a boolean indicating if retail payments are enabled for the given merchant or not",
        "operationId": "PaymentService_RetailPaymentsEnabled",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RetailPaymentsEnabledResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RetailPaymentsEnabledRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/RetailStatus": {
      "post": {
        "summary": "returns the status of a merchant's payment configuration along with support information",
        "operationId": "PaymentService_RetailStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RetailStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RetailStatusRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/SubmitEvidence": {
      "post": {
        "summary": "SubmitEvidence sends evidence for a payment dispute",
        "operationId": "PaymentService_SubmitEvidence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitEvidenceRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PaymentService/UpdateRetailProvider": {
      "post": {
        "summary": "update retail provider allows updating the configuration of an existing provider",
        "operationId": "PaymentService_UpdateRetailProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRetailPaymentProviderRequest"
            }
          }
        ],
        "tags": [
          "PaymentService"
        ]
      }
    },
    "/billing.v1.PricingService/DeleteRetail": {
      "post": {
        "summary": "DeleteRetail deletes a retail pricing plan product for a specific merchant and sku",
        "operationId": "PricingService_DeleteRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteRetailPricingRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/GetMultiBundleRetail": {
      "post": {
        "summary": "GetMultiBundleRetail calculates and returns the merchant specific pricing for multiple bundles",
        "operationId": "PricingService_GetMultiBundleRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiBundleRetailPricingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiBundleRetailPricingRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/GetMultiRetail": {
      "post": {
        "summary": "GetMultiRetail calculates and returns the merchant specific pricing for multiple products",
        "operationId": "PricingService_GetMultiRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiRetailPricingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiRetailPricingRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/GetMultiWholesaleCost": {
      "post": {
        "summary": "GetMultiWholesaleCost retrieves multiple wholesale costs for each of the SKUs of upcoming purchases",
        "operationId": "PricingService_GetMultiWholesaleCost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiWholesaleCostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiWholesaleCostRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/GetPurchaseCost": {
      "post": {
        "summary": "Get the cost for upcoming purchases",
        "operationId": "PricingService_GetPurchaseCost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPurchaseCostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPurchaseCostRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/GetWholesaleComparison": {
      "post": {
        "summary": "GetWholesaleComparison returns the non-merchant specific product pricing for multiple products",
        "operationId": "PricingService_GetWholesaleComparison",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWholesaleComparisonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWholesaleComparisonRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/SetWholesaleProductStrategy": {
      "post": {
        "summary": "Sets the wholesale billing strategy for a product, scoped to a specific merchant",
        "operationId": "PricingService_SetWholesaleProductStrategy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetWholesaleProductStrategyRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/SetWholesaleProductVolumeCommitment": {
      "post": {
        "summary": "Sets the wholesale volume commitment for a product, scoped to a specific merchant",
        "operationId": "PricingService_SetWholesaleProductVolumeCommitment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetWholesaleProductVolumeCommitmentRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/UpsertRetail": {
      "post": {
        "summary": "UpsertRetail creates the retail pricing plan product for a specific merchant and sku",
        "operationId": "PricingService_UpsertRetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertRetailPricingRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.PricingService/UpsertWholesale": {
      "post": {
        "summary": "UpsertWholesale creates the wholesale pricing plan product for a specific merchant and sku",
        "operationId": "PricingService_UpsertWholesale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertWholesalePricingRequest"
            }
          }
        ],
        "tags": [
          "PricingService"
        ]
      }
    },
    "/billing.v1.ProductService/Create": {
      "post": {
        "summary": "Create creates a new product configuration.",
        "operationId": "ProductService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateProductRequest"
            }
          }
        ],
        "tags": [
          "ProductService"
        ]
      }
    },
    "/billing.v1.ProductService/Delete": {
      "post": {
        "summary": "DeleteProduct will delete an existing product configuration",
        "operationId": "ProductService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteProductRequest"
            }
          }
        ],
        "tags": [
          "ProductService"
        ]
      }
    },
    "/billing.v1.ProductService/Update": {
      "post": {
        "summary": "Update updates and existing product configuration.",
        "operationId": "ProductService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProductRequest"
            }
          }
        ],
        "tags": [
          "ProductService"
        ]
      }
    },
    "/billing.v1.ProductSummaryService/ListSubscriptionRetentionByGroup": {
      "post": {
        "summary": "ListSubscriptionRetentionByGroup will list subscription retention metrics bundled by group",
        "operationId": "ProductSummaryService_ListSubscriptionRetentionByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRetentionByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRetentionRequest"
            }
          }
        ],
        "tags": [
          "ProductSummaryService"
        ]
      }
    },
    "/billing.v1.ProductSummaryService/ListSubscriptionRetentionBySKU": {
      "post": {
        "summary": "ListSubscriptionRetentionBySKU will list subscription retention metrics bundled by SKU",
        "operationId": "ProductSummaryService_ListSubscriptionRetentionBySKU",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRetentionBySKUResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRetentionRequest"
            }
          }
        ],
        "tags": [
          "ProductSummaryService"
        ]
      }
    },
    "/billing.v1.PurchaseService/GetMultiCustomerSummaries": {
      "post": {
        "summary": "Get purchase item summaries for a provided list of customers",
        "operationId": "PurchaseService_GetMultiCustomerSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiCustomerSummariesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiCustomerSummariesRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/List": {
      "post": {
        "summary": "List purchases",
        "operationId": "PurchaseService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPurchaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPurchaseRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/ListPurchaseItems": {
      "post": {
        "summary": "List purchase items who's purchase parents are not deleted/voided",
        "operationId": "PurchaseService_ListPurchaseItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPurchaseItemsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPurchaseItemsRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/PauseDunning": {
      "post": {
        "summary": "Pauses dunning until the given date for a purchase",
        "operationId": "PurchaseService_PauseDunning",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PauseDunningRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/ResumeDunning": {
      "post": {
        "summary": "Resumes dunning for the purchase",
        "operationId": "PurchaseService_ResumeDunning",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResumeDunningRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/Retry": {
      "post": {
        "summary": "Retry a purchase",
        "operationId": "PurchaseService_Retry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RetryPurchaseRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/StopDunning": {
      "post": {
        "summary": "Stops dunning for the purchase until manually resumed",
        "operationId": "PurchaseService_StopDunning",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1StopDunningRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.PurchaseService/Void": {
      "post": {
        "summary": "Void a purchase",
        "operationId": "PurchaseService_Void",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VoidPurchaseRequest"
            }
          }
        ],
        "tags": [
          "PurchaseService"
        ]
      }
    },
    "/billing.v1.RecurringInvoiceService/CreateRecurringInvoice": {
      "post": {
        "summary": "Create a new recurring invoice.",
        "operationId": "RecurringInvoiceService_CreateRecurringInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RecurringInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Recurring invoices allow for invoices to be generated at a set interval for an account.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RecurringInvoice"
            }
          }
        ],
        "tags": [
          "RecurringInvoiceService"
        ]
      }
    },
    "/billing.v1.RecurringInvoiceService/DeleteRecurringInvoice": {
      "post": {
        "summary": "Delete an existing recurring invoice.",
        "operationId": "RecurringInvoiceService_DeleteRecurringInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request to delete a recurring invoice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteRecurringInvoiceRequest"
            }
          }
        ],
        "tags": [
          "RecurringInvoiceService"
        ]
      }
    },
    "/billing.v1.RecurringInvoiceService/GetRecurringInvoice": {
      "post": {
        "summary": "Get an existing recurring invoice.",
        "operationId": "RecurringInvoiceService_GetRecurringInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RecurringInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request to get a recurring invoice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRecurringInvoiceRequest"
            }
          }
        ],
        "tags": [
          "RecurringInvoiceService"
        ]
      }
    },
    "/billing.v1.RecurringInvoiceService/ListRecurringInvoices": {
      "post": {
        "summary": "List recurring invoices for a customer.",
        "operationId": "RecurringInvoiceService_ListRecurringInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRecurringInvoicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request to list recurring invoices.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRecurringInvoicesRequest"
            }
          }
        ],
        "tags": [
          "RecurringInvoiceService"
        ]
      }
    },
    "/billing.v1.RecurringInvoiceService/UpdateRecurringInvoice": {
      "post": {
        "summary": "Update an existing recurring invoice.",
        "operationId": "RecurringInvoiceService_UpdateRecurringInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RecurringInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request to update a recurring invoice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRecurringInvoiceRequest"
            }
          }
        ],
        "tags": [
          "RecurringInvoiceService"
        ]
      }
    },
    "/billing.v1.RefundService/Create": {
      "post": {
        "summary": "Create a refund for a payment",
        "operationId": "RefundService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRefundRequest"
            }
          }
        ],
        "tags": [
          "RefundService"
        ]
      }
    },
    "/billing.v1.RefundService/List": {
      "post": {
        "summary": "List refunds that match a payment in the given list",
        "operationId": "RefundService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRefundsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListRefundsRequest"
            }
          }
        ],
        "tags": [
          "RefundService"
        ]
      }
    },
    "/billing.v1.RetailCustomerConfigurationService/Get": {
      "post": {
        "summary": "Get returns a retail customer configuration",
        "operationId": "RetailCustomerConfigurationService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRetailCustomerConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRetailCustomerConfigurationRequest"
            }
          }
        ],
        "tags": [
          "RetailCustomerConfigurationService"
        ]
      }
    },
    "/billing.v1.RetailCustomerConfigurationService/Upsert": {
      "post": {
        "summary": "Upsert creates or updates the retail customer configuration",
        "operationId": "RetailCustomerConfigurationService_Upsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertRetailCustomerConfigurationRequest"
            }
          }
        ],
        "tags": [
          "RetailCustomerConfigurationService"
        ]
      }
    },
    "/billing.v1.SalesCreditNoteService/Create": {
      "post": {
        "operationId": "SalesCreditNoteService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSalesCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "SalesCreditNoteService"
        ]
      }
    },
    "/billing.v1.SalesCreditNoteService/List": {
      "post": {
        "operationId": "SalesCreditNoteService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSalesCreditNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSalesCreditNoteRequest"
            }
          }
        ],
        "tags": [
          "SalesCreditNoteService"
        ]
      }
    },
    "/billing.v1.SalesInvoiceService/Get": {
      "post": {
        "summary": "Get a single sales invoice by the given id",
        "operationId": "SalesInvoiceService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSalesInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSalesInvoiceRequest"
            }
          }
        ],
        "tags": [
          "SalesInvoiceService"
        ]
      }
    },
    "/billing.v1.SalesInvoiceService/List": {
      "post": {
        "operationId": "SalesInvoiceService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSalesInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSalesInvoiceRequest"
            }
          }
        ],
        "tags": [
          "SalesInvoiceService"
        ]
      }
    },
    "/billing.v1.SalesInvoiceService/Post": {
      "post": {
        "summary": "Post posts the specified invoice to Financial Force",
        "operationId": "SalesInvoiceService_Post",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostSalesInvoiceRequest"
            }
          }
        ],
        "tags": [
          "SalesInvoiceService"
        ]
      }
    },
    "/billing.v1.SubscriptionRelationshipService/GetMulti": {
      "post": {
        "summary": "GetMulti will return the subscription relationships in the order the ids are passed in.",
        "operationId": "SubscriptionRelationshipService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiSubscriptionRelationshipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiSubscriptionRelationshipsRequest"
            }
          }
        ],
        "tags": [
          "SubscriptionRelationshipService"
        ]
      }
    },
    "/billing.v1.SubscriptionRelationshipService/List": {
      "post": {
        "summary": "List will return subscription relationships matching the filters and paging options.",
        "operationId": "SubscriptionRelationshipService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRelationshipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSubscriptionRelationshipsRequest"
            }
          }
        ],
        "tags": [
          "SubscriptionRelationshipService"
        ]
      }
    },
    "/billing.v1.SubscriptionRelationshipService/Replace": {
      "post": {
        "summary": "Replace replaces the edges in the subscription relationship graph. This is guaranteed to be an idempotent operation (origin, target, relationship)",
        "operationId": "SubscriptionRelationshipService_Replace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReplaceSubscriptionRelationshipsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceSubscriptionRelationshipsRequest"
            }
          }
        ],
        "tags": [
          "SubscriptionRelationshipService"
        ]
      }
    },
    "/billing.v1.TaxService/Archive": {
      "post": {
        "summary": "Archive archives a tax rate for a merchant",
        "operationId": "TaxService_Archive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ArchiveTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/BulkReplaceTaxRules": {
      "post": {
        "summary": "BulkReplaceTaxRules creates or updates tax rules for a merchant",
        "operationId": "TaxService_BulkReplaceTaxRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkReplaceTaxRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkReplaceTaxRulesRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/Calculate": {
      "post": {
        "summary": "Calculate sales tax for the given merchant and customer id\nDEPRECATED: Use TaxService.CalculateLineItems so tax rules can be applied",
        "operationId": "TaxService_Calculate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalculateTaxResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CalculateTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/CalculateLineItems": {
      "post": {
        "summary": "Calculate individual line item sales taxes for the given merchant and customer id",
        "operationId": "TaxService_CalculateLineItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalculateLineItemTaxesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CalculateLineItemTaxesRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/Create": {
      "post": {
        "summary": "Create a new tax for a merchant",
        "operationId": "TaxService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaxResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/DeleteTaxRule": {
      "post": {
        "summary": "DeleteTaxRule deletes a tax rule",
        "operationId": "TaxService_DeleteTaxRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteTaxRuleRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/GetMulti": {
      "post": {
        "summary": "GetMulti returns multiple tax rates for the given ids",
        "operationId": "TaxService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiTaxResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/GetTaxRule": {
      "post": {
        "summary": "GetTaxRule returns a tax rule",
        "operationId": "TaxService_GetTaxRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaxRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetTaxRuleRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/List": {
      "post": {
        "summary": "List returns a paged result of taxes for a merchant",
        "operationId": "TaxService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTaxResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/ListTaxRules": {
      "post": {
        "summary": "ListTaxRules returns a paged result of tax rules",
        "operationId": "TaxService_ListTaxRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTaxRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListTaxRulesRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/ReplaceTaxRule": {
      "post": {
        "summary": "ReplaceTaxRule creates or updates a tax rule for a merchant",
        "operationId": "TaxService_ReplaceTaxRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReplaceTaxRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceTaxRuleRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.TaxService/Update": {
      "post": {
        "summary": "Update a tax for a merchant",
        "operationId": "TaxService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateTaxRequest"
            }
          }
        ],
        "tags": [
          "TaxService"
        ]
      }
    },
    "/billing.v1.VendorService/GenerateReport": {
      "post": {
        "summary": "Generate an report scoped to a vendor for a period.",
        "operationId": "VendorService_GenerateReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateVendorReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateVendorReportRequest"
            }
          }
        ],
        "tags": [
          "VendorService"
        ]
      }
    },
    "/billing.v1.VendorService/GetRevenueStats": {
      "post": {
        "summary": "GetRevenueStats returns the basic stats of a revenue report, based off the data used for vendor reports.",
        "operationId": "VendorService_GetRevenueStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRevenueStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRevenueStatsRequest"
            }
          }
        ],
        "tags": [
          "VendorService"
        ]
      }
    }
  },
  "definitions": {
    "BundleItemPrice": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Price amount"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "description": "The setup fee for the product."
        }
      },
      "title": "Price represent the price of a bundle item"
    },
    "BundlePricingPriceAndFrequency": {
      "type": "object",
      "properties": {
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The frequency for the price"
        },
        "effectivePrice": {
          "type": "string",
          "format": "int64",
          "description": "The price of the bundle at the specified frequency after bundle discounts."
        },
        "initialPrice": {
          "type": "string",
          "format": "int64",
          "title": "The initial or starting at price of the bundle (includes setup fee and accounts for any bundle discounts)"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "title": "The setup fee of the bundle at the specified frequency"
        }
      }
    },
    "CalculateLineItemTaxesResponseLineItemTaxes": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The identifier of what products/subscription this item refers to"
        },
        "taxableAmount": {
          "type": "number",
          "format": "double",
          "title": "The taxable amount of the line item in cents and to however much precision we can get with floating point values\nin practice, that will be 10e(-4 - [# of decimal points in the rate percentage])"
        },
        "taxRateIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tax rate ids that applied to this line item"
        }
      }
    },
    "CanCreateSubscriptionsRequestSubscriptionItem": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "The SKU of the product."
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "description": "The frequency the product is billed at."
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "description": "The order quantity of this product."
        }
      }
    },
    "DateFilterDateField": {
      "type": "string",
      "enum": [
        "CREATED",
        "ISSUED"
      ],
      "default": "CREATED",
      "title": "- CREATED: Filter invoice by their created date\n - ISSUED: Filter invoice by their issued date"
    },
    "GetMultiSubscriptionsRequestKey": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        }
      }
    },
    "GetWholesaleComparisonRequestGetWholesaleComparisonFilters": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The unique identifier of products (Stock Keeping Unit)"
        },
        "currencyCode": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Currencies, using the ISO 3 letter code"
        }
      }
    },
    "GetWholesaleComparisonResponseGetWholesaleComparisonResult": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "productPricing": {
          "$ref": "#/definitions/v1ProductPricing"
        }
      }
    },
    "ListInvoicesRequestFiltersDateFilter": {
      "type": "object",
      "properties": {
        "dateField": {
          "$ref": "#/definitions/DateFilterDateField"
        },
        "dateLte": {
          "type": "string",
          "format": "date-time"
        },
        "dateGte": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListPaymentRequestListPaymentFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "allocationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListPricingPlanProductsRequestListPricingPlanProductsFilters": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "pricingPlanIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListProductsRequestListProductsFilters": {
      "type": "object",
      "properties": {
        "hasDiscount": {
          "type": "boolean",
          "title": "has discount filters only products that have discounts applied"
        },
        "hasPricingOverride": {
          "type": "boolean",
          "title": "has pricing override filters only on products that have an override for that merchant"
        },
        "productType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/billingv1ProductType"
          },
          "title": "the product types that should be returned"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the skus of products that should be returned"
        }
      }
    },
    "ListPurchaseItemsRequestListPurchaseItemsFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListPurchaseRequestListPurchaseBillingStrategyFilter": {
      "type": "object",
      "properties": {
        "billingStrategy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/billingv1BillingStrategy"
          }
        }
      }
    },
    "ListPurchaseRequestListPurchaseFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "purchaseId": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "billingStrategyFilter": {
          "$ref": "#/definitions/ListPurchaseRequestListPurchaseBillingStrategyFilter"
        },
        "state": {
          "$ref": "#/definitions/ListPurchaseRequestState"
        },
        "minPrice": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/v1PurchaseStatus"
        },
        "includeVoided": {
          "type": "boolean"
        },
        "dunningPauseStart": {
          "type": "string",
          "format": "date-time"
        },
        "dunningPauseEnd": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ListPurchaseRequestState": {
      "type": "string",
      "enum": [
        "LIST_PURCHASE_REQUEST_STATE_ALL",
        "LIST_PURCHASE_REQUEST_STATE_OVERDUE"
      ],
      "default": "LIST_PURCHASE_REQUEST_STATE_ALL"
    },
    "ListRecurringInvoicesFiltersDetailedInterval": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/v1Interval"
        },
        "intervalCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ListRetailDisputesRequestListRetailDisputesFilters": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1DisputeStatus",
          "description": "Filter to disputes by specific status. We only support filtering by one status at a time."
        }
      },
      "title": "Filters to apply when listing disputes"
    },
    "ListRetailPaymentsRequestListRetailPaymentsFilters": {
      "type": "object",
      "properties": {
        "payoutId": {
          "type": "string",
          "title": "the payout ID you want to list purchases for"
        },
        "customerId": {
          "type": "string",
          "description": "Filter payments to a specific customer id."
        },
        "createdDateGte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to payments greater than or equal to the given timestamp"
        },
        "createdDateLte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to payments less than or equal to the given timestamp"
        }
      }
    },
    "ListRetailTransactionsRequestListRetailTransactionsFilters": {
      "type": "object",
      "properties": {
        "payoutId": {
          "type": "string",
          "description": "the payout ID you want to list purchases for."
        },
        "createdDateGte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to transactions greater than or equal to the given timestamp"
        },
        "createdDateLte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to transactions less than or equal to the given timestamp"
        },
        "type": {
          "$ref": "#/definitions/v1RetailTransactionType",
          "title": "Filters to transactions of the specified type"
        },
        "customerId": {
          "type": "string",
          "description": "Filter transactions to a specific customer id."
        },
        "invoiceId": {
          "type": "string",
          "title": "the invoice ID to list purchases for"
        }
      }
    },
    "ListSalesCreditNoteRequestListSalesCreditNoteFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "merchant to list credit notes for"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SalesCreditNoteStatus"
          },
          "title": "statuses to list credit notes for"
        }
      }
    },
    "ListSalesInvoiceRequestListSalesInvoiceFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "merchant to list invoices for"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SalesInvoiceStatus"
          },
          "title": "statuses to list invoices for"
        },
        "paymentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentStatuses"
          },
          "title": "the payment statuses to list invoices for"
        },
        "invoiceId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the ids to filter by"
        }
      }
    },
    "ListSubscriptionRetentionByGroupResponseSubscriptionRetentionByGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string",
          "title": "The identifier for the subset of retail customers that the merchant is selling to"
        },
        "subscriptionMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetentionMetrics"
          },
          "title": "The subscription metrics for the group"
        }
      }
    },
    "PaymentCardCARD_TYPE": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD",
        "AMEX",
        "DISCOVER",
        "JCB",
        "DINERS_CLUB"
      ],
      "default": "UNKNOWN",
      "title": "the card type, ex. Visa, Mastercard, AMEX"
    },
    "PaymentCardFUNDING_TYPE": {
      "type": "string",
      "enum": [
        "FUNDING_TYPE_UNKNOWN",
        "FUNDING_TYPE_CREDIT",
        "FUNDING_TYPE_DEBIT",
        "FUNDING_TYPE_PREPAID"
      ],
      "default": "FUNDING_TYPE_UNKNOWN"
    },
    "PaymentPaymentAllocation": {
      "type": "object",
      "properties": {
        "referenceId": {
          "type": "string",
          "title": "Where this payment is allocated to"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents) of this payment that has been allocated"
        },
        "type": {
          "$ref": "#/definitions/v1PaymentAllocationType",
          "title": "A reference to the type of payment on the allocation"
        }
      }
    },
    "PrepareRetailPaymentRequestOrder": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "the oder identifier"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "the amount of the order in cents"
        },
        "currencyCode": {
          "type": "string",
          "title": "the currency_code to create the payment intent within"
        },
        "paymentMethodId": {
          "type": "string",
          "title": "The payment method to create the payment intent with"
        }
      }
    },
    "PricingRule": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "int64",
          "title": "Minimum unit range"
        },
        "max": {
          "type": "string",
          "format": "int64",
          "title": "Maximum unit range"
        },
        "units": {
          "type": "string",
          "format": "int64",
          "title": "Number of units sold in range"
        },
        "unitPrice": {
          "type": "string",
          "format": "int64",
          "title": "Price per unit sold in range"
        },
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "title": "Total dollar amount sold in range in cents"
        }
      }
    },
    "PricingRuleType": {
      "type": "string",
      "enum": [
        "STANDARD",
        "STAIRSTEP",
        "TIERED",
        "CUSTOM"
      ],
      "default": "STANDARD"
    },
    "ProductSummaryDiscountDiscountType": {
      "type": "string",
      "enum": [
        "FIXED_AMOUNT",
        "PERCENT_AMOUNT",
        "FIXED_NUMBER_OF_UNITS",
        "FIXED_AMOUNT_PER_UNIT"
      ],
      "default": "FIXED_AMOUNT"
    },
    "RetailPaymentACHDetails": {
      "type": "object",
      "properties": {
        "lastFourDigits": {
          "type": "string"
        }
      }
    },
    "RetailPaymentACSSDetails": {
      "type": "object",
      "properties": {
        "lastFourDigits": {
          "type": "string"
        }
      }
    },
    "RetailPaymentCardDetails": {
      "type": "object",
      "properties": {
        "cardType": {
          "$ref": "#/definitions/v1CardType"
        },
        "lastFourDigits": {
          "type": "string"
        }
      },
      "title": "Details about the credit card use for the payment"
    },
    "RetailPaymentPaymentMethodDetailsType": {
      "type": "string",
      "enum": [
        "PAYMENT_METHOD_DETAILS_TYPE_UNSET",
        "PAYMENT_METHOD_DETAILS_TYPE_CARD",
        "PAYMENT_METHOD_DETAILS_TYPE_ACH_DEBIT",
        "PAYMENT_METHOD_DETAILS_TYPE_ACSS_DEBIT"
      ],
      "default": "PAYMENT_METHOD_DETAILS_TYPE_UNSET"
    },
    "RetailStatusResponseVerificationError": {
      "type": "object",
      "properties": {
        "requirement": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "RetailStatusResponseVerificationRequirements": {
      "type": "object",
      "properties": {
        "due": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of requirements that are currently due before payments can be accepted"
        },
        "error": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RetailStatusResponseVerificationError"
          },
          "title": "List of errors that explain why the list of requirements haven't been met"
        },
        "currentDeadline": {
          "type": "string",
          "format": "date-time",
          "title": "Current deadline for when the 'currently due' requirements are due"
        },
        "eventuallyDue": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of requirements that are eventually due else the account may be disabled"
        }
      }
    },
    "SearchMerchantsRequestSortBy": {
      "type": "string",
      "enum": [
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_MERCHANT_ID",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_COMPANY_NAME",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_CONTACT_NAME",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_EMAIL_ADDRESS",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_COUNTRY",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_STATE",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_CREATED",
        "SEARCH_MERCHANTS_REQUEST_SORT_BY_UPDATED"
      ],
      "default": "SEARCH_MERCHANTS_REQUEST_SORT_BY_MERCHANT_ID",
      "title": "All supported columns we are prepared to sort by"
    },
    "TaxRuleProductProductIdentifier": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The unique identifier of the product"
        },
        "type": {
          "$ref": "#/definitions/billingv1ProductType",
          "title": "The type of product"
        },
        "groupId": {
          "type": "string",
          "title": "The identifier of the group the product belongs to\nIf this is empty, then it is assumed that the product is not part of a group"
        }
      }
    },
    "TaxRuleTaxRuleEntity": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/v1TaxRuleCustomer",
          "title": "Customer entity type"
        },
        "product": {
          "$ref": "#/definitions/v1TaxRuleProduct",
          "title": "Product entity type"
        }
      }
    },
    "UpdateContractRequestMutation": {
      "type": "object",
      "properties": {
        "netD": {
          "type": "string",
          "format": "int64",
          "title": "The grace period (in days) from the due date for an invoice to be paid"
        },
        "currencyCode": {
          "type": "string",
          "title": "The currency ISO code for the contract"
        },
        "status": {
          "type": "string",
          "title": "The status of the contract"
        },
        "dimension": {
          "type": "string",
          "title": "The revenue dimension on the contract"
        },
        "signed": {
          "type": "string",
          "format": "date-time",
          "title": "The time the contract was signed"
        },
        "activated": {
          "type": "string",
          "format": "date-time",
          "title": "The time the contract was activated"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The time the contract will end"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "title": "The time of the last contract ammendment"
        },
        "creditLimit": {
          "type": "string",
          "format": "int64",
          "title": "The credit limit on the contract"
        },
        "subscriptionId": {
          "type": "string",
          "description": "The contract's new subscription id."
        }
      },
      "description": "Mutation mutates a subject in a MutateSubject request."
    },
    "billingv1BillingStrategy": {
      "type": "string",
      "enum": [
        "BILLING_STRATEGY_NONE",
        "BILLING_STRATEGY_END_OF_PERIOD",
        "BILLING_STRATEGY_START_OF_PERIOD",
        "BILLING_STRATEGY_INSTANTLY",
        "BILLING_STRATEGY_END_OF_DAY"
      ],
      "default": "BILLING_STRATEGY_NONE"
    },
    "billingv1Discount": {
      "type": "object",
      "properties": {
        "discountId": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated: please use the id field as the replacement for this field.\ndiscount_id is a unique identifier for the discount"
        },
        "discountType": {
          "$ref": "#/definitions/billingv1DiscountType",
          "description": "Discount type eg. fixed_amount, percent_amount, etc."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Discounted dollar amount in cents"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount starts/started"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount ends/ended"
        },
        "resetEachPeriod": {
          "type": "boolean",
          "title": "Whether or not the discount's usage should reset each period"
        },
        "merchantId": {
          "type": "string",
          "title": "The unique identifier for the merchant"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount was created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount was updated"
        },
        "sku": {
          "type": "string",
          "title": "The unique stock keeping unit the discount is applied to"
        },
        "id": {
          "type": "string",
          "title": "An identifier field scoped to a specific merchant (and customer, if customer_id is set)"
        },
        "description": {
          "type": "string",
          "title": "The description so we know what the discount is for"
        },
        "customerId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the customer the discount is applied to"
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The consumer type of the discount"
        },
        "subscriptionId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the subscription the discount is applied to"
        },
        "numberOfBillingPeriods": {
          "type": "string",
          "format": "int64",
          "title": "The number of billing periods the discount is applied to regardless of the Discount's `end` date"
        }
      }
    },
    "billingv1DiscountType": {
      "type": "string",
      "enum": [
        "DISCOUNT_TYPE_FIXED_AMOUNT",
        "DISCOUNT_TYPE_PERCENT_AMOUNT",
        "DISCOUNT_TYPE_FIXED_NUMBER_OF_UNITS",
        "DISCOUNT_TYPE_FIXED_AMOUNT_PER_UNIT"
      ],
      "default": "DISCOUNT_TYPE_FIXED_AMOUNT"
    },
    "billingv1DisputeEvidence": {
      "type": "object",
      "properties": {
        "customerCommunication": {
          "$ref": "#/definitions/v1File",
          "description": "File containing evidence of communication with the customer."
        },
        "customerSignature": {
          "$ref": "#/definitions/v1File",
          "description": "File containing the customer's signature."
        },
        "shippingDocumentation": {
          "$ref": "#/definitions/v1File",
          "description": "File containing evidence of the shipping information."
        },
        "receipt": {
          "$ref": "#/definitions/v1File",
          "description": "File containing the receipt."
        },
        "uncategorizedFile": {
          "$ref": "#/definitions/v1File",
          "title": "documents that don't fall into any other evidence category"
        },
        "billingAddress": {
          "type": "string",
          "title": "The customer's billing address"
        },
        "customerEmailAddress": {
          "type": "string",
          "title": "The customer's email"
        },
        "customerName": {
          "type": "string",
          "title": "The customer's name"
        },
        "productDescription": {
          "type": "string",
          "title": "The description of the product"
        }
      }
    },
    "billingv1LineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identifier of an item"
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents)"
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "title": "The quantity of items"
        },
        "description": {
          "type": "string",
          "title": "The name or human readable description"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "calculated total which includes discounts and taxes"
        },
        "appliedTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "title": "The tax rates which apply to the line item"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The default tax rates to apply to the line item"
        },
        "subtotal": {
          "type": "string",
          "format": "int64",
          "title": "The subtotal of the line item"
        }
      }
    },
    "billingv1ProductType": {
      "type": "string",
      "enum": [
        "PRODUCT_TYPE_INVALID",
        "PRODUCT_TYPE_STANDARD_PRODUCT",
        "PRODUCT_TYPE_VENDASTA_PRODUCT",
        "PRODUCT_TYPE_SUBSCRIPTION",
        "PRODUCT_TYPE_FEE",
        "PRODUCT_TYPE_PRIVATE_PRODUCT",
        "PRODUCT_TYPE_PARTNER_SUPPORT_SALES",
        "PRODUCT_TYPE_PACKAGE"
      ],
      "default": "PRODUCT_TYPE_INVALID"
    },
    "billingv1Subscription": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "title": "(Optional) the date at which billing should occur. This date can be in the past"
        },
        "renewalState": {
          "$ref": "#/definitions/v1RenewalState",
          "title": "The state that the subscription is getting created in"
        },
        "proratedTo": {
          "type": "string",
          "format": "date-time",
          "description": "DEPRECATED for using in subscription creation: use `align_with` instead\n(Optional) The date to prorate the subscription to. If billing_start is Jan 1 and prorated_to is Jan 15, the price should reflect the period from Jan 15 - Jan 31 but will renew for a full month on Feb 1 (assuming monthly frequency)."
        },
        "retailBundleId": {
          "type": "string",
          "title": "(Optional) the bundle that applies to calculating retail pricing"
        },
        "forResale": {
          "type": "boolean",
          "title": "indicates whether the subscription exists for resale by the merchant"
        },
        "customUnitPrice": {
          "type": "string",
          "format": "int64",
          "title": "The wholesale custom unit price to be set on the subscription"
        },
        "alignWith": {
          "$ref": "#/definitions/v1AlignmentSubscription",
          "title": "Used on subscription create to align the anniversary date of a new subscription with an existing subscription\ntriggers prorated billing on the new subscription"
        },
        "bundleInstanceId": {
          "type": "string",
          "description": "An ID that associated the subscription with others purchased as part of the same bundle. This is important when purchasing multiples of a bundle as part of the same transaction,\nas it allows the system to determine which subscriptions are part of which instance of the bundle.\nThis can be any string, as long as it is unique within the set of subscriptions created within the same RPC call."
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "the frequency at which the wholesale subscription will be billed"
        },
        "retailAmount": {
          "type": "string",
          "format": "int64",
          "title": "The retail amount for the subscription. This is in the smallest currency unit.\nDEPRECATED: this field is not used by the billing system. Prices must be set using PricingService.UpsertRetail"
        },
        "retailFrequency": {
          "$ref": "#/definitions/v1Frequency",
          "description": "The frequency at which the retail price will be billed."
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The billing relationship the subscription is being created for"
        },
        "renewalStart": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired renewal start date. This should be used when the subscription is being created with a specific renewal start date in mind."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired expiry date. This should be used when the subscription is being created with a specific end date in mind."
        },
        "autoBillable": {
          "type": "boolean",
          "title": "Specifies whether the subscription should result in charges (ie. through invoices) to the customer"
        },
        "subscriptionId": {
          "type": "string",
          "title": "The identifier of the subscription\nThis id is meant to match with an existing SubscriptionPreset so fields can be hydrated from that preset\nIf there is no matching SubscriptionPreset, this id will be ignored and a new id will be auto-generated"
        },
        "billingCycleAnchor": {
          "type": "string",
          "format": "date-time",
          "description": "Acts as an anchor date for determining when a renewal is recorded or prepared to be charged.\nIt is called an anchor date because it does not reflect the actual date, but is used to compute future dates."
        }
      },
      "description": "A subscription connects a customer to products/services. It determines what your customer has signed up for and how often and if they're charged recurringly for it."
    },
    "billingv1SubscriptionStatus": {
      "type": "string",
      "enum": [
        "SUBSCRIPTION_STATUS_UNSET",
        "SUBSCRIPTION_STATUS_ACTIVE",
        "SUBSCRIPTION_STATUS_EXPIRED"
      ],
      "default": "SUBSCRIPTION_STATUS_UNSET"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "v1AccountBalance": {
      "type": "object",
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BalanceAmount"
          },
          "title": "the balance by currency that is available to be transferred or paid out"
        }
      },
      "title": "AccountBalance represents an account's current balance"
    },
    "v1AddBundleRequest": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "bundleId": {
          "type": "string"
        }
      }
    },
    "v1AddBundleResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1AddCreditRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "currency": {
          "type": "string",
          "title": "The currency that this credit is in"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the credit"
        },
        "idempotencyKey": {
          "type": "string",
          "description": "[OPTIONAL] A unique key used to prevent request duplication and allows safety when retrying requests."
        },
        "reason": {
          "type": "string",
          "description": "Reason the credit was added."
        },
        "memo": {
          "type": "string",
          "title": "The memo for the credit"
        }
      }
    },
    "v1AddLineItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "Identifier for the invoice"
        },
        "sku": {
          "type": "string",
          "title": "The identifier of what products/subscription this item refers to. Does not conform to the SKU standard"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents)"
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "title": "The number of items purchased"
        },
        "description": {
          "type": "string",
          "title": "The name or human readable description of what is being purchased"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The default tax rates to apply to the invoice"
        },
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedDiscount"
          },
          "title": "the discounts to apply to this invoice item"
        },
        "servicePeriodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start of the service period associated with the line item"
        },
        "servicePeriodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end of the service period associated with the line item"
        }
      }
    },
    "v1AddLineItemResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1Adjustment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "currency": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fee": {
          "type": "string",
          "format": "int64"
        },
        "net": {
          "type": "string",
          "format": "int64"
        },
        "refund": {
          "$ref": "#/definitions/v1RetailRefund"
        },
        "dispute": {
          "$ref": "#/definitions/v1Dispute"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1AlignmentSubscription": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        }
      },
      "title": "an alignment subscription is specified in a create subscription request to align the new subscription to an existing subscription"
    },
    "v1AppliedBundle": {
      "type": "object",
      "properties": {
        "bundleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "bundleItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedBundleItem"
          }
        },
        "hideBundleItems": {
          "type": "boolean"
        },
        "bundleInstanceId": {
          "type": "string"
        }
      }
    },
    "v1AppliedBundleItem": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "discountType": {
          "type": "string"
        },
        "discountAmount": {
          "type": "string",
          "format": "int64"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1AppliedCredit": {
      "type": "object",
      "properties": {
        "appliedAmount": {
          "type": "string",
          "format": "int64"
        },
        "referenceId": {
          "type": "string"
        },
        "referenceType": {
          "$ref": "#/definitions/v1CreditType"
        }
      }
    },
    "v1AppliedCreditNote": {
      "type": "object",
      "properties": {
        "creditNoteId": {
          "type": "string",
          "title": "The credit note id"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The credit amount applied in cents"
        },
        "creditNoteType": {
          "$ref": "#/definitions/v1CreditNoteType",
          "title": "The type of credit note"
        },
        "creditNoteNumber": {
          "type": "string",
          "title": "The credit note number"
        }
      }
    },
    "v1AppliedDiscount": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/billingv1DiscountType",
          "description": "Discount type eg. fixed_amount, percent_amount, etc."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "title": "Value of the discount"
        },
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "title": "Discounted dollar amount in cents\nthis is computed on the server"
        },
        "description": {
          "type": "string",
          "title": "Full english description"
        },
        "referenceId": {
          "type": "string",
          "title": "reference_id could be a discount_id, or a bundle_id"
        }
      }
    },
    "v1AppliedFee": {
      "type": "object",
      "properties": {
        "appliedAmount": {
          "type": "string",
          "format": "int64",
          "title": "The resolved fee amount applied to the purchase"
        },
        "fee": {
          "$ref": "#/definitions/v1Fee",
          "title": "The Fee being applied"
        }
      },
      "title": "Includes the calculated amount of the fee, and the configuration of the Fee being applied on a purchase item"
    },
    "v1AppliedReferenceType": {
      "type": "string",
      "enum": [
        "APPLIED_REFERENCE_TYPE_UNSPECIFIED",
        "APPLIED_REFERENCE_TYPE_INVOICE"
      ],
      "default": "APPLIED_REFERENCE_TYPE_UNSPECIFIED"
    },
    "v1AppliedTaxRate": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The amount, in cents, of the tax."
        },
        "taxRateId": {
          "type": "string",
          "description": "The tax rate that was applied to get this tax amount."
        },
        "name": {
          "type": "string",
          "title": "The tax name (e.g., \"PST\")"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "This represents the tax rate percent from 1 to 100"
        },
        "description": {
          "type": "string",
          "title": "The description of the tax (e.g., \"Saskatchewan PST\")"
        }
      },
      "title": "AppliedTaxRate is the amount that was calculated for a given tax rate"
    },
    "v1AppliedTo": {
      "type": "object",
      "properties": {
        "referenceId": {
          "type": "string",
          "title": "The reference id of the item that the credit note is applied to"
        },
        "referenceType": {
          "$ref": "#/definitions/v1AppliedReferenceType",
          "title": "The type of reference that the credit note is applied to"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents) of the credit note that is applied to the item"
        },
        "creditNoteType": {
          "$ref": "#/definitions/v1CreditNoteType",
          "title": "The type of credit note"
        },
        "appliedAt": {
          "type": "string",
          "format": "date-time",
          "title": "The date the credit note was applied"
        },
        "referenceNumber": {
          "type": "string",
          "title": "The reference number of the item that the credit note is applied to"
        },
        "shouldRefund": {
          "type": "boolean",
          "title": "Whether the applied credit should result in a refund (only applicable for request messages)"
        }
      }
    },
    "v1ArchiveTaxRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "id": {
          "type": "string",
          "title": "The unique identifier of the tax rate to delete"
        }
      }
    },
    "v1Balance": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string",
          "title": "the currency of the balance"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated the amount (in cents) of the balance"
        },
        "futurePayouts": {
          "type": "string",
          "format": "int64",
          "title": "the amount (in cents) of the future payouts"
        },
        "inTransit": {
          "type": "string",
          "format": "int64",
          "title": "the amount (in cents) of the in transit payouts"
        }
      }
    },
    "v1BalanceAmount": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string",
          "title": "The two letter ISO country code representing the currency of the balance amount"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "the amount of the balance in cents"
        }
      },
      "title": "BalanceAmount represents a balance's amount value and currency"
    },
    "v1BankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "accountHolderName": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "routingNumber": {
          "type": "string"
        },
        "last4": {
          "type": "string"
        },
        "defaultForCurrency": {
          "type": "boolean"
        }
      }
    },
    "v1BillItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The date at which billing should occur. This date can be in the past. Also the date which renewals are driven off of."
        },
        "proratedTo": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The date to prorate the billable item to. If billing_start is Jan 1 and prorated_to is Jan 15, the price should reflect the period from Jan 15 - Jan 31 but will renew for a full month on Feb 1 (assuming monthly frequency)."
        }
      },
      "description": "Bill for the specified item. This could be instantly, or just add to next invoice."
    },
    "v1BillMultipleItemsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Item"
          },
          "title": "The items to bill for (in a single charge for instant)"
        }
      },
      "description": "Bill for the specified items. This could be instantly, or just add to next invoice."
    },
    "v1BillMultipleItemsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the temporary record that was created to group the items together"
        }
      }
    },
    "v1BillableItem": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the billable item will expire."
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the billable item starts wholesale billing."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time the billable item was originally made"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "The time the billable item was most recently modified"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The wholesale frequency this product is billed"
        },
        "nextRenewal": {
          "type": "string",
          "format": "date-time",
          "title": "The renewal date of the billable item where it is an anchor point value that may be set by users or calculated by the system"
        },
        "customerName": {
          "type": "string",
          "title": "The name of the customer"
        },
        "productName": {
          "type": "string",
          "title": "the name of the product"
        },
        "customerAddress": {
          "$ref": "#/definitions/v1BillableItemCustomerAddress",
          "title": "The address of the customer"
        },
        "customUnitPrice": {
          "type": "string",
          "format": "int64",
          "title": "The custom wholesale unit price of the subscription"
        },
        "retailFrequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "Deprecated: use `frequency` - the frequency field for both retail and wholesale BillableItems"
        },
        "nextRetailRenewal": {
          "type": "string",
          "format": "date-time",
          "title": "Deprecated: use `next_renewal` - the next_renewal field for both retail and wholesale BillableItems"
        },
        "retailUnitPrice": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated: use `price` to determine the pricing"
        },
        "status": {
          "$ref": "#/definitions/billingv1SubscriptionStatus",
          "title": "The current state of the subscription"
        },
        "price": {
          "$ref": "#/definitions/v1ProductPricing",
          "title": "The product pricing information"
        },
        "subscriptionId": {
          "type": "string",
          "title": "A unique identifier for the subscription"
        },
        "deleted": {
          "type": "string",
          "format": "date-time",
          "title": "The time the billable item was deleted"
        },
        "source": {
          "$ref": "#/definitions/v1Source",
          "title": "Who was responsible for the creation of the billable item"
        },
        "autoBillable": {
          "type": "boolean",
          "title": "Specifies whether the subscription should result in charges (ie. through invoices) to the customer\nIf unspecified, it will result in charges to the customer"
        },
        "description": {
          "type": "string",
          "title": "The description of the subscription. This is how the subscription will appear on invoices and is synonymous with a display name"
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The billing relationship the subscription is being created for"
        },
        "billingCycleAnchor": {
          "type": "string",
          "format": "date-time",
          "description": "The anchor date for determining when a renewal is recorded or prepared to be charged."
        },
        "nextServicePeriodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start of the next service period"
        },
        "nextServicePeriodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end of the next service period"
        },
        "nextInvoiceDate": {
          "type": "string",
          "format": "date-time",
          "title": "The next day an invoice will be generated for the subscription"
        }
      },
      "description": "A proto representation of a billable item (also referred to as a subscription)."
    },
    "v1BillableItemCustomerAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The street address of the customer"
        },
        "city": {
          "type": "string",
          "title": "The city of the customer"
        },
        "state": {
          "type": "string",
          "title": "The state of the customer"
        },
        "zip": {
          "type": "string",
          "title": "The zip code of the customer"
        },
        "country": {
          "type": "string",
          "title": "The country of the customer"
        }
      }
    },
    "v1BulkReplaceTaxRulesRequest": {
      "type": "object",
      "properties": {
        "taxRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReplaceTaxRuleRequest"
          },
          "title": "The tax rules to replace"
        }
      }
    },
    "v1BulkReplaceTaxRulesResponse": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The ids of the tax rules in the same order that they were sent in the request"
        }
      }
    },
    "v1Bundle": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "MerchantID is the merchant scope of the bundle"
        },
        "bundleId": {
          "type": "string",
          "title": "BundleID is the id of the bundle"
        },
        "name": {
          "type": "string",
          "title": "Name is the human-readable, non-unique name for this bundle"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BundleItem"
          },
          "title": "Items is the list of products and their corresponding discounts in a valid bundle"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created date of the bundle"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "Updated date of the bundle"
        },
        "hideBundleDetails": {
          "type": "boolean",
          "title": "Specifies whether the items in the bundle should be shown on invoices"
        }
      },
      "title": "Bundle represents a group of products that are sold together"
    },
    "v1BundleItem": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "title": "product_id is the product that this bundle item is for. ProductID should not be confused with sku, as a single product could contain many skus"
        },
        "discountType": {
          "$ref": "#/definitions/billingv1DiscountType",
          "title": "discount_type is the type of discount to apply to this bundle item"
        },
        "discountAmount": {
          "type": "string",
          "format": "int64",
          "title": "discount_amount is the amount of the discount. This can represent a base-unit currency amount, percentage or quantity, depending on the discount type"
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "quantity is the instances of this product that must be purchased in the bundle order for this bundle item to be valid and discounts applied"
        },
        "defaultSku": {
          "type": "string",
          "title": "default sku is the sku used when applying this item in a bundle without additional context"
        },
        "price": {
          "$ref": "#/definitions/BundleItemPrice",
          "description": "price for this item."
        }
      },
      "title": "BundleItem represents a single item in a bundle"
    },
    "v1BundlePricing": {
      "type": "object",
      "properties": {
        "bundleId": {
          "type": "string",
          "title": "The ID of the bundle the pricing is for"
        },
        "currency": {
          "type": "string",
          "title": "The ISO code of the resolved retail currency"
        },
        "prices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BundlePricingPriceAndFrequency"
          },
          "title": "A list of prices for each frequency in the bundle"
        }
      }
    },
    "v1CalculateCreditNoteRequest": {
      "type": "object",
      "properties": {
        "creditNote": {
          "$ref": "#/definitions/v1CreditNote",
          "title": "The credit note to calculate values for"
        }
      }
    },
    "v1CalculateCreditNoteResponse": {
      "type": "object",
      "properties": {
        "creditNote": {
          "$ref": "#/definitions/v1CreditNote",
          "title": "The calculated credit note"
        }
      }
    },
    "v1CalculateLineItemTaxesRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to calculate tax for"
        },
        "customerId": {
          "type": "string",
          "title": "The id of the customer to calculate tax for"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalculateLineItemTaxesRequestLineItem"
          },
          "title": "Individual line item totals (in cents)"
        }
      }
    },
    "v1CalculateLineItemTaxesRequestLineItem": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The identifier of what products/subscription this item refers to. Does not conform to the SKU standard"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Total amount of the line item (in cents)"
        }
      }
    },
    "v1CalculateLineItemTaxesResponse": {
      "type": "object",
      "properties": {
        "lineItemTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CalculateLineItemTaxesResponseLineItemTaxes"
          },
          "title": "Tax information for each line item"
        },
        "totalTaxableAmount": {
          "type": "string",
          "format": "int64",
          "title": "Final rounded total for the line items taxes (in cents)"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "All of the taxes that were applied to various line items\nNot all tax rates apply to all line items due to potential tax rules that may apply\nEach line item contains a breakdown of the tax rate ids that apply to it"
        },
        "appliedTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "title": "The aggregate amounts calculated per tax rate for all line items"
        }
      }
    },
    "v1CalculateTaxRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to calculate tax for"
        },
        "customerId": {
          "type": "string",
          "title": "The id of the customer to calculate tax for"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Total amount of the order (in cents)"
        }
      }
    },
    "v1CalculateTaxResponse": {
      "type": "object",
      "properties": {
        "taxableAmount": {
          "type": "string",
          "format": "int64",
          "title": "The taxable amount (in cents)"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The taxes that applied to the order"
        }
      }
    },
    "v1CanBillItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique identifier of the merchant"
        },
        "sku": {
          "type": "string",
          "title": "Unique id representing a product"
        }
      }
    },
    "v1CanCreateSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique identifier of the merchant"
        },
        "skus": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "a map of product skus and the quantity requested for that sku\nThis is deprecated, use items instead."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CanCreateSubscriptionsRequestSubscriptionItem"
          },
          "description": "A list of the product information."
        }
      }
    },
    "v1CanCreateSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "validationResponse": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateResponse"
          }
        }
      }
    },
    "v1CancelRetailBillingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1CardType": {
      "type": "string",
      "enum": [
        "CARD_TYPE_UNKNOWN",
        "CARD_TYPE_VISA",
        "CARD_TYPE_MASTERCARD",
        "CARD_TYPE_AMEX",
        "CARD_TYPE_DISCOVER",
        "CARD_TYPE_JCB",
        "CARD_TYPE_DINERS_CLUB"
      ],
      "default": "CARD_TYPE_UNKNOWN",
      "title": "the card type, ex. Visa, Mastercard, AMEX"
    },
    "v1ChangeCustomUnitPriceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "customUnitPrice": {
          "type": "string",
          "format": "int64",
          "title": "The custom unit price to be set on the subscription"
        }
      },
      "title": "ChangeCustomUnitPriceRequest will update the custom unit price of an existing billable item"
    },
    "v1ChangeFrequencyRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "the desired frequency"
        }
      },
      "title": "ChangeFrequencyRequest will update the frequency of an existing billable item"
    },
    "v1ChangeRenewalDateRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "customerId": {
          "type": "string",
          "title": "the unique identifier of the customer"
        },
        "sku": {
          "type": "string",
          "description": "the unique identifier representing a product (Stock Keeping Unit)."
        },
        "orderId": {
          "type": "string",
          "description": "the unique identifier for this instance of the sku."
        },
        "nextRenewalDate": {
          "type": "string",
          "format": "date-time",
          "title": "the desired next renewal date"
        }
      },
      "description": "ChangeRenewalDateRequest will update the next renewal_start date of an existing billable item. This will not handle proration calculations."
    },
    "v1ChargeInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique identifier of the merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The unique identifier of the customer\nDeprecated: No longer in use, the customer ID on the corresponding invoice will be used instead"
        },
        "invoiceId": {
          "type": "string",
          "title": "The unique identifier of the invoice"
        },
        "paymentMethodId": {
          "type": "string",
          "description": "(Optional) The unique identifier of the payment method\nIf not provided, the default payment method associated with the invoice will be used. If no default payment method is set on the invoice, the customer default payment method will be used."
        }
      }
    },
    "v1ChargeSalesInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "An invoice identifier"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount to charge"
        }
      }
    },
    "v1CloseRetailDisputeRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "disputeId": {
          "type": "string",
          "title": "The dispute identifier"
        }
      }
    },
    "v1CollectionMethod": {
      "type": "string",
      "enum": [
        "COLLECTION_METHOD_INVALID",
        "COLLECTION_METHOD_MANUAL",
        "COLLECTION_METHOD_EMAIL",
        "COLLECTION_METHOD_CHARGE_AUTOMATICALLY"
      ],
      "default": "COLLECTION_METHOD_INVALID",
      "description": "Collection method describes how the invoice should be collected.\n\n - COLLECTION_METHOD_INVALID: Invalid means there is no user defined value. This options is invalid.\n - COLLECTION_METHOD_MANUAL: Manual means the merchant will collect payments against the invoice externally.\n - COLLECTION_METHOD_EMAIL: The invoice will be emailed to the recipient user defined on the recurring invoice. The user can make their payment\ntowards the invoice from the page the email directs them to.\n - COLLECTION_METHOD_CHARGE_AUTOMATICALLY: Automatically charge the card on file."
    },
    "v1Commitment": {
      "type": "object",
      "properties": {
        "initial": {
          "type": "string",
          "format": "int64",
          "title": "The initial commitment required (i.e. 12 month commitment at activation)"
        },
        "recurring": {
          "type": "string",
          "format": "int64",
          "title": "The commitment required after the initial commitment period (i.e. repeated periods of 6 month commitments after renewal)"
        }
      },
      "title": "Holds information about the commitment required by the vendor"
    },
    "v1ComponentPricing": {
      "type": "object",
      "properties": {
        "componentId": {
          "type": "string",
          "title": "id of the component"
        },
        "unitPrice": {
          "type": "string",
          "format": "int64",
          "title": "the price of a single unit of the component in cents"
        }
      },
      "description": "A Component represents some metered element or consumable which exists on a product.\nFor example, Google bills \"Instance Hours\" as a metered component.\nEach component is identified by an ID and has a 'Unit Price' which will be multiplied by\nthe quantity of component used to get the total cost of that component."
    },
    "v1ConfigureRetailPaymentProviderRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the id for the merchant"
        },
        "failureUrl": {
          "type": "string",
          "title": "The url the user will be directed to upon failure to connect account"
        },
        "successUrl": {
          "type": "string",
          "title": "The url the user will be directed to upon successfully connecting an account"
        },
        "paymentFacilitatorType": {
          "$ref": "#/definitions/v1PaymentFacilitatorType",
          "title": "the type of payment facilitator account to setup"
        }
      }
    },
    "v1ConfigureRetailPaymentProviderResponse": {
      "type": "object",
      "properties": {
        "stripeUrl": {
          "type": "string",
          "title": "the stripe url to the hosted on-boarding"
        },
        "error": {
          "type": "string",
          "title": "a contextual error informing the user of the failure"
        }
      }
    },
    "v1ConfirmRetailPaymentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant to confirm the payment for"
        },
        "id": {
          "type": "string",
          "title": "stripe payment intent id that will was previously created"
        }
      }
    },
    "v1Consumer": {
      "type": "string",
      "enum": [
        "CONSUMER_WHOLESALE",
        "CONSUMER_RETAIL"
      ],
      "default": "CONSUMER_WHOLESALE",
      "description": "- CONSUMER_WHOLESALE: A wholesale consumer represents a billing relationship with Vendasta\n - CONSUMER_RETAIL: A retail consumer represents a billing relationship with a merchant",
      "title": "Consumer represents the billing relationship the subscription is being created for"
    },
    "v1Contract": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "netD": {
          "type": "string",
          "format": "int64",
          "title": "The grace period (in days) from the due date for an invoice to be paid"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time the contract was created"
        },
        "subscriptionId": {
          "type": "string",
          "title": "The subscription id for the contract"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency for the contract"
        },
        "signed": {
          "type": "string",
          "format": "date-time",
          "title": "the time the contract was signed"
        },
        "activated": {
          "type": "string",
          "format": "date-time",
          "title": "The time the contract was activated"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "title": "the time the contract was modified"
        },
        "verified": {
          "type": "string",
          "format": "date-time",
          "title": "the time the contract was verified"
        },
        "status": {
          "type": "string",
          "title": "the status of the contract"
        },
        "creditLimit": {
          "type": "string",
          "format": "int64",
          "title": "the credit limit on the contract"
        },
        "dimension": {
          "type": "string",
          "title": "the revenue dimension on the contract"
        },
        "pricingPlanId": {
          "type": "string",
          "title": "the pricing plan id for the contract"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "the time the contract will end"
        },
        "subscriptionUpdateStatus": {
          "$ref": "#/definitions/v1ContractSubscriptionStatus",
          "title": "the status of the last contract subscription update attempt"
        }
      },
      "title": "A Contract represents an agreement between Vendasta and a Merchant and contains metadata along with the terms"
    },
    "v1ContractDocument": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of a merchant"
        },
        "id": {
          "type": "string",
          "title": "The unique identifier of the document"
        },
        "filename": {
          "type": "string",
          "title": "The filename of the document"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time the document was created"
        }
      }
    },
    "v1ContractSubscriptionStatus": {
      "type": "string",
      "enum": [
        "CONTRACT_SUBSCRIPTION_STATUS_UNSET",
        "CONTRACT_SUBSCRIPTION_STATUS_PENDING",
        "CONTRACT_SUBSCRIPTION_STATUS_SUCCEEDED",
        "CONTRACT_SUBSCRIPTION_STATUS_FAILED"
      ],
      "default": "CONTRACT_SUBSCRIPTION_STATUS_UNSET"
    },
    "v1CreateContractRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "currencyCode": {
          "type": "string",
          "title": "The currency ISO code for the contract"
        }
      },
      "title": "Create a new contract"
    },
    "v1CreateContractResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/v1Contract",
          "title": "The created contract"
        }
      }
    },
    "v1CreateCreditNoteRequest": {
      "type": "object",
      "properties": {
        "creditNote": {
          "$ref": "#/definitions/v1CreditNote",
          "title": "The credit note to create"
        }
      }
    },
    "v1CreateCreditNoteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the created credit note"
        }
      }
    },
    "v1CreateDiscountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant the discount is for"
        },
        "sku": {
          "type": "string",
          "title": "The unique stock keeping unit the discount is applied to"
        },
        "discountType": {
          "$ref": "#/definitions/billingv1DiscountType",
          "description": "Discount type eg. fixed_amount, percent_amount, etc."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Discounted dollar amount in cents"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount starts/started"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount ends/ended"
        },
        "resetEachPeriod": {
          "type": "boolean",
          "title": "Whether or not the discount's usage should reset each period"
        },
        "description": {
          "type": "string",
          "title": "The description so we know what the discount is for"
        },
        "customerId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the customer the discount is applied to"
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The consumer type of the discount"
        },
        "subscriptionId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the subscription the discount is applied to"
        },
        "numberOfBillingPeriods": {
          "type": "string",
          "format": "int64",
          "title": "The number of billing periods the discount is applied to regardless of the Discount's `end` date"
        }
      }
    },
    "v1CreateDiscountResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the discount that was created"
        }
      }
    },
    "v1CreateInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string",
          "title": "Optional: Use to override the default invoice currency"
        },
        "orderId": {
          "type": "string",
          "title": "Optional: Use when creating an invoice from a sales order"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceItem"
          },
          "title": "Optional: The line items of the invoice"
        },
        "defaultPaymentMethod": {
          "type": "string",
          "description": "Optional: The identifier of the default payment method for the invoice. It must belong to the customer associated with the invoice."
        },
        "contactId": {
          "type": "string",
          "title": "Optional: The identifier of the contact who will receive invoice notification"
        },
        "collectionMethod": {
          "$ref": "#/definitions/v1CollectionMethod",
          "title": "Optional: Indicates how we will attempt to collect the invoice"
        },
        "origin": {
          "$ref": "#/definitions/v1Origin",
          "description": "Optional: The origin of the invoice. Defaults to 'manual' if not provided."
        }
      }
    },
    "v1CreateInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string"
        }
      }
    },
    "v1CreateMerchantRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "address": {
          "type": "string",
          "title": "The address of the merchant"
        },
        "city": {
          "type": "string",
          "title": "The city of the merchant"
        },
        "state": {
          "type": "string",
          "title": "The state of the merchant"
        },
        "country": {
          "type": "string",
          "title": "The country of the merchant"
        },
        "zipCode": {
          "type": "string",
          "title": "The zip code of the merchant"
        },
        "emailAddress": {
          "type": "string",
          "title": "The email address of the merchant"
        },
        "phoneNumber": {
          "type": "string",
          "title": "The phone number of the merchant"
        },
        "contactName": {
          "type": "string",
          "title": "The contact name for the merchant"
        },
        "companyName": {
          "type": "string",
          "title": "The company name of the merchant"
        },
        "additionalEmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of additional email addresses for the merchant"
        },
        "includeInFinancialRecords": {
          "$ref": "#/definitions/v1CreateMerchantRequestIncludeInFinancialRecords"
        },
        "hasAlternativePaymentMethod": {
          "type": "boolean",
          "title": "Whether merchant has an alternative payment method on file"
        },
        "merchantType": {
          "$ref": "#/definitions/v1MerchantType",
          "title": "The merchant type"
        }
      },
      "title": "Create a merchant"
    },
    "v1CreateMerchantRequestIncludeInFinancialRecords": {
      "type": "object",
      "properties": {
        "includeInFinancialRecords": {
          "type": "boolean"
        }
      },
      "title": "Whether to include the merchant within financial records.\nthis bool is wrapped in a message to allow for an \"unset\" null state"
    },
    "v1CreateMerchantServicesReportRun": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant to create the report for.\n\nThis is required."
        },
        "reportType": {
          "$ref": "#/definitions/v1MerchantServicesReportRunType",
          "description": "The type of report to create.\n\nThis is required."
        },
        "intervalStart": {
          "type": "string",
          "format": "date-time",
          "description": "Starting timestamp of data to be included in the report.\n\nThis is required."
        },
        "intervalEnd": {
          "type": "string",
          "format": "date-time",
          "description": "Ending timestamp of data included in the report.\n\nThis is required."
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency of objects to include in the report.\n\nThis is optional."
        }
      }
    },
    "v1CreateMeteredComponentRequest": {
      "type": "object",
      "properties": {
        "component": {
          "$ref": "#/definitions/v1MeteredComponent",
          "title": "The component to create"
        },
        "sku": {
          "type": "string",
          "title": "The sku which the metered component is associated with"
        }
      },
      "title": "Create a new metered component"
    },
    "v1CreatePaymentCardRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the stripe customer"
        },
        "stripeToken": {
          "type": "string",
          "title": "The token to access stripes API"
        },
        "recaptchaToken": {
          "type": "string",
          "title": "The recaptcha token to verify the request"
        }
      },
      "title": "Adds a Payment card to a customer"
    },
    "v1CreatePaymentLinkRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant ID can be the Partner ID or the Account Group ID"
        },
        "customerId": {
          "type": "string",
          "title": "Customer ID"
        },
        "currencyCode": {
          "type": "string",
          "title": "Currency Code"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentLinkItem"
          },
          "title": "Line items"
        },
        "due": {
          "type": "string",
          "format": "date-time",
          "title": "Due date"
        }
      }
    },
    "v1CreatePaymentLinkResponse": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "title": "Invoice ID for payment link"
        }
      }
    },
    "v1CreatePricingPlanProductRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "DEPRECATED: frequency has been moved onto nested PricingPlanProductPricing message.\nThe frequency that the product is billed at"
        },
        "pricing": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PricingPlanProductPricing"
          },
          "title": "The pricing per currency for the product"
        },
        "commitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "The required commitment windows for the product"
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The billing strategy for this product"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "minimum number of units that will be charged each billing period"
        },
        "volumeCommitmentStartsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should begin being applied"
        },
        "volumeCommitmentEndsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should cease being applied"
        }
      }
    },
    "v1CreatePricingPlanProductResponse": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of the product (Stock Keeping Unit)"
        }
      }
    },
    "v1CreatePricingPlanRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The unique name of the pricing plan"
        },
        "defaultBillingStrategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "the default billing strategy used for products in the pricing plan"
        }
      }
    },
    "v1CreatePricingPlanResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        }
      }
    },
    "v1CreateProductRequest": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit). This Field is not mutable"
        },
        "productId": {
          "type": "string",
          "title": "The identifier of the product within the vendasta marketplace. This field is not mutable"
        },
        "editionId": {
          "type": "string",
          "description": "The identifier of the edition in the vendasta marketplace. If this id is specified, the product configuration is considered to be the edition of the product. This field is not mutable."
        },
        "name": {
          "type": "string",
          "title": "The name of the product"
        },
        "reportingCode": {
          "type": "string",
          "title": "A code used for reporting in sales force"
        },
        "productType": {
          "$ref": "#/definitions/billingv1ProductType",
          "description": "A definition of the type of product."
        },
        "metered": {
          "type": "boolean",
          "title": "Specifies whether or not the item undergoes metered billing"
        }
      }
    },
    "v1CreateRefundRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant to be refunded"
        },
        "paymentId": {
          "type": "string",
          "title": "The reference ID on the payment to be refunded"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount to refund. The sum of refund amounts cannot exceed the associated payment amount"
        },
        "reason": {
          "$ref": "#/definitions/v1RefundReason",
          "title": "The reason for the refund"
        },
        "referenceType": {
          "$ref": "#/definitions/v1ReferenceType",
          "title": "The type of entity the refund is for"
        },
        "referenceId": {
          "type": "string",
          "title": "The identifier of the refunded entity"
        },
        "description": {
          "type": "string",
          "title": "(Optional) Additional details to be provided for the refund"
        }
      },
      "title": "CreateRefundRequest creates a refund"
    },
    "v1CreateSalesCreditNoteRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "merchant to create credit note for"
        },
        "creditNoteReason": {
          "type": "string",
          "title": "Reason for creating the credit note"
        },
        "creditNoteDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date that will appear on the credit note."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date the credit note payment is due."
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Total credit note value (in cents)"
        },
        "sku": {
          "type": "string",
          "title": "The sku to add to the credit note"
        }
      }
    },
    "v1CreateStripeExternalAccountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the id for the merchant"
        },
        "stripeToken": {
          "type": "string",
          "title": "a single-use token that you safely pass to your server to use in an API call for stripe"
        }
      }
    },
    "v1CreateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "title": "(Optional) The date at which billing should start. This date can be in the past. Also the date which immediate renewals are driven off of.\nNOTE: if align_with is provided it will overwrite the value of billing_start"
        },
        "proratedTo": {
          "type": "string",
          "format": "date-time",
          "title": "(Optional) The date to prorate the billable item to. If billing_start is Jan 1 and prorated_to is Jan 15, the price should reflect the period from Jan 15 - Jan 31 but will renew for a full month on Feb 1 (assuming monthly frequency).\nNOTE: if align_with is provided it will overwrite the value of prorated_to"
        },
        "renewalState": {
          "$ref": "#/definitions/v1RenewalState",
          "description": "The state that the subscription is getting created in. If immediate the subscription will reoccur. If delayed the subscription won't reoccur until the renewal start date has been set."
        },
        "retailBundleId": {
          "type": "string",
          "title": "(Optional) the bundle that applies to calculating retail pricing"
        },
        "forResale": {
          "type": "boolean",
          "title": "indicates whether the subscription exists for resale by the merchant"
        },
        "customUnitPrice": {
          "type": "string",
          "format": "int64",
          "title": "The wholesale custom unit price to be set on the subscription"
        },
        "alignWith": {
          "$ref": "#/definitions/v1AlignmentSubscription",
          "title": "(Optional) Used on subscription create to align the anniversary date of a new subscription with an existing subscription\ntriggers prorated billing on the new subscription"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "the frequency at which the wholesale subscription will be billed"
        },
        "retailAmount": {
          "type": "string",
          "format": "int64",
          "title": "The retail amount for the subscription. This is in the smallest currency unit.\nDEPRECATED: this field is not used by the billing system. Prices must be set using PricingService.UpsertRetail"
        },
        "retailFrequency": {
          "$ref": "#/definitions/v1Frequency",
          "description": "The frequency at which the retail price will be billed."
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The billing relationship the subscription is being created for"
        },
        "renewalStart": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired renewal start date. This should be used when the subscription is being created with a specific renewal start date in mind."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired expiry date. This should be used when the subscription is being created with a specific end date in mind."
        },
        "autoBillable": {
          "type": "boolean",
          "title": "Specifies whether the subscription should result in charges (ie. through invoices) to the customer"
        },
        "subscriptionId": {
          "type": "string",
          "title": "The identifier of the subscription\nThis id is meant to match with an existing SubscriptionPreset so fields can be hydrated from that preset\nIf there is no matching SubscriptionPreset, this id will be ignored and a new id will be auto-generated"
        },
        "billingCycleAnchor": {
          "type": "string",
          "format": "date-time",
          "description": "Acts as an anchor date for determining when a renewal is recorded or prepared to be charged.\nIt is called an anchor date because it does not reflect the actual date, but is used to compute future dates."
        }
      },
      "title": "Creates a new subscription that starts at the specified start time. This could be billed instantly, or billed on the next invoice"
    },
    "v1CreateSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "title": "The identifier of the subscription"
        }
      }
    },
    "v1CreateSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/billingv1Subscription"
          },
          "title": "The items to bill for (in a single charge for instant)"
        }
      },
      "title": "Create a subscription for the specified items. This could be billed instantly, or billed on the next invoice"
    },
    "v1CreateSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the temporary record that was created to group the items together"
        }
      }
    },
    "v1CreateTaxRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "countryCode": {
          "type": "string",
          "title": "The two digit iso country code of the tax rate"
        },
        "stateCode": {
          "type": "string",
          "title": "The two digit iso province or state code of the tax rate"
        },
        "name": {
          "type": "string",
          "title": "The tax name eg: GST, PST, HST"
        },
        "description": {
          "type": "string",
          "title": "The description of the tax (Ontario PST)"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "This represents the tax rate percent from 1 to 100"
        },
        "accountingSystemId": {
          "type": "string",
          "title": "(OPTIONAL) A third party identifier"
        }
      }
    },
    "v1CreateTaxResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the tax rate."
        }
      }
    },
    "v1CreateUsageRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The id of the customer incurring usage charges"
        },
        "orderId": {
          "type": "string",
          "title": "Unique id for this instance of the sku"
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "Quantity of usage"
        },
        "usageDate": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp at which the usage occurred"
        }
      },
      "title": "UsageRequest creates a usage for a metered product"
    },
    "v1CreditBalance": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "currency": {
          "type": "string",
          "title": "The currency that this balance is in"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the credit"
        }
      }
    },
    "v1CreditNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identifier for the credit note"
        },
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "number": {
          "type": "string",
          "title": "The reference number assigned to the credit note"
        },
        "customerId": {
          "type": "string",
          "title": "Identifier of the customer who the credit note is for within Vendasta (AG-1234567890)"
        },
        "subtotal": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the credit note before taxes and discounts"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the credit note"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created date of the credit note"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "Last updated date of the credit note"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/billingv1LineItem"
          },
          "title": "The line items of the credit note"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency that this credit note is in"
        },
        "amountTax": {
          "type": "string",
          "format": "int64",
          "description": "The amount of tax on this credit note. This is the sum of all the tax amounts on this credit note."
        },
        "appliedTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "description": "The aggregate amounts calculated per tax rate for all line items."
        },
        "customerName": {
          "type": "string",
          "title": "The name of the customer"
        },
        "contactId": {
          "type": "string",
          "title": "The identifier of the contact who will receive credit note notification"
        },
        "memo": {
          "type": "string",
          "title": "An arbitrary note which appears on the credit note"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "The internal notes on an credit note"
        },
        "additionalContactIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The user ids of any additional contacts who will receive credit note notifications"
        },
        "reason": {
          "$ref": "#/definitions/v1CreditNoteReason",
          "title": "The reason for the credit note"
        },
        "appliedTo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTo"
          },
          "title": "The financial documents that the credit note is applied to"
        }
      }
    },
    "v1CreditNoteReason": {
      "type": "string",
      "enum": [
        "CREDIT_NOTE_REASON_UNSPECIFIED",
        "CREDIT_NOTE_REASON_DUPLICATE_CHARGE",
        "CREDIT_NOTE_REASON_PRODUCT_UNSATISFACTORY",
        "CREDIT_NOTE_REASON_ORDER_CHANGE",
        "CREDIT_NOTE_REASON_OTHER"
      ],
      "default": "CREDIT_NOTE_REASON_UNSPECIFIED"
    },
    "v1CreditNoteType": {
      "type": "string",
      "enum": [
        "CREDIT_NOTE_UNSPECIFIED",
        "CREDIT_NOTE_PRE_PAYMENT",
        "CREDIT_NOTE_POST_PAYMENT"
      ],
      "default": "CREDIT_NOTE_UNSPECIFIED"
    },
    "v1CreditType": {
      "type": "string",
      "enum": [
        "CREDIT_TYPE_UNSET",
        "CREDIT_TYPE_CREDIT_NOTE",
        "CREDIT_TYPE_PROMOTIONAL"
      ],
      "default": "CREDIT_TYPE_UNSET"
    },
    "v1Currency": {
      "type": "string",
      "enum": [
        "USD",
        "CAD",
        "EUR",
        "AUD",
        "GBP",
        "NZD",
        "BRL",
        "CHF",
        "CNY",
        "CZK",
        "INR",
        "JPY",
        "KHR",
        "KRW",
        "MXN",
        "NOK",
        "RUB",
        "SEK",
        "SGD",
        "TRY",
        "ZAR",
        "DZD",
        "AWG",
        "FJD",
        "KYD"
      ],
      "default": "USD"
    },
    "v1CustomerSummary": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string",
          "title": "The customer whose purchase item summary is being returned"
        },
        "purchaseItemQuantity": {
          "type": "string",
          "format": "int64",
          "title": "The number of purchase items associated to the customer"
        },
        "purchaseItemTotal": {
          "type": "string",
          "format": "int64",
          "title": "the summed total of purchase item costs"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "the currency in which the purchases were made in"
        }
      },
      "title": "A summary of the purchase items associated with a customer"
    },
    "v1DefaultCustomerConfiguration": {
      "type": "object",
      "properties": {
        "generateMethod": {
          "type": "string",
          "title": "Indicates how invoices will be automatically generated. Can be \"subscription\", \"template\" or empty (don't auto bill)"
        },
        "collectionMethod": {
          "type": "string",
          "title": "Indicates how we will attempt to collect for invoices on this customer. Can be \"email\", \"charge\" or empty (don't post)"
        },
        "invoiceDay": {
          "type": "string",
          "format": "int64",
          "title": "The day of the month in which renewal draft invoices will be issued; If 0, draft invoices will be issues as products renew"
        },
        "memo": {
          "type": "string",
          "title": "The memo to be added to an invoice"
        },
        "netD": {
          "type": "string",
          "format": "int64",
          "title": "The grace period (in days) from the due date for an invoice to be paid"
        },
        "autoGenerateRetailSubscriptions": {
          "type": "boolean",
          "title": "Indicates whether retail subscriptions should be automatically generated for the customer"
        }
      },
      "title": "DefaultCustomerConfiguration is the defaults for all new RetailCustomerConfiguration objects created under the RetailConfiguration"
    },
    "v1DeleteBankAccountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant id to delete the bank account for"
        },
        "bankAccountId": {
          "type": "string",
          "title": "The id of the bank account to set as the default"
        }
      }
    },
    "v1DeleteBillableItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        }
      },
      "title": "Delete a billable item"
    },
    "v1DeleteContractDocumentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant that the document belongs to"
        },
        "id": {
          "type": "string",
          "description": "The id of the document. not that this will be globally unique."
        }
      }
    },
    "v1DeleteInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        }
      }
    },
    "v1DeleteLineItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1DeleteLineItemResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1DeletePaymentCardRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "cardId": {
          "type": "string",
          "title": "The unique card ID"
        }
      },
      "title": "Deletes the payment cards for a merchant"
    },
    "v1DeletePricingPlanProductRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        }
      }
    },
    "v1DeleteProductRequest": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        }
      }
    },
    "v1DeleteRecurringInvoiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the recurring invoice.\n\nThis is required."
        }
      },
      "description": "The request to delete a recurring invoice."
    },
    "v1DeleteRetailPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The merchant that the retail price is related to."
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        },
        "groupId": {
          "type": "string",
          "description": "group_id represents pricing for a subset of retail customers that the merchant is selling to."
        },
        "customerId": {
          "type": "string",
          "description": "The customer ID to resolve pricing for\nDeprecated: Customer-level pricing is no longer supported. A customer's pricing for subscriptions is determined by the corresponding subscription_id."
        },
        "subscriptionId": {
          "type": "string",
          "title": "The subscription ID to resolve pricing for"
        }
      }
    },
    "v1DeleteTaxRuleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the tax rule"
        }
      }
    },
    "v1Dispute": {
      "type": "object",
      "properties": {
        "paymentId": {
          "type": "string",
          "title": "The identifier of the payment that was disputed"
        },
        "status": {
          "$ref": "#/definitions/v1DisputeStatus",
          "title": "The current status of the dispute"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the dispute."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount being disputed"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date the dispute was created."
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency the amount is represented in."
        },
        "evidence": {
          "$ref": "#/definitions/billingv1DisputeEvidence",
          "description": "Evidence provided for the dispute."
        },
        "evidenceDetails": {
          "$ref": "#/definitions/v1DisputeEvidenceDetails",
          "description": "Details about the evidence provided for the dispute."
        },
        "isChargeRefundable": {
          "type": "boolean",
          "title": "Whether or not the charge is refundable"
        },
        "reason": {
          "type": "string",
          "title": "The reason that the charge was disputed"
        },
        "fee": {
          "type": "string",
          "format": "int64",
          "title": "The amount of the dispute fee"
        },
        "feeCurrencyCode": {
          "type": "string",
          "title": "The currency of the dispute fee"
        },
        "customerId": {
          "type": "string",
          "title": "The customer ID that made the payment"
        },
        "paymentReferenceId": {
          "type": "string",
          "title": "The ID of the entity the payment was made against (i.e. an invoice or order)"
        },
        "paymentReferenceType": {
          "$ref": "#/definitions/v1RetailPaymentReferenceType",
          "title": "The type of object the reference ID is referring to"
        },
        "paymentDescription": {
          "type": "string",
          "title": "The description of the payment"
        },
        "paymentReceivedAt": {
          "type": "string",
          "format": "date-time",
          "title": "The date the original charge was made"
        },
        "resolvedAt": {
          "type": "string",
          "format": "date-time",
          "title": "The date the dispute was resolved"
        }
      },
      "title": "Dispute represents an issue a customer has raised regarding a charge against their credit card"
    },
    "v1DisputeEvidenceDetails": {
      "type": "object",
      "properties": {
        "dueBy": {
          "type": "string",
          "format": "date-time",
          "title": "The date that the evidence is due by"
        },
        "hasEvidence": {
          "type": "boolean",
          "title": "Whether or not a dispute has evidence"
        },
        "pastDue": {
          "type": "boolean",
          "title": "Whether or not the evidence is past due"
        },
        "submissionCount": {
          "type": "string",
          "format": "int64",
          "title": "How many times the evidence was submitted"
        }
      }
    },
    "v1DisputeStatus": {
      "type": "string",
      "enum": [
        "DISPUTE_STATUS_UNSET",
        "DISPUTE_STATUS_WARNING_NEEDS_RESPONSE",
        "DISPUTE_STATUS_WARNING_UNDER_REVIEW",
        "DISPUTE_STATUS_WARNING_CLOSED",
        "DISPUTE_STATUS_NEEDS_RESPONSE",
        "DISPUTE_STATUS_UNDER_REVIEW",
        "DISPUTE_STATUS_CHARGE_REFUNDED",
        "DISPUTE_STATUS_WON",
        "DISPUTE_STATUS_LOST"
      ],
      "default": "DISPUTE_STATUS_UNSET"
    },
    "v1DuplicateInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        }
      }
    },
    "v1DuplicateInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        }
      }
    },
    "v1EntityType": {
      "type": "string",
      "enum": [
        "ENTITY_TYPE_INVALID",
        "ENTITY_TYPE_SUBSCRIPTION"
      ],
      "default": "ENTITY_TYPE_INVALID",
      "title": "- ENTITY_TYPE_SUBSCRIPTION: ENTITY_TYPE_SUBSCRIPTION is used to refer to an entity that is a subscription. This entity type uses the unique subscription_relationship_id"
    },
    "v1ExpireBillableItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the billable item is expired."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Optional: The subscription id of the billable item.\nThis can be used as an alternative to the combination of the primary key fields\n(merchant_id, sku, customer_id, and order_id) to identify the billable item."
        }
      },
      "title": "Update a billable item's expiry date"
    },
    "v1ExpireDiscountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant the discount to delete was for"
        },
        "id": {
          "type": "string",
          "title": "The identifier of the discount. This id is scoped to a merchant"
        }
      }
    },
    "v1ExportResponse": {
      "type": "object"
    },
    "v1ExportSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListSubscriptionsRequestFilters",
          "description": "The filters for listing the billable items."
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The consumer of the subscriptions"
        }
      }
    },
    "v1Fee": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "title": "Amount can be in percentage or in cents depending on the amount type"
        },
        "amountType": {
          "$ref": "#/definitions/v1FeeAmountType",
          "title": "Type of Amount. Examples: fixed and percentage"
        },
        "feeType": {
          "$ref": "#/definitions/v1FeeType",
          "title": "Type of fee. Example: Management"
        }
      },
      "title": "Represents the fee to be added to a product pricing"
    },
    "v1FeeAmountType": {
      "type": "string",
      "enum": [
        "FEE_AMOUNT_TYPE_INVALID",
        "FEE_AMOUNT_TYPE_FIXED",
        "FEE_AMOUNT_TYPE_PERCENTAGE"
      ],
      "default": "FEE_AMOUNT_TYPE_INVALID"
    },
    "v1FeeType": {
      "type": "string",
      "enum": [
        "FEE_TYPE_INVALID",
        "FEE_TYPE_MANAGEMENT"
      ],
      "default": "FEE_TYPE_INVALID"
    },
    "v1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1File": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "When the file was created"
        },
        "id": {
          "type": "string",
          "title": "the file id"
        },
        "filename": {
          "type": "string",
          "title": "the name of the file"
        },
        "url": {
          "type": "string",
          "title": "the url to the file"
        }
      }
    },
    "v1Frequency": {
      "type": "string",
      "enum": [
        "INVALID",
        "MONTHLY",
        "YEARLY",
        "ONE_TIME"
      ],
      "default": "INVALID"
    },
    "v1GenerateBillableItemsCSVRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to generate a CSV for"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start date of the time period to create the CSV for"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end date of the time period to create the CSV for"
        }
      }
    },
    "v1GenerateBillableItemsCSVResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The url linking to the generated CSV"
        }
      }
    },
    "v1GenerateVendorReportRequest": {
      "type": "object",
      "properties": {
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The skus that should be included on the invoice"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start date of the invoice period"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end date of the invoice period"
        },
        "vendorName": {
          "type": "string",
          "description": "The name of the vendor the report is being generated for. This will be surfaced on the invoice."
        },
        "markAsApproved": {
          "type": "boolean",
          "title": "Whether the report should say \"Approved By: \u003cUser\u003e\""
        }
      },
      "title": "Generate a vendor scoped report for a given period"
    },
    "v1GenerateVendorReportResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The url linking to the generated invoice"
        },
        "bucket": {
          "type": "string",
          "title": "The cloudstorage bucket the invoice resides in"
        },
        "filename": {
          "type": "string",
          "title": "The filename of the invoice"
        }
      },
      "title": "GenerateInvoiceResponse returns the resource information to access the Vendor Report"
    },
    "v1GetBalanceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        }
      }
    },
    "v1GetBalanceResponse": {
      "type": "object",
      "properties": {
        "creditBalance": {
          "$ref": "#/definitions/v1CreditBalance",
          "title": "The credit balance"
        }
      }
    },
    "v1GetBillableItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        },
        "projectionFilter": {
          "$ref": "#/definitions/v1SubscriptionProjectionFilter",
          "title": "Extended data to include as part of the response"
        }
      },
      "title": "Get an existing billable item"
    },
    "v1GetBillableItemResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/v1BillableItem",
          "title": "The Billable Item"
        }
      },
      "title": "Response that has the billable item"
    },
    "v1GetContractRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique identifier of the merchant"
        }
      }
    },
    "v1GetContractResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/v1Contract",
          "title": "The contract"
        }
      }
    },
    "v1GetCreditNoteRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the credit note"
        }
      }
    },
    "v1GetCreditNoteResponse": {
      "type": "object",
      "properties": {
        "creditNote": {
          "$ref": "#/definitions/v1CreditNote",
          "title": "The credit note retrieved"
        }
      }
    },
    "v1GetInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        }
      }
    },
    "v1GetInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1GetMerchantRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        }
      },
      "title": "Get a merchant"
    },
    "v1GetMerchantResponse": {
      "type": "object",
      "properties": {
        "merchant": {
          "$ref": "#/definitions/v1Merchant",
          "title": "a get of the merchant data"
        }
      },
      "title": "GetMerchantResponse returns a merchant"
    },
    "v1GetMerchantServicesReportRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the report run.\n\nThis is required."
        }
      }
    },
    "v1GetMerchantWholesaleCurrencyRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique identifier of the merchant"
        }
      }
    },
    "v1GetMerchantWholesaleCurrencyResponse": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency for the contract"
        }
      }
    },
    "v1GetMultiBundleRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "bundleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiBundleResponse": {
      "type": "object",
      "properties": {
        "bundles": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Bundle"
          }
        }
      }
    },
    "v1GetMultiBundleRetailPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The merchant that the retail price is related to."
        },
        "storeId": {
          "type": "string",
          "title": "The ID of the store to get pricing for"
        },
        "bundleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The bundle IDs to calculate pricing for"
        }
      }
    },
    "v1GetMultiBundleRetailPricingResponse": {
      "type": "object",
      "properties": {
        "prices": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1BundlePricing"
          },
          "title": "A map of bundle ID to the corresponding pricing"
        }
      }
    },
    "v1GetMultiContractsRequest": {
      "type": "object",
      "properties": {
        "merchantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiContractsResponse": {
      "type": "object",
      "properties": {
        "contracts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Contract"
          }
        }
      }
    },
    "v1GetMultiCreditNoteRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiCreditNoteResponse": {
      "type": "object",
      "properties": {
        "creditNotes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreditNote"
          }
        }
      }
    },
    "v1GetMultiCustomerSummariesRequest": {
      "type": "object",
      "properties": {
        "customerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The customers whose purchase item summaries are being requested"
        },
        "merchantId": {
          "type": "string",
          "title": "The merchant who sells to the customers"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start date of the period"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end date of the period"
        }
      }
    },
    "v1GetMultiCustomerSummariesResponse": {
      "type": "object",
      "properties": {
        "customerSummaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerSummary"
          }
        }
      }
    },
    "v1GetMultiPricingPlanProductRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The unique identifiers of the products (Stock Keeping Unit)"
        }
      }
    },
    "v1GetMultiPricingPlanProductResponse": {
      "type": "object",
      "properties": {
        "pricingPlanProducts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PricingPlanProduct"
          },
          "title": "The multiple pricing plan products of the particular pricing plan"
        }
      }
    },
    "v1GetMultiPricingPlanRequest": {
      "type": "object",
      "properties": {
        "pricingPlanIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the unique identifiers for the pricing plans being requested"
        }
      }
    },
    "v1GetMultiPricingPlanResponse": {
      "type": "object",
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PricingPlan"
          },
          "title": "the list of pricing plans that were requested in the order of the request"
        }
      }
    },
    "v1GetMultiProductPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant which the pricing will be calculated for"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The skus of the products to calculate pricing for"
        },
        "pricingPlanId": {
          "type": "string",
          "title": "Optional pricing plan id that can be passed to get pricing for the contract *given a certain pricing plan*. If not passed, will default to use contract subscription to determine the pricing plan"
        }
      }
    },
    "v1GetMultiProductPricingResponse": {
      "type": "object",
      "properties": {
        "productPrices": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ProductPricing"
          },
          "title": "A map of product skus to their corresponding pricing information"
        },
        "prices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductPrices"
          },
          "title": "A list of prices per product"
        }
      }
    },
    "v1GetMultiProductRequest": {
      "type": "object",
      "properties": {
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiProductResponse": {
      "type": "object",
      "properties": {
        "products": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Product"
          }
        }
      }
    },
    "v1GetMultiRetailConfigurationsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "retailGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiRetailConfigurationsResponse": {
      "type": "object",
      "properties": {
        "retailConfigurations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1RetailConfiguration"
          }
        }
      }
    },
    "v1GetMultiRetailPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant which the retail pricing will be calculated for"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "Deprecated: Please provide a group_id and the currency will be fetched from the corresponding RetailConfiguration\nThe currency to retrieve pricing in"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The skus to calculate pricing for"
        },
        "groupId": {
          "type": "string",
          "description": "group_id represents pricing for a subset of retail customers that the merchant is selling to."
        },
        "customerId": {
          "type": "string",
          "description": "The customer ID to resolve pricing for\nDeprecated: Customer-level pricing is no longer supported. If a customer_id is provided, we will lookup the corresponding group_id for the customer and use that to resolve pricing instead."
        }
      }
    },
    "v1GetMultiRetailPricingResponse": {
      "type": "object",
      "properties": {
        "productPrices": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ProductPricing"
          },
          "title": "A map of product skus to their corresponding pricing information"
        },
        "prices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductPrices"
          },
          "title": "A list of prices per product"
        }
      }
    },
    "v1GetMultiSubscriptionRelationshipsRequest": {
      "type": "object",
      "properties": {
        "subscriptionRelationshipIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMultiSubscriptionRelationshipsResponse": {
      "type": "object",
      "properties": {
        "subscriptionRelationships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubscriptionRelationship"
          }
        }
      }
    },
    "v1GetMultiSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "subscriptionKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetMultiSubscriptionsRequestKey"
          },
          "description": "List of subscription keys. Can use subscription_ids instead."
        },
        "projectionFilter": {
          "$ref": "#/definitions/v1SubscriptionProjectionFilter",
          "title": "Extended data to include as part of the response"
        },
        "subscriptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional: list of subscription IDs. Can be used instead of subscription_keys."
        }
      },
      "description": "request structure for getting billable items."
    },
    "v1GetMultiSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillableItem"
          },
          "title": "list of subscriptions"
        }
      },
      "description": "response structure for the requested billable items."
    },
    "v1GetMultiTaxRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of tax rates to retrieve"
        }
      }
    },
    "v1GetMultiTaxResponse": {
      "type": "object",
      "properties": {
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The tax rates"
        }
      }
    },
    "v1GetMultiWholesaleCostRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to get the price for upcoming purchases"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WholesaleCostItemRequest"
          },
          "title": "The request SKUs with their quantities and frequencies"
        },
        "customerId": {
          "type": "string",
          "title": "Optional ID of the customer to get customer specific discounts for upcoming purchases"
        }
      }
    },
    "v1GetMultiWholesaleCostResponse": {
      "type": "object",
      "properties": {
        "costs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetPurchaseCostResponse"
          }
        }
      }
    },
    "v1GetNextRetailInvoiceSequenceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1GetNextRetailInvoiceSequenceResponse": {
      "type": "object",
      "properties": {
        "nextRetailInvoiceSequence": {
          "type": "string",
          "format": "int64",
          "title": "the invoice sequence set on the merchant"
        },
        "nextInvoiceNumber": {
          "type": "string",
          "format": "int64",
          "title": "the actual number of the next generated invoice"
        }
      }
    },
    "v1GetOutstandingBalanceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant"
        }
      }
    },
    "v1GetOutstandingBalanceResponse": {
      "type": "object",
      "properties": {
        "outstandingBalance": {
          "type": "string",
          "format": "int64",
          "title": "The outstanding balance that the merchant owes"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency for the outstanding balance"
        }
      }
    },
    "v1GetPayoutSummaryRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1GetPayoutSummaryResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Balance"
          },
          "title": "the balances for the merchant's retail accounts"
        },
        "nextInTransitPayoutExpectedDate": {
          "type": "string",
          "format": "date-time",
          "description": "the time that the next in-transit payouts are expected to arrive in the bank."
        },
        "payoutInterval": {
          "type": "string",
          "title": "the amount of time after a payout is received by stripe, before it is transferred to the bank"
        },
        "payoutDelayDays": {
          "type": "string",
          "format": "int64",
          "title": "the number of days charges for the account will be held before being paid out"
        }
      }
    },
    "v1GetPricingPlanProductRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        }
      }
    },
    "v1GetPricingPlanProductResponse": {
      "type": "object",
      "properties": {
        "pricingPlanProduct": {
          "$ref": "#/definitions/v1PricingPlanProduct"
        },
        "pricingPlanDefaultStrategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The billing strategy on the parent pricing plan of the pricing plan product"
        }
      }
    },
    "v1GetProductSummariesTotalRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "Unique ID of the merchant"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "title": "The starting date of the billing period"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "title": "The ending date of the billing period"
        }
      }
    },
    "v1GetProductSummariesTotalResponse": {
      "type": "object",
      "properties": {
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "title": "Total amount in cents of all the product summaries"
        }
      }
    },
    "v1GetPurchaseCostRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to get the price for upcoming puchases"
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "The quantity of upcoming purchases"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "Optional: if the frequency is not passed, the default frequency pricing is used to determine purchase cost"
        }
      }
    },
    "v1GetPurchaseCostResponse": {
      "type": "object",
      "properties": {
        "billingFrequency": {
          "type": "string",
          "title": "The billing frequency of the cost"
        },
        "totalCost": {
          "type": "string",
          "format": "int64",
          "title": "The total cost for the upcoming purchases, before any discounts"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency that the cost is in"
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "Billing strategy used for the product"
        },
        "commitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "Information about the required commitment for the product"
        },
        "isStartingPrice": {
          "type": "boolean",
          "title": "Indicates whether the price may be variable due to factors like in-product-purchases"
        },
        "discountAmount": {
          "type": "string",
          "format": "int64",
          "title": "The estimated discount amount that will be subtracted from total_cost"
        },
        "subtotalCost": {
          "type": "string",
          "format": "int64",
          "title": "The base cost of the purchase without any setup fee or discount included"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "title": "The setup fee is an optional fee that can be charged on the start of a subscription"
        }
      }
    },
    "v1GetRecurringInvoiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the recurring invoice.\n\nThis is required."
        }
      },
      "description": "The request to get a recurring invoice."
    },
    "v1GetRetailAccountBalanceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1GetRetailAccountBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "$ref": "#/definitions/v1AccountBalance",
          "title": "the balance of the merchant's retail account"
        }
      }
    },
    "v1GetRetailBalanceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1GetRetailBalanceResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Balance"
          },
          "title": "the balances for the merchant's retail accounts"
        }
      }
    },
    "v1GetRetailCustomerConfigurationRequest": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        }
      }
    },
    "v1GetRetailCustomerConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/v1RetailCustomerConfiguration"
        }
      }
    },
    "v1GetRetailDisputeRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant"
        },
        "disputeId": {
          "type": "string",
          "title": "The dispute identifier"
        }
      }
    },
    "v1GetRetailDisputeResponse": {
      "type": "object",
      "properties": {
        "dispute": {
          "$ref": "#/definitions/v1Dispute",
          "title": "A dispute for a payment"
        }
      }
    },
    "v1GetRetailPaymentProviderRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the merchant id for the merchant associated to the payment provider account"
        }
      }
    },
    "v1GetRetailPaymentProviderResponse": {
      "type": "object",
      "properties": {
        "statementDescriptor": {
          "type": "string",
          "title": "statement descriptor is the business name for the merchant that appears on a customer statement"
        },
        "stripeConnectId": {
          "type": "string",
          "title": "the ID of the stripe account to make the payment against"
        },
        "paymentFacilitatorType": {
          "$ref": "#/definitions/v1PaymentFacilitatorType",
          "title": "the type of payment facilitator account"
        },
        "countryCode": {
          "type": "string",
          "title": "the two letter ISO country code of the payment facilitator account"
        }
      }
    },
    "v1GetRetailPaymentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The unique identifier for the merchant."
        },
        "paymentId": {
          "type": "string",
          "description": "The unique identifier of the payment."
        }
      }
    },
    "v1GetRetailPaymentResponse": {
      "type": "object",
      "properties": {
        "payment": {
          "$ref": "#/definitions/v1RetailPayment",
          "description": "The retail payment."
        }
      }
    },
    "v1GetRetailPayoutRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "payoutId": {
          "type": "string",
          "title": "the unique identifier of the payout"
        }
      }
    },
    "v1GetRetailPayoutResponse": {
      "type": "object",
      "properties": {
        "payout": {
          "$ref": "#/definitions/v1RetailPayout",
          "title": "the requested payout"
        }
      }
    },
    "v1GetRevenueStatsRequest": {
      "type": "object",
      "properties": {
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The SKUs that should be included in the stats calculation"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start date of the calculation period"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end date of the calculation period"
        }
      },
      "title": "GetRevenueStatsRequest specifies the parameters for gathering revenue stats"
    },
    "v1GetRevenueStatsResponse": {
      "type": "object",
      "properties": {
        "totalRevenue": {
          "type": "string",
          "format": "int64",
          "description": "The total collected revenue in the specified timeframe. This number is in USD cents."
        }
      },
      "title": "GetRevenueStatsResponse contains the revenue stats for the requested SKUs and period"
    },
    "v1GetSalesInvoiceRequest": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "title": "The invoice identifier"
        },
        "merchantId": {
          "type": "string",
          "title": "The merchant identifier"
        }
      },
      "title": "GetSalesInvoiceRequest posts the given sales invoice"
    },
    "v1GetSalesInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1SalesInvoice",
          "title": "The invoice"
        }
      },
      "title": "GetSalesInvoiceResponse returns an invoice"
    },
    "v1GetStatisticsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant for statistics will be calculated"
        }
      }
    },
    "v1GetStatisticsResponse": {
      "type": "object",
      "properties": {
        "totalBillableCustomers": {
          "type": "string",
          "format": "int64",
          "title": "Total number of billable customers for a merchant"
        },
        "currentBasketSize": {
          "type": "number",
          "format": "float",
          "title": "Current basket size of average billable product per customer"
        },
        "changeInBasketSize30Days": {
          "type": "number",
          "format": "float",
          "title": "Increase/decrease rate of basket size in last 30 days"
        }
      }
    },
    "v1GetTaxRuleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the tax rule"
        }
      }
    },
    "v1GetTaxRuleResponse": {
      "type": "object",
      "properties": {
        "taxRule": {
          "$ref": "#/definitions/v1TaxRule",
          "title": "The tax rule"
        }
      }
    },
    "v1GetUpcomingInvoicePreviewRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "invoiceDate": {
          "type": "string",
          "format": "date-time",
          "title": "(optional) The date that the invoice will be generated on\nIf not provided, the next invoice date will be calculated"
        }
      }
    },
    "v1GetUpcomingInvoicePreviewResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice to preview\nThe following fields are not populated:\nid, number, amount_paid, issued, paid, origin, voided, customer_address, external_customer_identifier"
        }
      }
    },
    "v1GetWholesaleComparisonRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Pricing plans to compare"
        },
        "filter": {
          "$ref": "#/definitions/GetWholesaleComparisonRequestGetWholesaleComparisonFilters"
        }
      }
    },
    "v1GetWholesaleComparisonResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetWholesaleComparisonResponseGetWholesaleComparisonResult"
          }
        }
      }
    },
    "v1GetWholesaleProviderPublicKeyRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The merchant identifier used to get the public key based on the subsidiary the merchant resides in."
        },
        "countryCode": {
          "type": "string",
          "title": "The two letter ISO country code used to determine the public key based on the location of a subsidiary.\nThis should ONLY be used in the event we do not have an existing merchant record (i.e. self-signup)"
        }
      }
    },
    "v1GetWholesaleProviderPublicKeyResponse": {
      "type": "object",
      "properties": {
        "publcApiKey": {
          "type": "string",
          "title": "The public API key for the payment provider of the corresponding subsidiary"
        }
      }
    },
    "v1Interval": {
      "type": "string",
      "enum": [
        "INTERVAL_INVALID",
        "INTERVAL_DAY",
        "INTERVAL_WEEK",
        "INTERVAL_MONTH",
        "INTERVAL_YEAR"
      ],
      "default": "INTERVAL_INVALID",
      "description": "Interval of a recurring frequency.\n\n - INTERVAL_INVALID: Invalid means there is no user defined value. This option is invalid."
    },
    "v1Invoice": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "id": {
          "type": "string",
          "title": "Identifier for the invoice"
        },
        "number": {
          "type": "string",
          "title": "The reference number assigned to the invoice for use in the dashboard"
        },
        "customerId": {
          "type": "string",
          "title": "Identifier of the customer who the invoice is for within Vendasta (AG-1234567890)"
        },
        "status": {
          "$ref": "#/definitions/v1InvoiceStatus",
          "title": "Status of the invoice"
        },
        "subtotal": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the invoice before taxes and discounts"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the invoice"
        },
        "amountPaid": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents that has been paid on the invoice"
        },
        "issued": {
          "type": "string",
          "format": "date-time",
          "description": "Date when invoice is issued."
        },
        "due": {
          "type": "string",
          "format": "date-time",
          "title": "Due date of the invoice"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created date of the invoice"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "Last updated date of the invoice"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceItem"
          },
          "title": "The line items of the invoice"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "The currency that this invoice is in"
        },
        "paid": {
          "type": "string",
          "format": "date-time",
          "title": "Paid date of the invoice"
        },
        "orderId": {
          "type": "string",
          "title": "The (optional) order that this invoice is based on. Refers to a sales_orders.v1 Order"
        },
        "amountTax": {
          "type": "string",
          "format": "int64",
          "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice."
        },
        "appliedTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "description": "The aggregate amounts calculated per tax rate for all line items."
        },
        "defaultTaxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The default tax rates to apply to the invoice"
        },
        "appliedBundles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedBundle"
          },
          "title": "The bundles that have been added to the invoice"
        },
        "amountDiscount": {
          "type": "string",
          "format": "int64",
          "title": "The total amount of all discounts"
        },
        "customerName": {
          "type": "string",
          "title": "The name of the customer"
        },
        "origin": {
          "type": "string",
          "title": "Indicates what triggered the invoice generation"
        },
        "collectionMethod": {
          "type": "string",
          "title": "Indicates how we will attempt to collect the invoice (attempt to automatically charge the invoice or send the invoice to the customer)"
        },
        "contactId": {
          "type": "string",
          "title": "The identifier of the contact who will receive invoice notification"
        },
        "memo": {
          "type": "string",
          "title": "An arbitrary note which appears on the invoice"
        },
        "voided": {
          "type": "string",
          "format": "date-time",
          "title": "Voided date of the invoice"
        },
        "defaultPaymentMethod": {
          "type": "string",
          "description": "The identifier of the default payment method for the invoice. It must belong to the customer associated with the invoice."
        },
        "customerAddress": {
          "$ref": "#/definitions/v1InvoiceCustomerAddress",
          "title": "the address of the customer"
        },
        "externalCustomerIdentifier": {
          "type": "string",
          "title": "the identifier of the customer that is in other systems (Non AG-1234567890)"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "The internal notes on an invoice"
        },
        "additionalContactIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The user ids of any additional contacts who will receive invoice notifications"
        },
        "autoAdvance": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the invoice is set to be posted."
        },
        "paymentMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentMethodType"
          },
          "title": "payment_method_types define how a Customer can pay for the Invoice (defaults to card)"
        },
        "lastPaymentStatus": {
          "$ref": "#/definitions/v1LastPaymentStatus",
          "title": "The status of the last payment attempt"
        },
        "amountOwing": {
          "type": "string",
          "format": "int64",
          "title": "The amount owing on the invoice"
        },
        "appliedCreditNotes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedCreditNote"
          },
          "title": "The credit notes applied to the invoice"
        }
      }
    },
    "v1InvoiceCustomerAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The street address of the customer"
        },
        "city": {
          "type": "string",
          "title": "The city of the customer"
        },
        "state": {
          "type": "string",
          "title": "The state of the customer"
        },
        "zip": {
          "type": "string",
          "title": "The zip code of the customer"
        },
        "country": {
          "type": "string",
          "title": "The country of the customer"
        },
        "address2": {
          "type": "string",
          "title": "The second street address of the customer"
        }
      }
    },
    "v1InvoiceItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Random identifier of an invoice item"
        },
        "sku": {
          "type": "string",
          "title": "The identifier of what products/subscription this item refers to. Does not conform to the SKU standard"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents)"
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "title": "The number of items purchased"
        },
        "description": {
          "type": "string",
          "title": "The name or human readable description of what is being purchased"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "calculated total which includes discounts and taxes"
        },
        "appliedTaxes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "title": "The tax rates which apply to the line item"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The default tax rates to apply to the line item"
        },
        "bundleId": {
          "type": "string",
          "title": "the bundle this item belongs to"
        },
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedDiscount"
          },
          "title": "the discounts that have been applied to this invoice item"
        },
        "subtotal": {
          "type": "string",
          "format": "int64",
          "title": "Amount * Quantity"
        },
        "bundleInstanceId": {
          "type": "string",
          "title": "the instance of the bundle this item belongs to"
        },
        "servicePeriodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start of the service period associated with the line item"
        },
        "servicePeriodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end of the service period associated with the line item"
        }
      }
    },
    "v1InvoiceStatus": {
      "type": "string",
      "enum": [
        "DRAFT",
        "DUE",
        "PAID",
        "VOID"
      ],
      "default": "DRAFT"
    },
    "v1Item": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) the date at which billing should occur. This date can be in the past."
        }
      },
      "title": "An Item to bill for"
    },
    "v1LastPaymentStatus": {
      "type": "string",
      "enum": [
        "PAYMENT_UNSET",
        "PAYMENT_SUCCESS",
        "PAYMENT_PENDING",
        "PAYMENT_FAILED"
      ],
      "default": "PAYMENT_UNSET"
    },
    "v1ListBankAccountsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the id for the merchant"
        }
      }
    },
    "v1ListBankAccountsResponse": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BankAccount"
          }
        }
      }
    },
    "v1ListBillableItemsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListBillableItemsRequestFilters",
          "description": "The filters for listing the billable items."
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "searchTerm": {
          "type": "string",
          "title": "search term for pre and post fix matching on customer names"
        }
      },
      "title": "List existing billable item"
    },
    "v1ListBillableItemsRequestFilters": {
      "type": "object",
      "properties": {
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique ids representing products (Stock Keeping Unit)."
        },
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        }
      }
    },
    "v1ListBillableItemsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillableItem"
          },
          "title": "The Billable Item"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "Response that has the billable items"
    },
    "v1ListBundlesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListBundlesRequestFilters",
          "title": "The filters for listing bundles"
        },
        "searchTerm": {
          "type": "string",
          "title": "search term is a prefix/postfix match on bundle name"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListBundlesRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant scope of the bundles"
        }
      }
    },
    "v1ListBundlesResponse": {
      "type": "object",
      "properties": {
        "bundles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Bundle"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListContractDocumentsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListContractDocumentsRequestFilters",
          "title": "Filters to apply when listing contract documents"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListContractDocumentsRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of a merchant"
        }
      }
    },
    "v1ListContractDocumentsResponse": {
      "type": "object",
      "properties": {
        "contractDocuments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContractDocument"
          },
          "title": "The contract documents matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListContractsRequest": {
      "type": "object",
      "properties": {
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListContractsResponse": {
      "type": "object",
      "properties": {
        "contracts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Contract"
          },
          "title": "The contracts"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListCreditNotesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListCreditNotesRequestFilters",
          "title": "The filters for listing credit notes"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListCreditNotesRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the credit note is for"
        },
        "customerId": {
          "type": "string",
          "title": "The customer the credit note is for"
        },
        "number": {
          "type": "string",
          "title": "The reference number assigned to the credit note"
        },
        "createdLte": {
          "type": "string",
          "format": "date-time",
          "title": "The date the credit note was created"
        },
        "createdGte": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ListCreditNotesResponse": {
      "type": "object",
      "properties": {
        "creditNotes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreditNote"
          },
          "title": "The credit notes"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListDiscountsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListDiscountsRequestFilters",
          "title": "The filters for listing discounts"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListDiscountsRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "title": "The expiry date of a discount"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique ids representing products (Stock Keeping Unit)."
        },
        "customerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The customer_ids a Discount can be scoped to"
        },
        "includeCustomerDiscounts": {
          "type": "boolean",
          "title": "Whether to discounts scoped to specific customers.\nIf customer_ids is not empty, then this is implicitly true"
        },
        "consumers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "The consumer types of the discount"
        },
        "subscriptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The subscription_ids a Discount can be scoped to"
        }
      }
    },
    "v1ListDiscountsResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/billingv1Discount"
          },
          "title": "The discounts"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListInvoicesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListInvoicesRequestFilters",
          "title": "The filters for listing invoices"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListInvoicesRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "customerId": {
          "type": "string",
          "title": "The customer the invoice was created for"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoiceStatus"
          },
          "title": "Invoice statuses"
        },
        "pastDue": {
          "type": "boolean",
          "title": "Invoices that are passed the due date and have not been paid"
        },
        "number": {
          "type": "string",
          "title": "Number will filter to a specific invoice number"
        },
        "dateFilter": {
          "$ref": "#/definitions/ListInvoicesRequestFiltersDateFilter",
          "title": "Filter invoices based on dates"
        },
        "origins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter invoices based on their origin (source)"
        },
        "collectionMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter invoices based on their collection method"
        },
        "lastPaymentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LastPaymentStatus"
          },
          "title": "Filter invoices based on their last payment status"
        }
      }
    },
    "v1ListInvoicesResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Invoice"
          },
          "title": "The invoices"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListMerchantBillingReportsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant to list the reports for"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      },
      "title": "ListMerchantBillingReportsRequest requests all merchant billing reports for a merchant"
    },
    "v1ListMerchantBillingReportsResponse": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MerchantReport"
          },
          "title": "The merchant reports to be returned to the client"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "ListMerchantBillingReportsResponse returns list of messages containing a single report record"
    },
    "v1ListPaymentCardsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The unique id of the customer"
        }
      },
      "title": "Get the payment cards for a merchant"
    },
    "v1ListPaymentCardsResponse": {
      "type": "object",
      "properties": {
        "paymentCard": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentCard"
          },
          "title": "A get of the configured payment cards for this merchant"
        }
      },
      "title": "GetPaymentMethodResponse returns the payment method configured for a merchant"
    },
    "v1ListPaymentMethodsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The unique id of the customer"
        }
      },
      "title": "ListPaymentMethodsRequest"
    },
    "v1ListPaymentMethodsResponse": {
      "type": "object",
      "properties": {
        "paymentMethods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentMethod"
          }
        }
      },
      "title": "ListPaymentMethodsResponse returns the payment method configured for a merchant"
    },
    "v1ListPaymentRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListPaymentRequestListPaymentFilters",
          "title": "Filters to apply when listing payments"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListPaymentResponse": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Payment"
          },
          "title": "The payments matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListPayoutsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListPayoutsRequestFilters"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions"
        },
        "subsidiary": {
          "type": "string",
          "title": "The two letter ISO country code representing the subsidiary to list payouts for"
        }
      }
    },
    "v1ListPayoutsRequestFilters": {
      "type": "object",
      "properties": {
        "arrivalDateRange": {
          "$ref": "#/definitions/vendastatypesDateRange"
        }
      }
    },
    "v1ListPayoutsResponse": {
      "type": "object",
      "properties": {
        "payouts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Payout"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata"
        }
      }
    },
    "v1ListPricingPlanProductsRequest": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "DEPRECATED: Use the `ListPricingPlanProductsFilters.sku` instead\nThe sku to list pricing plan products for"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "filters": {
          "$ref": "#/definitions/ListPricingPlanProductsRequestListPricingPlanProductsFilters"
        }
      }
    },
    "v1ListPricingPlanProductsResponse": {
      "type": "object",
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PricingPlanProduct"
          },
          "title": "The pricing plan products"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListProductSummariesRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "Unique ID of the merchant"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "title": "The starting date of the billing period"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "title": "The ending date of the billing period"
        },
        "cursor": {
          "type": "string",
          "title": "Requested position in pagination"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Limit of results"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "(OPTIONAL) The skus that should be returned"
        }
      }
    },
    "v1ListProductSummariesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductSummary"
          },
          "title": "The list of product summary results"
        },
        "nextCursor": {
          "type": "string",
          "title": "Next position in pagination"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Indicates if more data is available"
        },
        "totalResults": {
          "type": "string",
          "format": "int64",
          "title": "The total number of results across all pages"
        }
      }
    },
    "v1ListProductsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "merchant to list products for"
        },
        "searchTerm": {
          "type": "string",
          "title": "string for searching on product name or sku"
        },
        "filters": {
          "$ref": "#/definitions/ListProductsRequestListProductsFilters",
          "title": "filters to apply to list"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListProductsResponse": {
      "type": "object",
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Product"
          },
          "title": "the products matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListPurchaseItemsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListPurchaseItemsRequestListPurchaseItemsFilters",
          "title": "Filters to apply when listing purchase items"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListPurchaseItemsResponse": {
      "type": "object",
      "properties": {
        "purchaseItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PurchaseItem"
          },
          "title": "The purchase items matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "currency of all the purchase items (they must all match, or an error is thrown)"
        }
      }
    },
    "v1ListPurchaseRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListPurchaseRequestListPurchaseFilters",
          "title": "Filters to apply when listing purchases"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListPurchaseResponse": {
      "type": "object",
      "properties": {
        "purchases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Purchase"
          },
          "title": "The purchases matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListRecurringInvoicesFilters": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RecurringInvoiceStatus"
          },
          "description": "Filter recurring invoices to specific statuses. If no statuses are provided, it will not filter by any statuses.\n\nThis is optional."
        },
        "intervals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListRecurringInvoicesFiltersDetailedInterval"
          },
          "title": "Filter by intervals of a recurring invoice with linked interval to interval_count"
        },
        "nextIssuedDate": {
          "$ref": "#/definitions/v1ListRecurringInvoicesFiltersDateFilter",
          "title": "Filter by next invoice issued date"
        }
      },
      "description": "Filters to apply to the list of recurring invoices."
    },
    "v1ListRecurringInvoicesFiltersDateFilter": {
      "type": "object",
      "properties": {
        "dateLte": {
          "type": "string",
          "format": "date-time"
        },
        "dateGte": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ListRecurringInvoicesRequest": {
      "type": "object",
      "properties": {
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "description": "Options for paging the response."
        },
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant to scope the recurring invoices to."
        },
        "customerId": {
          "type": "string",
          "description": "The id of the customer to scope the invoices to."
        },
        "filters": {
          "$ref": "#/definitions/v1ListRecurringInvoicesFilters",
          "description": "Filters results.\n\nThis is optional."
        }
      },
      "description": "The request to list recurring invoices."
    },
    "v1ListRecurringInvoicesResponse": {
      "type": "object",
      "properties": {
        "recurringInvoices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecurringInvoice"
          },
          "description": "The current page of invoices for the customer."
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "description": "Information about additional pages of results."
        }
      },
      "description": "The response from listing recurring invoices."
    },
    "v1ListRefundsRequest": {
      "type": "object",
      "properties": {
        "paymentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The reference ids for the payments whose refund records are being requested"
        },
        "cursor": {
          "type": "string",
          "title": "The cursor is passed to retrieve the next page of results keyed by the cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The page size specifies the number of items to return in the next page"
        },
        "merchantId": {
          "type": "string",
          "title": "The merchant id is used for authorization. If this is not passed in you will need access to all partners.\nIf this is passed in it will filter to return the refunds that are for the merchant with the payment ids"
        }
      },
      "title": "ListRefundsRequest returns refunds matching a list of associated payments"
    },
    "v1ListRefundsResponse": {
      "type": "object",
      "properties": {
        "refunds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Refund"
          },
          "title": "The refunds"
        },
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        }
      },
      "title": "ListRefundsResponse returns a page of refunds"
    },
    "v1ListRetailDisputesRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "filters": {
          "$ref": "#/definitions/ListRetailDisputesRequestListRetailDisputesFilters"
        }
      }
    },
    "v1ListRetailDisputesResponse": {
      "type": "object",
      "properties": {
        "disputes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Dispute"
          },
          "title": "The disputes matching the request"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListRetailPaymentsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "options for paging the request"
        },
        "filters": {
          "$ref": "#/definitions/ListRetailPaymentsRequestListRetailPaymentsFilters",
          "title": "filters to apply when listing payments"
        }
      }
    },
    "v1ListRetailPaymentsResponse": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetailPayment"
          },
          "title": "the payments for the merchant's retail accounts"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "details on paging position"
        }
      }
    },
    "v1ListRetailPayoutsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "options for paging the request"
        }
      }
    },
    "v1ListRetailPayoutsResponse": {
      "type": "object",
      "properties": {
        "payouts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetailPayout"
          },
          "title": "the payouts for the merchant's retail accounts"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "details on paging position"
        }
      }
    },
    "v1ListRetailTransactionsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "options for paging the request"
        },
        "filters": {
          "$ref": "#/definitions/ListRetailTransactionsRequestListRetailTransactionsFilters",
          "title": "filters to apply when listing payments"
        }
      }
    },
    "v1ListRetailTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetailTransaction"
          },
          "title": "the payments for the merchant's retail accounts"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "details on paging position"
        }
      }
    },
    "v1ListSalesCreditNoteRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListSalesCreditNoteRequestListSalesCreditNoteFilters",
          "title": "Filters to apply when listing sales credit notes"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      },
      "title": "ListSalesCreditNoteRequest requests multiple credit notes for a merchant"
    },
    "v1ListSalesCreditNoteResponse": {
      "type": "object",
      "properties": {
        "creditNote": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SalesCreditNote"
          },
          "title": "The credit note"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "ListSalesCreditNoteResponse returns repeated credit notes"
    },
    "v1ListSalesInvoiceRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/ListSalesInvoiceRequestListSalesInvoiceFilters",
          "title": "Filters to apply when listing sales invoices"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "searchTerm": {
          "type": "string",
          "title": "String used to search invoices by various fields"
        }
      },
      "title": "ListSalesInvoiceRequest requests multiple invoices for a merchant"
    },
    "v1ListSalesInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SalesInvoice"
          },
          "title": "The invoices"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "ListSalesInvoiceResponse returns an invoice"
    },
    "v1ListSubscriptionRelationshipsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListSubscriptionRelationshipsRequestFilters"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions"
        }
      }
    },
    "v1ListSubscriptionRelationshipsRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "originId": {
          "type": "string"
        },
        "originType": {
          "$ref": "#/definitions/v1EntityType"
        },
        "targetId": {
          "type": "string"
        },
        "targetType": {
          "$ref": "#/definitions/v1EntityType"
        },
        "relationshipType": {
          "$ref": "#/definitions/v1RelationshipType"
        }
      }
    },
    "v1ListSubscriptionRelationshipsResponse": {
      "type": "object",
      "properties": {
        "subscriptionRelationships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubscriptionRelationship"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata"
        }
      }
    },
    "v1ListSubscriptionRetentionByGroupResponse": {
      "type": "object",
      "properties": {
        "metricsByGroup": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListSubscriptionRetentionByGroupResponseSubscriptionRetentionByGroup"
          },
          "title": "A list of subscription metrics for the provided groups"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListSubscriptionRetentionBySKUResponse": {
      "type": "object",
      "properties": {
        "subscriptionMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetentionMetrics"
          },
          "title": "A list of subscription metrics grouped by SKU"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListSubscriptionRetentionRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant"
        },
        "filters": {
          "$ref": "#/definitions/v1ListSubscriptionRetentionRequestFilters",
          "title": "The list filters to be applied to the query"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListSubscriptionRetentionRequestFilters": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The start date of the time range"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The end date of the time range"
        }
      }
    },
    "v1ListSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListSubscriptionsRequestFilters",
          "description": "The filters for listing the billable items."
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "projectionFilter": {
          "$ref": "#/definitions/v1SubscriptionProjectionFilter",
          "title": "Extended data to include as part of the response"
        }
      },
      "title": "List active and inactive subscriptions"
    },
    "v1ListSubscriptionsRequestFilters": {
      "type": "object",
      "properties": {
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique ids representing products (Stock Keeping Unit)."
        },
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "searchTerm": {
          "type": "string",
          "title": "search term for pre and post fix matching on customer names"
        },
        "status": {
          "$ref": "#/definitions/billingv1SubscriptionStatus",
          "title": "Status for whether the product is activated or deactivated"
        },
        "expiredDateGte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to subscriptions greater than or equal to the given timestamp"
        },
        "expiredDateLte": {
          "type": "string",
          "format": "date-time",
          "title": "Filter to subscriptions less than or equal to the given timestamp"
        },
        "frequencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Frequency"
          },
          "title": "Frequencies that the subscriptions are billed at"
        }
      }
    },
    "v1ListSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillableItem"
          },
          "title": "The Billable Item"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "Response that has subscriptions"
    },
    "v1ListTaxRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListTaxRequestFilters",
          "title": "The filters for listing taxes"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      }
    },
    "v1ListTaxRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "includeArchived": {
          "type": "boolean",
          "description": "Whether to include archived tax rates in the response. Defaults to false."
        },
        "countryCode": {
          "type": "string",
          "title": "The two digit iso country code of the tax rate"
        },
        "stateCode": {
          "type": "string",
          "title": "The state code of the tax rate"
        },
        "name": {
          "type": "string",
          "title": "The tax name eg: GST, PST, HST"
        }
      }
    },
    "v1ListTaxResponse": {
      "type": "object",
      "properties": {
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The tax rates"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListTaxRulesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListTaxRulesRequestFilters",
          "title": "Filters to apply to the list of tax rules"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for pagination"
        }
      }
    },
    "v1ListTaxRulesRequestFilters": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer"
        },
        "entityType": {
          "$ref": "#/definitions/v1TaxRuleEntityType"
        }
      }
    },
    "v1ListTaxRulesResponse": {
      "type": "object",
      "properties": {
        "taxRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRule"
          },
          "title": "The tax rules"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about paging"
        }
      }
    },
    "v1Merchant": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "address": {
          "type": "string",
          "title": "The address of the merchant"
        },
        "city": {
          "type": "string",
          "title": "The city of the merchant"
        },
        "state": {
          "type": "string",
          "title": "The state of the merchant"
        },
        "country": {
          "type": "string",
          "title": "The country of the merchant"
        },
        "zipCode": {
          "type": "string",
          "title": "The zip code of the merchant"
        },
        "emailAddress": {
          "type": "string",
          "title": "The email address of the merchant"
        },
        "phoneNumber": {
          "type": "string",
          "title": "The phone number of the merchant"
        },
        "contactName": {
          "type": "string",
          "title": "The contact name for the merchant"
        },
        "companyName": {
          "type": "string",
          "title": "The company name of the merchant"
        },
        "autoPostInvoices": {
          "type": "boolean",
          "title": "Whether to automatically post the invoice when it is generated"
        },
        "autoChargeInvoices": {
          "type": "boolean",
          "title": "Whether invoices will be charged automatically or not"
        },
        "includeInFinancialRecords": {
          "type": "boolean",
          "title": "Whether to include the merchant within financial records"
        },
        "additionalEmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of additional email addresses for the merchant"
        },
        "hasAlternativePaymentMethod": {
          "type": "boolean",
          "title": "Whether merchant has an alternative payment method on file"
        },
        "stripeAccountId": {
          "type": "string",
          "title": "The stripe account id for the merchant"
        },
        "merchantType": {
          "$ref": "#/definitions/v1MerchantType",
          "title": "The merchant type"
        }
      }
    },
    "v1MerchantReport": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the report is for"
        },
        "year": {
          "type": "string",
          "format": "int64",
          "title": "The year the report was generated for"
        },
        "month": {
          "$ref": "#/definitions/v1Month",
          "title": "The month the report was generated for"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp when the report was created"
        },
        "status": {
          "$ref": "#/definitions/v1MerchantReportStatus",
          "title": "The status of the report generation"
        }
      },
      "title": "A single Merchant report record"
    },
    "v1MerchantReportStatus": {
      "type": "string",
      "enum": [
        "FAILED",
        "PENDING",
        "COMPLETED"
      ],
      "default": "FAILED"
    },
    "v1MerchantServicesReportRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the report run."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "When the report run was created."
        },
        "reportType": {
          "$ref": "#/definitions/v1MerchantServicesReportRunType",
          "description": "The type of report."
        },
        "status": {
          "$ref": "#/definitions/v1MerchantServicesReportRunStatus",
          "description": "The status of the report run."
        },
        "error": {
          "type": "string",
          "description": "If there was a failure, the message will be included."
        }
      }
    },
    "v1MerchantServicesReportRunStatus": {
      "type": "string",
      "enum": [
        "MERCHANT_SERVICES_REPORT_RUN_STATUS_UNSPECIFIED",
        "MERCHANT_SERVICES_REPORT_RUN_STATUS_PENDING",
        "MERCHANT_SERVICES_REPORT_RUN_STATUS_SUCCEEDED",
        "MERCHANT_SERVICES_REPORT_RUN_STATUS_FAILED"
      ],
      "default": "MERCHANT_SERVICES_REPORT_RUN_STATUS_UNSPECIFIED",
      "description": " - MERCHANT_SERVICES_REPORT_RUN_STATUS_PENDING: The report run will be pending while the report is being generated.\n - MERCHANT_SERVICES_REPORT_RUN_STATUS_SUCCEEDED: The report run will be successful once the report has been generated, and is ready for download.\n - MERCHANT_SERVICES_REPORT_RUN_STATUS_FAILED: The report run will be failed if something went wrong generating the report."
    },
    "v1MerchantServicesReportRunType": {
      "type": "string",
      "enum": [
        "MERCHANT_SERVICES_REPORT_RUN_TYPE_UNSPECIFIED",
        "MERCHANT_SERVICES_REPORT_RUN_TYPE_BALANCE_ITEMIZED"
      ],
      "default": "MERCHANT_SERVICES_REPORT_RUN_TYPE_UNSPECIFIED"
    },
    "v1MerchantType": {
      "type": "string",
      "enum": [
        "MERCHANT_TYPE_INVALID",
        "MERCHANT_TYPE_WHOLESALE",
        "MERCHANT_TYPE_RETAIL"
      ],
      "default": "MERCHANT_TYPE_INVALID",
      "description": "- MERCHANT_TYPE_WHOLESALE: The wholesale merchant e.g. Partner\n - MERCHANT_TYPE_RETAIL: The retail merchant e.g. SMB",
      "title": "Merchant type"
    },
    "v1MeteredComponent": {
      "type": "object",
      "properties": {
        "componentId": {
          "type": "string",
          "title": "The id of the metered billing component being created"
        },
        "name": {
          "type": "string",
          "description": "The name of the component when displayed in invoices etc."
        }
      },
      "description": "A Metered component identifies an individual resource which may be 'used'\ne.g. SMS messages, server instance hours, domain purchases, etc."
    },
    "v1Month": {
      "type": "string",
      "enum": [
        "INVALID_MONTH",
        "JANUARY",
        "FEBRUARY",
        "MARCH",
        "APRIL",
        "MAY",
        "JUNE",
        "JULY",
        "AUGUST",
        "SEPTEMBER",
        "OCTOBER",
        "NOVEMBER",
        "DECEMBER"
      ],
      "default": "INVALID_MONTH"
    },
    "v1Note": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1Origin": {
      "type": "string",
      "enum": [
        "UNSET",
        "MANUAL",
        "SALES_ORDER",
        "RENEWAL",
        "TEMPLATE"
      ],
      "default": "UNSET",
      "title": "Origin of the invoice"
    },
    "v1PagedRequestOptions": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor can be passed to retrieve the next page of results keyed by the cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "page_size specifies the number of items to return in the next page"
        }
      }
    },
    "v1PagedResponseMetadata": {
      "type": "object",
      "properties": {
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        }
      }
    },
    "v1PauseDunningRequest": {
      "type": "object",
      "properties": {
        "purchaseId": {
          "type": "string",
          "title": "The identifier for the purchase to be paused"
        },
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant the purchase is for"
        },
        "day": {
          "type": "string",
          "title": "The day (20060102) of the purchase"
        },
        "pauseDunningUntil": {
          "type": "string",
          "format": "date-time",
          "title": "Date to pause dunning until"
        }
      }
    },
    "v1PayInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        },
        "reason": {
          "type": "string",
          "title": "An optional reason for this update"
        }
      }
    },
    "v1Payment": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "Identifier of the merchant that made this payment"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created Date of the payment"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "Currency of the payment"
        },
        "paymentSource": {
          "$ref": "#/definitions/v1PaymentSource",
          "title": "The source of where this money came from"
        },
        "allocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PaymentPaymentAllocation"
          },
          "title": "The reference id and amount to which this payment is associated"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the payment"
        },
        "description": {
          "type": "string",
          "title": "The description of the payment"
        },
        "externalReferenceId": {
          "type": "string",
          "title": "The reference id of the payment method"
        },
        "status": {
          "$ref": "#/definitions/v1PaymentStatus",
          "title": "The status of the payment"
        }
      },
      "title": "A Payment represents money changing hands (or the attempt to do that)"
    },
    "v1PaymentACHDebit": {
      "type": "object",
      "properties": {
        "lastFourDigits": {
          "type": "string",
          "title": "last 4 digits of the bank account"
        },
        "id": {
          "type": "string",
          "title": "the id of the payment method"
        }
      }
    },
    "v1PaymentACSSDebit": {
      "type": "object",
      "properties": {
        "lastFourDigits": {
          "type": "string",
          "title": "last 4 digits of the bank account"
        },
        "id": {
          "type": "string",
          "title": "the id of the payment method"
        }
      }
    },
    "v1PaymentAllocationType": {
      "type": "string",
      "enum": [
        "PAYMENT_ALLOCATION_TYPE_UNSET",
        "PAYMENT_ALLOCATION_TYPE_PURCHASE",
        "PAYMENT_ALLOCATION_TYPE_INVOICE"
      ],
      "default": "PAYMENT_ALLOCATION_TYPE_UNSET"
    },
    "v1PaymentCard": {
      "type": "object",
      "properties": {
        "lastFourDigits": {
          "type": "string",
          "title": "last 4 digits of the credit card"
        },
        "cardType": {
          "$ref": "#/definitions/PaymentCardCARD_TYPE"
        },
        "address": {
          "type": "string",
          "title": "the billing address of the card"
        },
        "city": {
          "type": "string",
          "title": "city of the billing address of the card"
        },
        "state": {
          "type": "string",
          "title": "state of the billing address of the card"
        },
        "country": {
          "type": "string",
          "title": "country of the billing address of the card"
        },
        "zipCode": {
          "type": "string",
          "title": "zip/postal code of the billing address of the card"
        },
        "cardId": {
          "type": "string",
          "title": "card_id that stripe returns when creating a card"
        },
        "cardholderName": {
          "type": "string",
          "title": "name of the cardholder"
        },
        "expiryMonth": {
          "type": "integer",
          "format": "int32",
          "title": "The expiry month of the credit card"
        },
        "expiryYear": {
          "type": "integer",
          "format": "int32",
          "title": "The expiry year of the credit card"
        },
        "fundingType": {
          "$ref": "#/definitions/PaymentCardFUNDING_TYPE",
          "title": "The method of funding the card supports"
        },
        "default": {
          "type": "boolean",
          "title": "The default payment card for a specific merchant"
        }
      }
    },
    "v1PaymentErrorCode": {
      "type": "string",
      "enum": [
        "PAYMENT_ERROR_CODE_UNSET",
        "PAYMENT_ERROR_CODE_UNKNOWN",
        "PAYMENT_ERROR_CODE_NO_ACCOUNT",
        "PAYMENT_ERROR_CODE_INSUFFICIENT_FUNDS",
        "PAYMENT_ERROR_CODE_DEBIT_NOT_AUTHORIZED"
      ],
      "default": "PAYMENT_ERROR_CODE_UNSET",
      "title": "- PAYMENT_ERROR_CODE_UNKNOWN: to support returning an error that we don't yet handle"
    },
    "v1PaymentFacilitatorType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CUSTOM_STRIPE",
        "STANDARD_STRIPE"
      ],
      "default": "UNSPECIFIED"
    },
    "v1PaymentIntent": {
      "type": "object",
      "properties": {
        "paymentIntentStatus": {
          "$ref": "#/definitions/v1PaymentIntentStatus",
          "title": "the latest status of the payment intent"
        },
        "paymentMethodType": {
          "$ref": "#/definitions/v1PaymentMethodType",
          "title": "the payment method used to make the latest payment"
        },
        "lastErrorCode": {
          "$ref": "#/definitions/v1PaymentErrorCode",
          "title": "the latest error code that occurred on the payment intent"
        }
      },
      "title": "PaymentIntent captures the latest data regarding the Payment Intent and its attempted Payment"
    },
    "v1PaymentIntentStatus": {
      "type": "string",
      "enum": [
        "PAYMENT_INTENT_STATUS_UNSET",
        "PAYMENT_INTENT_STATUS_PROCESSING",
        "PAYMENT_INTENT_STATUS_SUCCEEDED"
      ],
      "default": "PAYMENT_INTENT_STATUS_UNSET"
    },
    "v1PaymentLinkItem": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents)"
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "title": "The number of items purchased"
        },
        "description": {
          "type": "string",
          "title": "The name or human readable description of what is being purchased"
        }
      }
    },
    "v1PaymentMethod": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1PaymentMethodType",
          "title": "type will determine what other properties are filled in (i.e., card, ach_debit)"
        },
        "card": {
          "$ref": "#/definitions/v1PaymentCard"
        },
        "achDebit": {
          "$ref": "#/definitions/v1PaymentACHDebit"
        },
        "acssDebit": {
          "$ref": "#/definitions/v1PaymentACSSDebit"
        },
        "default": {
          "type": "boolean",
          "title": "default whether this payment method is the default payment method set on the Stripe account"
        }
      }
    },
    "v1PaymentMethodType": {
      "type": "string",
      "enum": [
        "PAYMENT_METHOD_TYPE_UNSET",
        "PAYMENT_METHOD_TYPE_CARD",
        "PAYMENT_METHOD_TYPE_ACH_DEBIT",
        "PAYMENT_METHOD_TYPE_ACSS_DEBIT"
      ],
      "default": "PAYMENT_METHOD_TYPE_UNSET"
    },
    "v1PaymentProcessor": {
      "type": "string",
      "enum": [
        "PAYMENT_PROCESSOR_INVALID",
        "PAYMENT_PROCESSOR_UNSET",
        "PAYMENT_PROCESSOR_STRIPE"
      ],
      "default": "PAYMENT_PROCESSOR_INVALID",
      "description": "The payment processor used for handling payments.\n\n - PAYMENT_PROCESSOR_INVALID: An undefined valid. This is invalid."
    },
    "v1PaymentSource": {
      "type": "string",
      "enum": [
        "PAYMENT_SOURCE_NONE",
        "PAYMENT_SOURCE_STRIPE",
        "PAYMENT_SOURCE_VCASH"
      ],
      "default": "PAYMENT_SOURCE_NONE"
    },
    "v1PaymentStatus": {
      "type": "string",
      "enum": [
        "PAYMENT_STATUS_UNSET",
        "PAYMENT_STATUS_SUCCEEDED",
        "PAYMENT_STATUS_FAILED",
        "PAYMENT_STATUS_REFUNDED",
        "PAYMENT_STATUS_PARTIALLY_REFUNDED",
        "PAYMENT_STATUS_PENDING"
      ],
      "default": "PAYMENT_STATUS_UNSET"
    },
    "v1PaymentStatuses": {
      "type": "string",
      "enum": [
        "PAYMENT_STATUSES_NOT_SET",
        "PAYMENT_STATUSES_UNPAID",
        "PAYMENT_STATUSES_PAID",
        "PAYMENT_STATUSES_PART_PAID",
        "PAYMENT_STATUSES_NOT_APPLICABLE"
      ],
      "default": "PAYMENT_STATUSES_NOT_SET"
    },
    "v1Payout": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "arrivalDate": {
          "type": "string",
          "format": "date-time"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency"
        },
        "status": {
          "$ref": "#/definitions/v1PayoutStatus"
        },
        "type": {
          "$ref": "#/definitions/v1PayoutType"
        },
        "lastFourDigits": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "bankId": {
          "type": "string",
          "title": "bank_id is the stripe representation of the bank id"
        }
      }
    },
    "v1PayoutStatus": {
      "type": "string",
      "enum": [
        "PAYOUT_STATUS_NOT_SET",
        "PAYOUT_STATUS_PAID",
        "PAYOUT_STATUS_PENDING",
        "PAYOUT_STATUS_IN_TRANSIT",
        "PAYOUT_STATUS_CANCELED",
        "PAYOUT_STATUS_FAILED"
      ],
      "default": "PAYOUT_STATUS_NOT_SET"
    },
    "v1PayoutType": {
      "type": "string",
      "enum": [
        "PAYOUT_TYPE_NOT_SET",
        "PAYOUT_TYPE_BANK_ACCOUNT",
        "PAYOUT_TYPE_CARD"
      ],
      "default": "PAYOUT_TYPE_NOT_SET"
    },
    "v1PostSalesInvoiceRequest": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "title": "The invoice identifier"
        }
      },
      "title": "PostSalesInvoiceRequest posts the given sales invoice"
    },
    "v1PrepareRetailPaymentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/PrepareRetailPaymentRequestOrder"
        },
        "paymentMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentMethodType"
          },
          "description": "Optional: The specific payment methods to create the payment intent with. If not provided, the payment methods configured on the RetailCustomerConfiguration will be used."
        }
      }
    },
    "v1PrepareRetailPaymentResponse": {
      "type": "object",
      "properties": {
        "stripeClientSecret": {
          "type": "string",
          "title": "stripe payment intent secret is used to accept payment via stripe's client side libraries"
        },
        "intentId": {
          "type": "string"
        },
        "paymentIntent": {
          "$ref": "#/definitions/v1PaymentIntent",
          "title": "the latest payment intent information"
        }
      }
    },
    "v1Pricing": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PricingRuleType",
          "title": "Pricing rule type eg. Standard, Stairstep, etc"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PricingRule"
          },
          "title": "Pricing rules"
        }
      }
    },
    "v1PricingPlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "the id of the pricing plan"
        },
        "name": {
          "type": "string",
          "title": "the human readable name of the pricing plan"
        },
        "defaultBillingStrategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "the default billing strategy to be applied to all prices under this plan"
        }
      }
    },
    "v1PricingPlanProduct": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The id of the pricing plan this product is associated with"
        },
        "sku": {
          "type": "string",
          "title": "Unique id representing a product"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "DEPRECATED: frequency has been moved onto nested PricingPlanProductPricing message.\nThe frequency this product is billed"
        },
        "pricing": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PricingPlanProductPricing"
          },
          "title": "A map of the currency to its pricing information"
        },
        "commitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "The commitment required to activate this product"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time this pricing plan product was created"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "title": "The time this pricing plan product was last modified"
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The billing strategy for this product"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "the minimum number of units that must be purchased each billing period"
        },
        "volumeCommitmentStartsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should begin being applied"
        },
        "volumeCommitmentEndsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should cease being applied"
        },
        "pricingType": {
          "$ref": "#/definitions/v1ProductPricingType",
          "title": "The pricing type for this product"
        }
      },
      "title": "Contains product pricing information for a specific sku in a pricing plan"
    },
    "v1PricingPlanProductPricing": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1ProductPricingType",
          "title": "The type of the pricing"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductPricingRule"
          },
          "title": "The rules that define how something is priced"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "description": "The setup fee for the product."
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The frequency that the price is billed at"
        },
        "currencyCode": {
          "type": "string",
          "title": "The ISO currency code"
        },
        "fees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Fee"
          },
          "title": "The fees related to this pricing plan product"
        }
      }
    },
    "v1Product": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "the name of the product"
        },
        "sku": {
          "type": "string",
          "title": "the id for the product"
        },
        "iconUrl": {
          "type": "string",
          "title": "Deprecated: please get rich product information like the icon url, from the marketplace apps apis.\nThe url for the product icon"
        },
        "hasPricingOverride": {
          "type": "boolean",
          "title": "indicates whether merchant has contract-specific pricing for product"
        },
        "hasDiscount": {
          "type": "boolean",
          "title": "indicates whether merchant has discount for product"
        },
        "productType": {
          "$ref": "#/definitions/billingv1ProductType",
          "title": "the type of product"
        },
        "metered": {
          "type": "boolean",
          "title": "when true, the quantity is calculated from usages reported during at the end of the billing period"
        }
      },
      "title": "Product - scoped to a merchant"
    },
    "v1ProductPrices": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The sku of the product"
        },
        "prices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductPricing"
          },
          "title": "A list of prices for the sku"
        }
      }
    },
    "v1ProductPricing": {
      "type": "object",
      "properties": {
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy"
        },
        "pricingType": {
          "$ref": "#/definitions/v1ProductPricingType"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency"
        },
        "pricingRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductPricingRule"
          }
        },
        "commitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "Information about the required commitment for the product"
        },
        "isStartingPrice": {
          "type": "boolean",
          "title": "Indicates whether the price may be variable due to factors like in-product-purchases"
        },
        "resolvedFrom": {
          "type": "string",
          "title": "Where the pricing was derived from (eg. the pricing plan ID, or contract product override)"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "minimum number of units that will be charged each billing period"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "title": "setup fee if one exists that is in addition to the products price"
        },
        "fees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Fee"
          },
          "title": "The fees related to this product pricing"
        }
      }
    },
    "v1ProductPricingRule": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "format": "int64",
          "title": "The price in cents"
        },
        "minUnits": {
          "type": "string",
          "format": "int64",
          "title": "The minimum number of units to get this price"
        },
        "maxUnits": {
          "type": "string",
          "format": "int64",
          "title": "The maximum number of units to get this price"
        },
        "componentPricing": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ComponentPricing"
          },
          "title": "list of component pricing information\nif empty, then no component pricing charges will be applied"
        }
      }
    },
    "v1ProductPricingType": {
      "type": "string",
      "enum": [
        "PRODUCT_PRICING_TYPE_INVALID",
        "PRODUCT_PRICING_TYPE_STANDARD",
        "PRODUCT_PRICING_TYPE_STAIRSTEP",
        "PRODUCT_PRICING_TYPE_TIERED"
      ],
      "default": "PRODUCT_PRICING_TYPE_INVALID"
    },
    "v1ProductSummary": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The unique SKU of the product"
        },
        "productName": {
          "type": "string",
          "title": "Name of the product"
        },
        "totalQuantity": {
          "type": "string",
          "format": "int64",
          "title": "Quantity of all items sold"
        },
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "title": "Summed dollar amount of all items in cents, before discounts"
        },
        "totalDiscount": {
          "type": "string",
          "format": "int64",
          "title": "Summed dollar amount of all discounts in cents"
        },
        "pricing": {
          "$ref": "#/definitions/v1Pricing",
          "title": "Pricing of the product"
        },
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProductSummaryDiscount"
          },
          "title": "The discounts of the product"
        },
        "billingStrategy": {
          "$ref": "#/definitions/v1ProductSummaryBillingStrategy",
          "title": "Billing strategy of the product"
        },
        "productType": {
          "$ref": "#/definitions/v1ProductSummaryProductType",
          "title": "Type of the product"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The frequency at which one is billed for this product"
        },
        "proratedPercent": {
          "type": "number",
          "format": "float",
          "title": "The proration percent that has been applied"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "the minimum number of units that must be purchased each billing period"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "description": "The setup fee for the product."
        }
      }
    },
    "v1ProductSummaryBillingStrategy": {
      "type": "string",
      "enum": [
        "CHARGE_AT_END_OF_BILLING_PERIOD",
        "CHARGE_AT_START_OF_BILLING_PERIOD",
        "CHARGE_INSTANTLY",
        "CHARGE_AT_END_OF_DAY"
      ],
      "default": "CHARGE_AT_END_OF_BILLING_PERIOD"
    },
    "v1ProductSummaryDiscount": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ProductSummaryDiscountDiscountType",
          "description": "Discount type eg. fixed_amount, percent_amount, etc."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "title": "Value of the discount"
        },
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "title": "Discounted dollar amount in cents"
        },
        "description": {
          "type": "string",
          "title": "Full english description"
        },
        "resetEachPeriod": {
          "type": "boolean",
          "title": "Whether or not the discount's usage should reset each period"
        }
      }
    },
    "v1ProductSummaryProductType": {
      "type": "string",
      "enum": [
        "BUNDLE",
        "FEE",
        "PRODUCT",
        "SUBSCRIPTION",
        "VENDASTA_PRODUCT"
      ],
      "default": "BUNDLE"
    },
    "v1Purchase": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "Identifier of the merchant that made this purchase"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp of the purchase"
        },
        "purchaseId": {
          "type": "string",
          "title": "Unique identifier of the purchase"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Amount in cents of the purchase"
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "title": "Currency of the purchase"
        },
        "renewal": {
          "type": "boolean",
          "title": "Flag indicating whether or not this purchase was a renewal purchase"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PurchaseItem"
          },
          "title": "Items involved in the purchase"
        },
        "billingStrategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "BillingStrategy is the timing for how we charged/will charge for this purchase"
        },
        "isDunning": {
          "type": "boolean",
          "title": "IsDunning is true when the purchase is currently in dunning"
        },
        "dunningAttempt": {
          "type": "string",
          "format": "int64",
          "title": "DunningAttempt the dunning step that this purchase is on"
        },
        "voided": {
          "type": "string",
          "format": "date-time",
          "title": "The time the purchase was voided"
        },
        "paid": {
          "type": "boolean",
          "title": "Whether or not the purchase has been paid for"
        },
        "status": {
          "$ref": "#/definitions/v1PurchaseStatus",
          "title": "The status of the purchase"
        },
        "creditAmount": {
          "type": "string",
          "format": "int64",
          "title": "total credit amount"
        },
        "appliedCredits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedCredit"
          },
          "title": "the credits applied to the purchase"
        },
        "taxAmount": {
          "type": "string",
          "format": "int64",
          "title": "the total tax amount"
        },
        "appliedTaxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "description": "The aggregate amounts calculated per tax rate for all line items."
        },
        "pauseDunningUntil": {
          "type": "string",
          "format": "date-time",
          "title": "Indicates if dunning is to be paused on this purchase and when it should resume dunning"
        }
      },
      "title": "A purchase represents a group of items purchased together"
    },
    "v1PurchaseItem": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "Stock keeping unit of the purchased item"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The Original Amount in cents of the purchase item"
        },
        "orderId": {
          "type": "string",
          "title": "Identifier of the order which this item was a part of"
        },
        "customerId": {
          "type": "string",
          "title": "Identifier of the customer who this item is for"
        },
        "discountAmount": {
          "type": "string",
          "format": "int64",
          "title": "If there was a discount applied to this purchase item it is how much was discounted"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "How much this purchase item cost after applying discounts, setup fees, etc"
        },
        "appliedDiscounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedDiscount"
          },
          "title": "The discounts applied to this purchase item"
        },
        "merchantId": {
          "type": "string",
          "title": "merchant_id, day and purchase_id together build the key for the purchase this purchase item belongs to\nIdentifier of the merchant that made the purchase"
        },
        "day": {
          "type": "string",
          "title": "Identifier for the day the purchase was made  - in the format `20060102`"
        },
        "purchaseId": {
          "type": "string",
          "title": "Identifier of the purchase which this item is a part of"
        },
        "description": {
          "type": "string",
          "title": "The description for the purchase item"
        },
        "taxAmount": {
          "type": "string",
          "format": "int64",
          "title": "the total tax amount for the purchase item"
        },
        "appliedTaxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedTaxRate"
          },
          "title": "AppliedTaxRate is a list of the tax rates applied to the purchase item"
        },
        "setupFee": {
          "type": "string",
          "format": "int64",
          "title": "The setup fee for the purchase item"
        },
        "feeAmount": {
          "type": "string",
          "format": "int64",
          "title": "The total amount of fees that have been applied to the purchase item (setup fee not included)"
        },
        "appliedFees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedFee"
          },
          "title": "The fees applied to this purchase item"
        }
      },
      "title": "An item that is part of a purchase"
    },
    "v1PurchaseStatus": {
      "type": "string",
      "enum": [
        "PURCHASE_STATUS_UNSET",
        "PURCHASE_STATUS_PENDING",
        "PURCHASE_STATUS_DUE",
        "PURCHASE_STATUS_SUCCESS",
        "PURCHASE_STATUS_DUNNING",
        "PURCHASE_STATUS_FAILED"
      ],
      "default": "PURCHASE_STATUS_UNSET"
    },
    "v1ReconcilePayoutRequest": {
      "type": "object",
      "properties": {
        "bankReconciliationId": {
          "type": "string",
          "description": "The financial force id for a specific bank reconciliation form, when omitted NetSuite Bank reconciliation is initiated."
        },
        "payoutId": {
          "type": "string",
          "title": "The id of a payout. This can be extracted from a payout object"
        },
        "allowRetries": {
          "type": "boolean",
          "description": "A key to make the pipeline unique on."
        },
        "subsidiary": {
          "type": "string",
          "title": "The two letter ISO country code representing the subsidiary to reconcile the payout against"
        }
      }
    },
    "v1ReconcilePayoutResponse": {
      "type": "object",
      "properties": {
        "pipelineId": {
          "type": "string",
          "title": "The id of the pipeline that will be running to reconcile the payout"
        }
      }
    },
    "v1RecurringInvoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the recurring invoice.\nThis property is read-only. It will be ignored on create.\nUpdate requests require this property to be set to identify the recurring invoice to update."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The time the recurring invoice was created at.\n\nThis is read-only."
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "When the recurring invoice was last updated.\n\nThis is read-only."
        },
        "customerId": {
          "type": "string",
          "description": "The id of the customer the recurring invoice belongs to.\n\nThis is required."
        },
        "status": {
          "$ref": "#/definitions/v1RecurringInvoiceStatus",
          "description": "The status indicates whether an invoice will be generated.\n\nThis is required."
        },
        "nextIssue": {
          "type": "string",
          "format": "date-time",
          "description": "When the next invoice will be generated.\n\nThis property is required."
        },
        "intervalCount": {
          "type": "string",
          "format": "int64",
          "description": "This is the number of intervals that will pass before an invoice is created.\nFor example, an interval count of \"2\" and interval of \"week\" will result in an invoice being generated every\n2 weeks.\n\nThis property is required. It must be greater than 0."
        },
        "interval": {
          "$ref": "#/definitions/v1Interval",
          "description": "The interval that invoices will be generated at.\n\nThis property is required."
        },
        "repeatOnDayOfMonth": {
          "type": "string",
          "format": "int64",
          "description": "The day of the month the invoice will be sent on when using month or year intervals.\n\nIf the month the invoice is being generated on has fewer days than this value, it will be sent at the end of the\nmonth. To send an invoice at the end of every month, this value can be set to 31.\n\nThis property is only required when the interval is INTERVAL_MONTH or INTERVAL_YEAR. It must be greater than\nor equal to 1 or less than or equal to 31."
        },
        "collectionMethod": {
          "$ref": "#/definitions/v1CollectionMethod",
          "description": "The collection method describes how the invoice generated will be collected.\n\nThis property is required."
        },
        "recipientUserId": {
          "type": "string",
          "description": "The user id of the user who will receive any emails regarding the invoice.\n\nThis property is required if the collection method is not COLLECTION_METHOD_MANUAL."
        },
        "paymentProcessor": {
          "$ref": "#/definitions/v1PaymentProcessor",
          "description": "The payment processor defines what third party processor is responsible for handling the payments of this recurring\ninvoice.\n\nThis property is required if the collection method is COLLECTION_METHOD_CHARGE_AUTOMATICALLY."
        },
        "paymentProcessorId": {
          "type": "string",
          "description": "The id of the payment method in the payment processor's system.\nFor example, if the payment processor is Stripe, the processor id would be a payment method in Stripe's system like\npm_1VJJRx3f57oEAmiusv4IWGS7.\n\nThis is required if the collection method is COLLECTION_METHOD_CHARGE_AUTOMATICALLY."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecurringInvoiceItem"
          },
          "description": "Items to be added to the next invoice.\n\nThis property is required."
        },
        "totalAmount": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of the invoice.\n\nThis property is read-only."
        },
        "currencyCode": {
          "type": "string",
          "description": "The ISO currency code of the invoice.\n\nThis property is read-only."
        },
        "memo": {
          "type": "string",
          "description": "This property can be edited.",
          "title": "An arbitrary note which appears on the invoice"
        },
        "endsAt": {
          "type": "string",
          "format": "date-time",
          "description": "Invoices will no longer be created after the ends at time.\n\nThis property is optional. If it's not set, invoices will be generated indefinitely."
        },
        "customerName": {
          "type": "string",
          "title": "The name of the customer"
        },
        "customerAddress": {
          "$ref": "#/definitions/v1RecurringInvoiceCustomerAddress",
          "title": "the address of the customer"
        },
        "netD": {
          "type": "string",
          "format": "int64",
          "description": "The number of days after the invoice is issued that it is due. This property is optional, but should be between 1 and 180 if set.\nSetting this property when collection method is COLLECTION_METHOD_CHARGE_AUTOMATICALLY is not permitted.\n\nIf this property is not set, it will default to 1 day when collection method is set to COLLECTION_METHOD_CHARGE_AUTOMATICALLY\nand 10 days for other collection methods."
        },
        "additionalRecipientIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The user ids of additional recipients who will receive any emails regarding the invoice."
        },
        "paymentMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentMethodType"
          },
          "title": "The payment_method_types define how a Customer can pay for the Invoice (defaults to card)"
        }
      },
      "description": "Recurring invoices allow for invoices to be generated at a set interval for an account."
    },
    "v1RecurringInvoiceBundle": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the bundle."
        },
        "hideLineItems": {
          "type": "boolean",
          "description": "Hiding the line items will result in only the bundle being shown as a single line item without showing the line\nitems which comprise it. The line item total will be the sum of its line items.\n\nThis is optional. It defaults to false."
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecurringInvoiceLineItem"
          },
          "description": "The line items of the bundle.\n\nThis is required."
        }
      },
      "description": "A recurring invoice line item bundle is one or more line items which should be grouped together on the invoice.\nThe bundle can be given its own name, and the line items may be hidden from the invoice sent to the user."
    },
    "v1RecurringInvoiceCustomerAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The street address of the customer"
        },
        "city": {
          "type": "string",
          "title": "The city of the customer"
        },
        "state": {
          "type": "string",
          "title": "The state of the customer"
        },
        "zip": {
          "type": "string",
          "title": "The zip code of the customer"
        },
        "country": {
          "type": "string",
          "title": "The country of the customer"
        },
        "address2": {
          "type": "string",
          "title": "The second street address of the customer"
        }
      }
    },
    "v1RecurringInvoiceItem": {
      "type": "object",
      "properties": {
        "lineItem": {
          "$ref": "#/definitions/v1RecurringInvoiceLineItem",
          "description": "A line item for a single product."
        },
        "bundle": {
          "$ref": "#/definitions/v1RecurringInvoiceBundle",
          "description": "A line item bundle is one or more products which should be shown as a group on the invoice.\nThe line items that make up the bundle may be hidden from the user."
        }
      },
      "description": "Recurring invoice items are the line items or bundles which will be shown on the invoice."
    },
    "v1RecurringInvoiceLineItem": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "The marketplace SKU for the product.\n\nThis is optional."
        },
        "unitPrice": {
          "type": "string",
          "format": "int64",
          "description": "The price for a single unit. This is represented as the lowest value unit of the currency. For example, if the\naccount uses USD, $10.00 should be represented as 1000 cents.\n\nThis is optional. Default is 0. This can be negative, but the total amount of the invoice must be greater\nthan or equal to zero."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "The number of products being charged. The total value of this line item would be unit_amount * quantity.\n\nThis is required. Must be greater than or equal to 0."
        },
        "name": {
          "type": "string",
          "description": "The name of the line item.\n\nThis is required."
        },
        "taxRateIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of the tax rate ids which apply to this invoice.\n\nThis is optional."
        }
      },
      "description": "Recurring invoice line items are the individual products that make up a line item for a recurring invoice."
    },
    "v1RecurringInvoiceStatus": {
      "type": "string",
      "enum": [
        "RECURRING_INVOICE_STATUS_INVALID",
        "RECURRING_INVOICE_STATUS_INACTIVE",
        "RECURRING_INVOICE_STATUS_ACTIVE",
        "RECURRING_INVOICE_STATUS_ARCHIVED"
      ],
      "default": "RECURRING_INVOICE_STATUS_INVALID",
      "description": " - RECURRING_INVOICE_STATUS_INVALID: Invalid means there is no user defined value. This option is invalid.\n - RECURRING_INVOICE_STATUS_INACTIVE: The invoices will not bet sent from this recurring invoice.\n - RECURRING_INVOICE_STATUS_ACTIVE: The recurring invoice will generate invoices.\n - RECURRING_INVOICE_STATUS_ARCHIVED: The recurring invoice is no longer used. It will not generate any future invoices, however they are still visible\nto users."
    },
    "v1ReferenceType": {
      "type": "string",
      "enum": [
        "PURCHASE",
        "PURCHASE_ITEM",
        "INVOICE"
      ],
      "default": "PURCHASE"
    },
    "v1Refund": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant to be refunded"
        },
        "chargeId": {
          "type": "string",
          "title": "The stripe charge id representing the original stripe payment that was made, to apply a refund to"
        },
        "refundId": {
          "type": "string",
          "title": "The identifier of the refund"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount to refund"
        },
        "email": {
          "type": "string",
          "title": "The email of the individual requesting the refund"
        },
        "reason": {
          "$ref": "#/definitions/v1RefundReason",
          "title": "The reason that the refund is being issued"
        },
        "status": {
          "$ref": "#/definitions/v1RefundStatus",
          "title": "The status of the refund. For credit cards this can be SUCCEEDED or FAILED"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time that the refund was created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "The last time that the refund was updated"
        },
        "referenceType": {
          "$ref": "#/definitions/v1ReferenceType",
          "title": "The type of entity the refund is for"
        },
        "referenceId": {
          "type": "string",
          "title": "The identifier of the refunded entity"
        },
        "description": {
          "type": "string",
          "title": "Additional details to be provided for the refund"
        }
      }
    },
    "v1RefundReason": {
      "type": "string",
      "enum": [
        "REQUESTED_BY_CUSTOMER",
        "DUPLICATE",
        "FRAUDULENT"
      ],
      "default": "REQUESTED_BY_CUSTOMER"
    },
    "v1RefundRetailPaymentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The unique identifier for the merchant."
        },
        "paymentId": {
          "type": "string",
          "description": "The unique identifier of the payment."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "A positive integer in cents representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge."
        },
        "reason": {
          "$ref": "#/definitions/v1RetailRefundReason",
          "description": "(Optional) the reason for the refund."
        }
      }
    },
    "v1RefundRetailPaymentResponse": {
      "type": "object",
      "properties": {
        "payment": {
          "$ref": "#/definitions/v1RetailPayment",
          "description": "The retail payment after the refund has been applied."
        }
      }
    },
    "v1RefundStatus": {
      "type": "string",
      "enum": [
        "SUCCEEDED",
        "FAILED",
        "PENDING"
      ],
      "default": "SUCCEEDED"
    },
    "v1RelationshipType": {
      "type": "string",
      "enum": [
        "RELATIONSHIP_TYPE_INVALID",
        "RELATIONSHIP_TYPE_ASSOCIATED_WITH"
      ],
      "default": "RELATIONSHIP_TYPE_INVALID",
      "title": "- RELATIONSHIP_TYPE_ASSOCIATED_WITH: RELATIONSHIP_TYPE_ASSOCIATED_WITH is used to indicate that the origin entity is associated with the target entity (For example, a retail subscription is associated with the wholesale subscription)"
    },
    "v1RemoveBundleRequest": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "bundleId": {
          "type": "string"
        },
        "bundleInstanceId": {
          "type": "string"
        }
      }
    },
    "v1RemoveBundleResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1RenewalState": {
      "type": "string",
      "enum": [
        "RENEWAL_STATE_IMMEDIATE",
        "RENEWAL_STATE_DELAYED"
      ],
      "default": "RENEWAL_STATE_IMMEDIATE",
      "description": "Renewal State is used when creating a new subscription (billable item).\n\n - RENEWAL_STATE_IMMEDIATE: The subscription will be created in a recurring state upon successfully being billed. The next renewal date will be automatically set based upon the start_date.\n - RENEWAL_STATE_DELAYED: The subscription will be created in a non recurring state upon successfully being billed. The next renewal date will be set at a later time."
    },
    "v1ReplaceSubscriptionPresetsRequest": {
      "type": "object",
      "properties": {
        "presets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubscriptionPreset"
          },
          "title": "The list of SubscriptionPresets"
        }
      }
    },
    "v1ReplaceSubscriptionPresetsResponse": {
      "type": "object",
      "properties": {
        "subscriptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "If not provided in the request, this is a generated subscription_id that can later be used in CreateSubscription(s) requests.\nIf it was provided on the request, this is the same subscription_id."
        }
      }
    },
    "v1ReplaceSubscriptionRelationshipsRequest": {
      "type": "object",
      "properties": {
        "toAdd": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubscriptionRelationship"
          },
          "title": "to_add is the SubscriptionRelationships to add"
        },
        "toRemove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "to_remove refers to the subscription_relationship_ids of the SubscriptionRelationships that should be removed"
        }
      }
    },
    "v1ReplaceSubscriptionRelationshipsResponse": {
      "type": "object",
      "properties": {
        "addedSubscriptionRelationshipIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "added_subscription_relationship_ids are returned in the same order as the to_add in the ReplaceRelationshipsRequest"
        }
      }
    },
    "v1ReplaceTaxRuleRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rule is for"
        },
        "entityType": {
          "$ref": "#/definitions/v1TaxRuleEntityType",
          "title": "The type of entity the tax rule applies to"
        },
        "entityId": {
          "type": "string",
          "title": "The id of the entity the tax rule applies to"
        },
        "type": {
          "$ref": "#/definitions/v1TaxRuleType",
          "title": "The type of tax rule"
        },
        "taxRateIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The identifiers of the tax rates that the tax rule applies to"
        },
        "consumer": {
          "$ref": "#/definitions/v1Consumer",
          "title": "The consumer type of the tax rule"
        }
      },
      "title": "Create or update a tax rule for a merchant, only a single tax tax rule can exist for a given merchant, entity id, and rule type"
    },
    "v1ReplaceTaxRuleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the tax rule"
        }
      }
    },
    "v1ResetContractPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant that will have the contract pricing reset"
        }
      }
    },
    "v1ResetPaymentFacilitatorRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1ResumeDunningRequest": {
      "type": "object",
      "properties": {
        "purchaseId": {
          "type": "string",
          "title": "The identifier for the purchase to be resumed"
        },
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant the purchase is for"
        },
        "day": {
          "type": "string",
          "title": "The day (20060102) of the purchase"
        }
      }
    },
    "v1RetailConfiguration": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique id of the merchant"
        },
        "retailGroupId": {
          "type": "string",
          "title": "the identifier that represents a subset of retail customers"
        },
        "currencyCode": {
          "type": "string",
          "title": "the iso currency code"
        },
        "defaultCustomerConfiguration": {
          "$ref": "#/definitions/v1DefaultCustomerConfiguration",
          "title": "the default configuration for all new RetailCustomerConfigurations under this merchant/group ID"
        },
        "currencyConversionRate": {
          "type": "string",
          "format": "int64",
          "description": "Used to automatically set a retail price in the store's selected currency, converted from the product's USD MSRP.\nThis is only used when the store currency is not one of USD, CAD, or AUD. If the conversion rate is set to 0, no conversions will be done."
        }
      },
      "title": "RetailConfiguration represents the settings for a subset of retail customers that the merchant is selling to"
    },
    "v1RetailCustomerConfiguration": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "invoiceDay": {
          "type": "string",
          "format": "int64",
          "title": "The day of the month in which renewal draft invoices will be issued"
        },
        "nextInvoiceDate": {
          "type": "string",
          "format": "date-time",
          "title": "Calculated date the next invoice will be generated if not set to daily"
        },
        "autoPost": {
          "type": "boolean",
          "title": "Whether invoices should be auto posted"
        },
        "collectionMethod": {
          "type": "string",
          "title": "Indicates how we will attempt to collect for invoices on this customer"
        },
        "netD": {
          "type": "string",
          "format": "int64",
          "title": "the number of days till an invoice is due after posting"
        },
        "autoGenerate": {
          "type": "boolean",
          "title": "Indicates whether invoices will be automatically generated for renewing subscriptions"
        },
        "contactId": {
          "type": "string",
          "title": "The default contact for the customer"
        },
        "useTemplateInvoice": {
          "type": "boolean",
          "title": "Deprecated: invoice templates are no longer supported in favour of recurring invoices\nIndicates whether invoice will be generated using the customers template invoice"
        },
        "memo": {
          "type": "string",
          "title": "The memo to be added to the invoice"
        },
        "additionalContactIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The user ids of any additional contacts for the customer"
        },
        "autoGenerateRetailSubscriptions": {
          "type": "boolean",
          "title": "Indicates whether retail subscriptions should be automatically generated for the customer"
        },
        "paymentMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentMethodType"
          },
          "title": "payment_method_types define how a Customer can pay for the generated Invoices (defaults to card)"
        }
      }
    },
    "v1RetailPayment": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "Identifier of the merchant that made this payment"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created Date of the payment"
        },
        "currencyCode": {
          "type": "string",
          "title": "Currency of the payment"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount that was paid"
        },
        "referenceId": {
          "type": "string",
          "title": "The ID of the entity the payment was made against (i.e. an invoice or order)"
        },
        "referenceType": {
          "$ref": "#/definitions/v1RetailPaymentReferenceType",
          "title": "The type of object the reference ID is referring to"
        },
        "customerId": {
          "type": "string",
          "title": "The customer ID that made the payment"
        },
        "status": {
          "$ref": "#/definitions/v1PaymentStatus",
          "title": "The status of the payment"
        },
        "description": {
          "type": "string",
          "title": "The description of the payment (what the customer would have seen on the credit card descriptor)"
        },
        "failureCode": {
          "type": "string",
          "title": "If the payment failed this code represents the failure"
        },
        "failureMessage": {
          "type": "string",
          "title": "If the payment failed this message contains the reason"
        },
        "applicationFee": {
          "type": "string",
          "format": "int64",
          "title": "The application fee for the payment"
        },
        "disputed": {
          "type": "boolean",
          "title": "Whether or not the payment has been disputed"
        },
        "id": {
          "type": "string",
          "description": "The unique id of the payment."
        },
        "dispute": {
          "$ref": "#/definitions/v1Dispute",
          "title": "RetailDispute of a payment if it exists"
        },
        "cardDetails": {
          "$ref": "#/definitions/RetailPaymentCardDetails",
          "title": "Details about the card that was used to make the payment"
        },
        "refunds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RetailRefund"
          },
          "title": "All refunds that have been made against this payment"
        },
        "paymentMethodDetailsType": {
          "$ref": "#/definitions/RetailPaymentPaymentMethodDetailsType",
          "title": "PaymentMethodDetailsType defines the payment method used"
        },
        "achDebitDetails": {
          "$ref": "#/definitions/RetailPaymentACHDetails",
          "title": "Details about the ACH debit used to make the payment"
        },
        "acssDebitDetails": {
          "$ref": "#/definitions/RetailPaymentACSSDetails",
          "title": "Details about the ACSS debit used to make the payment"
        },
        "paymentFacilitatorFee": {
          "type": "string",
          "format": "int64",
          "title": "The fee a payment facilitator would  charge (i.e., Stripe)"
        },
        "paymentFacilitatorType": {
          "$ref": "#/definitions/v1PaymentFacilitatorType",
          "title": "the type of payment facilitator account"
        },
        "settledAt": {
          "type": "string",
          "format": "date-time",
          "title": "The date the payment was settled"
        }
      }
    },
    "v1RetailPaymentReferenceType": {
      "type": "string",
      "enum": [
        "RETAIL_PAYMENT_REFERENCE_TYPE_UNSET",
        "RETAIL_PAYMENT_REFERENCE_TYPE_INVOICE",
        "RETAIL_PAYMENT_REFERENCE_TYPE_SALES_ORDER"
      ],
      "default": "RETAIL_PAYMENT_REFERENCE_TYPE_UNSET"
    },
    "v1RetailPaymentsEnabledRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1RetailPaymentsEnabledResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "the status of retail payments"
        }
      }
    },
    "v1RetailPayout": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the payout"
        },
        "arrivalDate": {
          "type": "string",
          "format": "date-time",
          "title": "The date the payout will be deposited"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount of the payout"
        },
        "currencyCode": {
          "type": "string",
          "title": "The currency of the payout"
        },
        "status": {
          "$ref": "#/definitions/v1PayoutStatus",
          "title": "The status of the payout"
        },
        "type": {
          "$ref": "#/definitions/v1PayoutType",
          "title": "The type of the payout"
        },
        "lastFourDigits": {
          "type": "string",
          "title": "The last four digits of the account the payout is being deposited in"
        },
        "bankName": {
          "type": "string",
          "title": "The name of the bank that the payout account belongs to"
        },
        "bankId": {
          "type": "string",
          "title": "bank_id is the stripe representation of the bank id"
        },
        "failureCode": {
          "type": "string",
          "title": "If the payout failed this code represents the failure"
        },
        "failureMessage": {
          "type": "string",
          "title": "If the payout failed this message contains the reason"
        }
      }
    },
    "v1RetailRefund": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "the amount that was paid in the smallest sub denomination of the currency (e.g. The $1.24 = 124)"
        },
        "currencyCode": {
          "type": "string",
          "title": "Currency the refund was issued in"
        },
        "refundReason": {
          "$ref": "#/definitions/v1RetailRefundReason",
          "title": "The reason given for issuing the refund"
        },
        "status": {
          "$ref": "#/definitions/v1RetailRefundStatus",
          "title": "If the refund has completed"
        },
        "failureReason": {
          "$ref": "#/definitions/v1RetailRefundFailureReason",
          "title": "Addition details if status is failed"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "When then refund was created"
        },
        "payment": {
          "$ref": "#/definitions/v1RetailPayment",
          "description": "The retail payment the refund is issued against, not populated on all endpoints."
        }
      }
    },
    "v1RetailRefundFailureReason": {
      "type": "string",
      "enum": [
        "RETAIL_REFUND_FAILURE_REASON_UNSET",
        "RETAIL_REFUND_FAILURE_REASON_LOST_OR_STOLEN_CARD",
        "RETAIL_REFUND_FAILURE_REASON_EXPIRED_OR_CANCELED_CARD",
        "RETAIL_REFUND_FAILURE_REASON_UNKNOWN"
      ],
      "default": "RETAIL_REFUND_FAILURE_REASON_UNSET"
    },
    "v1RetailRefundReason": {
      "type": "string",
      "enum": [
        "RETAIL_REFUND_REASON_UNSET",
        "RETAIL_REFUND_REASON_DUPLICATE",
        "RETAIL_REFUND_REASON_FRAUDULENT",
        "RETAIL_REFUND_REASON_REQUESTED_BY_CUSTOMER"
      ],
      "default": "RETAIL_REFUND_REASON_UNSET"
    },
    "v1RetailRefundStatus": {
      "type": "string",
      "enum": [
        "RETAIL_REFUND_STATUS_UNSET",
        "RETAIL_REFUND_STATUS_PENDING",
        "RETAIL_REFUND_STATUS_SUCCEEDED",
        "RETAIL_REFUND_STATUS_FAILED",
        "RETAIL_REFUND_STATUS_REQUIRES_ACTION",
        "RETAIL_REFUND_STATUS_CANCELED"
      ],
      "default": "RETAIL_REFUND_STATUS_UNSET"
    },
    "v1RetailStatusRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        }
      }
    },
    "v1RetailStatusResponse": {
      "type": "object",
      "properties": {
        "supportedRegion": {
          "type": "boolean",
          "title": "whether or not the merchant's address is within a supported region for vendasta payments"
        },
        "canAcceptPayment": {
          "type": "boolean",
          "title": "returns true if the merchant has completed their vendasta payments setup to the point where they can accept payments"
        },
        "requirements": {
          "$ref": "#/definitions/RetailStatusResponseVerificationRequirements",
          "title": "verification requirements that are required along with errors encountered within the verification process"
        },
        "disabledReason": {
          "type": "string",
          "title": "the reason the connect account cannot create charges or receive payouts"
        },
        "futureRequirements": {
          "$ref": "#/definitions/RetailStatusResponseVerificationRequirements",
          "title": "verification future requirements that will be required along with errors encountered within the verification process"
        }
      }
    },
    "v1RetailTransaction": {
      "type": "object",
      "properties": {
        "payment": {
          "$ref": "#/definitions/v1RetailPayment"
        },
        "refund": {
          "$ref": "#/definitions/v1RetailRefund"
        },
        "payoutFailure": {
          "$ref": "#/definitions/v1RetailPayout"
        },
        "adjustment": {
          "$ref": "#/definitions/v1Adjustment"
        }
      }
    },
    "v1RetailTransactionType": {
      "type": "string",
      "enum": [
        "RETAIL_TRANSACTION_TYPE_UNSET",
        "RETAIL_TRANSACTION_TYPE_PAYMENT",
        "RETAIL_TRANSACTION_TYPE_REFUND",
        "RETAIL_TRANSACTION_TYPE_PAYOUT_FAILURE",
        "RETAIL_TRANSACTION_TYPE_ADJUSTMENT"
      ],
      "default": "RETAIL_TRANSACTION_TYPE_UNSET",
      "description": "RetailTransactionType describes the various one of types of RetailTransaction."
    },
    "v1RetentionMetrics": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "The unique id representing a product (Stock Keeping Unit)."
        },
        "productName": {
          "type": "string",
          "title": "The name of the product"
        },
        "startingCount": {
          "type": "string",
          "format": "int64",
          "title": "The number of activations at the start of the time period"
        },
        "activations": {
          "type": "string",
          "format": "int64",
          "title": "The number of activiations within a time period"
        },
        "deactivations": {
          "type": "string",
          "format": "int64",
          "title": "The number of deactivations within a time period"
        },
        "churn": {
          "type": "number",
          "format": "float",
          "title": "The churn rate within the time period (0.0 - 1.0)"
        },
        "retention": {
          "type": "number",
          "format": "float",
          "title": "The retention rate within the time period (0.0 - 1.0)"
        }
      }
    },
    "v1RetryPurchaseRequest": {
      "type": "object",
      "properties": {
        "purchaseId": {
          "type": "string",
          "title": "The identifier for the purchase to be retried"
        },
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant the purchase is for"
        },
        "day": {
          "type": "string",
          "title": "The day (20060102) of the purchase"
        },
        "shouldEnterDunning": {
          "type": "boolean",
          "title": "Whether or not purchase should enter dunning"
        }
      }
    },
    "v1ReverseSubscriptionRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        }
      },
      "title": "Reverts all billing for the specified subscription"
    },
    "v1SalesCreditNote": {
      "type": "object",
      "properties": {
        "creditNoteId": {
          "type": "string",
          "description": "Identifier for the credit note."
        },
        "creditNoteNumber": {
          "type": "string",
          "description": "Unique auto-number field in the format SCR{auto-number}."
        },
        "merchantId": {
          "type": "string",
          "description": "Identifier for the merchant."
        },
        "creditNoteReason": {
          "type": "string",
          "description": "Reason for creating a credit note."
        },
        "creditNoteDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date that will appear on the credit note."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date the credit note payment is due."
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "description": "Currency in which monetary values are expressed on this credit note."
        },
        "total": {
          "type": "string",
          "format": "int64",
          "description": "Total credit note value (in cents)."
        },
        "outstanding": {
          "type": "string",
          "format": "int64",
          "description": "Amount still owed on this document in document currency (in cents)."
        },
        "invoiceId": {
          "type": "string",
          "description": "Identifier for the corresponding invoice."
        },
        "invoiceNumber": {
          "type": "string",
          "description": "Unique auto-number field for an invoice in the format SIN{auto-number}."
        },
        "status": {
          "$ref": "#/definitions/v1SalesCreditNoteStatus",
          "description": "Current status of the credit note."
        },
        "paymentStatus": {
          "type": "string",
          "title": "Is this document unpaid, part-paid, or paid in full?"
        },
        "externalId": {
          "type": "string",
          "description": "External identifier for the credit note."
        }
      },
      "description": "A credit note is a commercial document issued by a seller to a buyer. Credit notes act as a Source document for the Sales return journal.\nA credit note is a way of refunding an invoice that has already been issued or paid. It can be for part of (or the whole amount of) an invoice."
    },
    "v1SalesCreditNoteStatus": {
      "type": "string",
      "enum": [
        "SALES_CREDIT_NOTE_STATUS_IN_PROGRESS",
        "SALES_CREDIT_NOTE_STATUS_READY_TO_POST",
        "SALES_CREDIT_NOTE_STATUS_COMPLETE",
        "SALES_CREDIT_NOTE_STATUS_DISCARDED"
      ],
      "default": "SALES_CREDIT_NOTE_STATUS_IN_PROGRESS"
    },
    "v1SalesInvoice": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "description": "Identifier for the invoice."
        },
        "invoiceNumber": {
          "type": "string",
          "description": "Unique auto-number field in the format SIN{auto-number}."
        },
        "merchantId": {
          "type": "string",
          "title": "Identifier for the merchant"
        },
        "invoiceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date that will appear on the invoice."
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the invoice period."
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "End date of the invoice period."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date the payment is due."
        },
        "total": {
          "type": "string",
          "format": "int64",
          "description": "Total invoice value, including the tax (in cents)."
        },
        "currency": {
          "$ref": "#/definitions/v1Currency",
          "description": "Currency in which monetary values are expressed on this invoice."
        },
        "status": {
          "$ref": "#/definitions/v1SalesInvoiceStatus",
          "description": "Current status of the invoice."
        },
        "paymentStatus": {
          "type": "string",
          "title": "Is this document unpaid, part-paid, or paid in full?"
        },
        "outstanding": {
          "type": "string",
          "format": "int64",
          "description": "Amount still owed on this document in document currency (in cents)."
        },
        "type": {
          "$ref": "#/definitions/v1SalesInvoiceType",
          "title": "whether the invoice was created for an instant purchase or invoiced purchase(s)"
        },
        "externalId": {
          "type": "string",
          "description": "External identifier for the invoice."
        }
      },
      "description": "A sales invoice is a commercial document issued by a seller to a buyer, indicating the products, quantities and agreed prices for goods or services that have already been provided. \nA sales invoice indicates that, unless paid in advance, payment is due by the buyer to the seller, according to the agreed terms."
    },
    "v1SalesInvoiceStatus": {
      "type": "string",
      "enum": [
        "SALES_INVOICE_STATUS_IN_PROGRESS",
        "SALES_INVOICE_STATUS_READY_TO_POST",
        "SALES_INVOICE_STATUS_COMPLETE",
        "SALES_INVOICE_STATUS_DISCARDED"
      ],
      "default": "SALES_INVOICE_STATUS_IN_PROGRESS"
    },
    "v1SalesInvoiceType": {
      "type": "string",
      "enum": [
        "SALES_INVOICE_TYPE_UNSET",
        "SALES_INVOICE_TYPE_INVOICED",
        "SALES_INVOICE_TYPE_INSTANT"
      ],
      "default": "SALES_INVOICE_TYPE_UNSET"
    },
    "v1SearchMerchantsRequest": {
      "type": "object",
      "properties": {
        "searchTerm": {
          "type": "string",
          "title": "search term to filter out a specific merchant, looks at merchant_id and company_name"
        },
        "sortBy": {
          "$ref": "#/definitions/SearchMerchantsRequestSortBy",
          "title": "How to order the Search"
        },
        "sortDirection": {
          "$ref": "#/definitions/v1SortDirection",
          "title": "Direction to sort the rows"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        }
      },
      "title": "Search merchants"
    },
    "v1SearchMerchantsResponse": {
      "type": "object",
      "properties": {
        "merchants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Merchant"
          },
          "title": "list of merchants"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      },
      "title": "Search merchants paged response"
    },
    "v1SendCreditNoteRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the credit note to send"
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The email address to send the credit note to"
        }
      }
    },
    "v1SendInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The email address to send the invoice to"
        },
        "languageCode": {
          "type": "string",
          "title": "The language to send the invoice in"
        }
      }
    },
    "v1SendSalesInvoiceEmailRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "An invoice identifier"
        }
      }
    },
    "v1SendSalesInvoiceReceiptEmailRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "An invoice identifier"
        }
      }
    },
    "v1SetAutoBillableRequest": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "title": "The unique identifier for the subscription"
        },
        "autoBillable": {
          "type": "boolean",
          "title": "Specifies whether the subscription should result in charges (ie. through invoices) to the customer"
        }
      },
      "title": "SetAutoBillableRequest specifies which subscription to set the auto billable flag for"
    },
    "v1SetAutoChargeInvoicesRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id for the merchant"
        },
        "autoChargeInvoices": {
          "type": "boolean",
          "title": "Whether invoices will be charged automatically or not"
        }
      },
      "title": "Adjusts whether a merchant's invoices will be auto charged or not"
    },
    "v1SetAutoPostInvoicesRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id for the merchant"
        },
        "shouldAutoPostInvoices": {
          "type": "boolean",
          "title": "Dictates whether invoices should be posted automatically after they are created"
        }
      },
      "title": "Set a boolean to determine whether invoices will be posted automatically for a merchant"
    },
    "v1SetDefaultBankAccountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant id to update the default bank account for"
        },
        "bankAccountId": {
          "type": "string",
          "title": "The id of the bank account to set as the default"
        }
      }
    },
    "v1SetDefaultPaymentCardRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant id to update the default payment card for"
        },
        "cardId": {
          "type": "string",
          "description": "The id of the card to set as the default for a specific merchant. This corresponds to the same card id that can be found on the PaymentCard message."
        }
      }
    },
    "v1SetDefaultPaymentMethodRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The unique id of the customer"
        },
        "paymentMethodId": {
          "type": "string",
          "title": "The unique payment method ID"
        }
      },
      "title": "Sets the default payment method for a customer"
    },
    "v1SetHasAlternativePaymentMethodRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id for the merchant"
        },
        "hasAlternativePaymentMethod": {
          "type": "boolean",
          "title": "Whether merchant has an alternative payment method on file"
        }
      },
      "title": "Sets a boolean indicating whether a partner has an payment method other than credit card on file"
    },
    "v1SetIncludeInFinancialRecordsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id for the merchant"
        },
        "includeInFinancialRecords": {
          "type": "boolean",
          "title": "Whether to include the merchant within financial records"
        }
      },
      "title": "Adjusts whether a merchant will be included within financial records"
    },
    "v1SetNextRetailInvoiceSequenceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "nextRetailInvoiceSequence": {
          "type": "string",
          "format": "int64",
          "title": "the next invoice sequence number"
        }
      }
    },
    "v1SetRenewalStartRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "description": "The reference to the owner in the external system."
        },
        "orderId": {
          "type": "string",
          "description": "Unique ID for this instance of the sku."
        },
        "renewalStart": {
          "type": "string",
          "format": "date-time",
          "title": "(Optional) the date to start renewing on. Will default to the current time if not supplied"
        }
      },
      "title": "SetRenewalStartRequest specifies which subscription to set the renewal start date for, and optionally the date to set it to"
    },
    "v1SetWholesaleProductStrategyRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy"
        }
      }
    },
    "v1SetWholesaleProductVolumeCommitmentRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64"
        },
        "volumeCommitmentStartsAt": {
          "type": "string",
          "format": "date-time"
        },
        "volumeCommitmentEndsAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SortDirection": {
      "type": "string",
      "enum": [
        "SORT_DIRECTION_ASCENDING",
        "SORT_DIRECTION_DESCENDING"
      ],
      "default": "SORT_DIRECTION_ASCENDING",
      "description": "The directions that a result set can be sorted in."
    },
    "v1Source": {
      "type": "string",
      "enum": [
        "SOURCE_UNSET",
        "SOURCE_SYSTEM",
        "SOURCE_USER"
      ],
      "default": "SOURCE_UNSET"
    },
    "v1StartRevRecTemplateBackfillRequest": {
      "type": "object",
      "title": "must send an empty request. Typescript sdk gen breaks if you use google.protobuf.Empty instead"
    },
    "v1StopDunningRequest": {
      "type": "object",
      "properties": {
        "purchaseId": {
          "type": "string",
          "title": "The identifier for the purchase to be stopped"
        },
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant the purchase is for"
        },
        "day": {
          "type": "string",
          "title": "The day (20060102) of the purchase"
        }
      }
    },
    "v1SubmitEvidenceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the merchant id for the merchant associated to the payment provider account"
        },
        "disputeId": {
          "type": "string",
          "title": "The identifier for the dispute"
        },
        "paymentId": {
          "type": "string",
          "title": "The identifier of the payment disputed"
        },
        "evidence": {
          "$ref": "#/definitions/v1SubmitEvidenceRequestDisputeEvidence",
          "title": "The evidence provided"
        },
        "submit": {
          "type": "boolean",
          "title": "Whether to immediately submit this evidence to the bank or keep it staged to provide more evidence"
        }
      }
    },
    "v1SubmitEvidenceRequestDisputeEvidence": {
      "type": "object",
      "properties": {
        "billingAddress": {
          "type": "string",
          "title": "The billing address provided by the customer"
        },
        "customerEmailAddress": {
          "type": "string",
          "title": "The customer's email address"
        },
        "customerName": {
          "type": "string",
          "title": "The customer's name"
        },
        "productDescription": {
          "type": "string",
          "title": "A description of the product or service sold (max 20000 characters)"
        },
        "customerSignatureFileId": {
          "type": "string",
          "title": "The ID of a file containing a relevant document or contract with the customer’s signature"
        },
        "customerCommunicationFileId": {
          "type": "string",
          "title": "Any communication with the customer relevant to the case (e.g. email proving receipt, use, or satisfaction with the product or service)"
        },
        "receiptFileId": {
          "type": "string",
          "description": "Any receipt or message sent to the customer notifying them of the charge."
        },
        "shippingDocumentationFileId": {
          "type": "string",
          "description": "The file identifier for any shipping documents relevant to the case."
        },
        "uncategorizedFileId": {
          "type": "string",
          "title": "A file id of any documentation that falls outside of an existing evidence category"
        }
      }
    },
    "v1SubscribeValidation": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1SubscribeValidationStatus",
          "description": "description as to why they can or can not subscribe."
        }
      },
      "title": "Used to describe if a parnter can create a subscription for a sku or not"
    },
    "v1SubscribeValidationStatus": {
      "type": "string",
      "enum": [
        "SUBSCRIBE_VALIDATION_STATUS_UNSET",
        "SUBSCRIBE_VALIDATION_STATUS_CANNOT_INSTANT_BILL",
        "SUBSCRIBE_VALIDATION_STATUS_MISSING_MERCHANT_INFO",
        "SUBSCRIBE_VALIDATION_STATUS_MISSING_PAYMENT_INFO",
        "SUBSCRIBE_VALIDATION_STATUS_WILL_CAUSE_FUTURE_CHARGES"
      ],
      "default": "SUBSCRIBE_VALIDATION_STATUS_UNSET",
      "title": "Reason describe why the partner is or is not able to subscribe to the product"
    },
    "v1SubscriptionPreset": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "description": "Optional - only use this id if you've previously called and obtained a subscription_id.\nIf a subscription with this subscription_id already exists, calling this RPC with it will overwrite the existing entity."
        },
        "autoBillable": {
          "type": "boolean",
          "description": "If false, the Subscription will only be used for revenue tracking and will not be billed through our system."
        },
        "salesOrderId": {
          "type": "string",
          "description": "The order_id of the SalesOrder model from the sales-orders Microservice."
        },
        "paymentIntentId": {
          "type": "string",
          "description": "the Stripe PaymentIntent ID that was used to collect payment for the subscription.\nIndicates whether a new subscription has collected payment, allowing us to generate a paid invoice."
        },
        "merchantId": {
          "type": "string",
          "title": "The merchant_id of the Merchant the subscription is for"
        },
        "billingStart": {
          "type": "string",
          "format": "date-time",
          "title": "(Optional) the date at which billing should occur"
        },
        "renewalStart": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired renewal start date. This should be used when the subscription is being created with a specific renewal start date in mind."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "(Optional) The desired expiry date. This should be used when the subscription is being created with a specific end date in mind."
        },
        "invoiceId": {
          "type": "string",
          "title": "The id of the invoice that was generated from the sales order"
        }
      }
    },
    "v1SubscriptionProjectionFilter": {
      "type": "object",
      "properties": {
        "price": {
          "type": "boolean",
          "title": "Controls if product price is returned"
        },
        "includeDeleted": {
          "type": "boolean",
          "title": "Controls if deleted subscriptions are returned"
        }
      },
      "title": "SubscriptionProjectionFilter controls which sets of extended subscription data is returned on subscription responses"
    },
    "v1SubscriptionRelationship": {
      "type": "object",
      "properties": {
        "subscriptionRelationshipId": {
          "type": "string",
          "title": "subscription_relationship_id is a unique id for the Relationship"
        },
        "merchantId": {
          "type": "string",
          "title": "merchant_id is the id of the merchant the relationship pertains to"
        },
        "customerId": {
          "type": "string",
          "title": "customer_id is the id of the customer the relationship pertains to"
        },
        "originId": {
          "type": "string",
          "title": "origin_id is the id of the entity the edge originates from (origin -\u003e target)"
        },
        "originType": {
          "$ref": "#/definitions/v1EntityType",
          "description": "origin_type refers to the type of entity the origin_id belongs to."
        },
        "targetId": {
          "type": "string",
          "title": "target_id is the id of the entity that the edge points to (origin -\u003e target)"
        },
        "targetType": {
          "$ref": "#/definitions/v1EntityType",
          "description": "target_type refers to the type of entity the target_id belongs to."
        },
        "relationshipType": {
          "$ref": "#/definitions/v1RelationshipType",
          "title": "relationship_type refers to the type of relationship between origin and target"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "*\nA common example of a Relationship is between a retail and wholesale subscription, which implies a hierarchy.\nRetail Subscription -\u003e Wholesale Subscription\n                    -\u003e Wholesale Subscriptions"
    },
    "v1TaxRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The unique identifier of the tax rate"
        },
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "countryCode": {
          "type": "string",
          "title": "The two digit iso country code of the tax rate"
        },
        "stateCode": {
          "type": "string",
          "title": "The two digit iso province or state code of the tax rate"
        },
        "name": {
          "type": "string",
          "title": "The tax name eg: GST, PST, HST"
        },
        "description": {
          "type": "string",
          "title": "The description of the tax (Ontario PST)"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "This represents the tax rate percent from 1 to 100"
        },
        "accountingSystemId": {
          "type": "string",
          "title": "(OPTIONAL) A third party identifier"
        },
        "archived": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the tax rate was archived. Unset if not archived."
        }
      },
      "description": "Tax rates can be applied to invoices and subscriptions to collect tax."
    },
    "v1TaxRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The unique identifier of the tax rule"
        },
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rule is for"
        },
        "entityId": {
          "type": "string",
          "title": "The id of the entity the tax rule applies to"
        },
        "entityType": {
          "$ref": "#/definitions/v1TaxRuleEntityType",
          "title": "The type of entity the tax rule applies to (i.e. customer)"
        },
        "entity": {
          "$ref": "#/definitions/TaxRuleTaxRuleEntity",
          "title": "The details of the entity that tax rule applies to"
        },
        "type": {
          "$ref": "#/definitions/v1TaxRuleType",
          "title": "The type of tax rule"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxRate"
          },
          "title": "The identifiers of the tax rates that the tax rule applies to"
        }
      }
    },
    "v1TaxRuleCustomer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the customer"
        },
        "address": {
          "$ref": "#/definitions/v1TaxRuleCustomerCustomerAddress",
          "title": "The address of the customer"
        }
      }
    },
    "v1TaxRuleCustomerCustomerAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The street address of the customer"
        },
        "address2": {
          "type": "string",
          "title": "The second street address of the customer"
        },
        "city": {
          "type": "string",
          "title": "The city of the customer"
        },
        "state": {
          "type": "string",
          "title": "The state of the customer"
        },
        "zip": {
          "type": "string",
          "title": "The zip code of the customer"
        },
        "country": {
          "type": "string",
          "title": "The country of the customer"
        }
      }
    },
    "v1TaxRuleEntityType": {
      "type": "string",
      "enum": [
        "TAX_RULE_ENTITY_TYPE_UNSET",
        "TAX_RULE_ENTITY_TYPE_CUSTOMER",
        "TAX_RULE_ENTITY_TYPE_PRODUCT"
      ],
      "default": "TAX_RULE_ENTITY_TYPE_UNSET"
    },
    "v1TaxRuleProduct": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the product"
        },
        "identifier": {
          "$ref": "#/definitions/TaxRuleProductProductIdentifier",
          "title": "The extra identifying details for the product"
        }
      }
    },
    "v1TaxRuleType": {
      "type": "string",
      "enum": [
        "TAX_RULE_TYPE_UNSET",
        "TAX_RULE_TYPE_EXEMPTION"
      ],
      "default": "TAX_RULE_TYPE_UNSET"
    },
    "v1TickComponentUsageRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "customerId": {
          "type": "string",
          "title": "The id of the customer incurring usage charges"
        },
        "componentId": {
          "type": "string",
          "title": "The id of the metered billing component being incremented"
        },
        "orderId": {
          "type": "string",
          "title": "Unique id for this instance of the sku"
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "Amount to increment the usage"
        },
        "idempotencyKey": {
          "type": "string",
          "title": "Identifies this tick (to allow idempotency)"
        }
      },
      "title": "TickComponentUsage increments the usage of a metered pricing component"
    },
    "v1UnexpireBillableItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The id of the merchant selling the product."
        },
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "customerId": {
          "type": "string",
          "title": "The reference to the owner in the external system"
        },
        "orderId": {
          "type": "string",
          "description": "Unique id for this instance of the sku."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Optional: The subscription id of the billable item.\nThis can be used as an alternative to the combination of the primary key fields\n(merchant_id, sku, customer_id, and order_id) to identify the billable item."
        }
      },
      "title": "Clear a billable item's expiry date"
    },
    "v1UpdateBundleRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The ID of the merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "Identifier of the invoice"
        },
        "bundleId": {
          "type": "string",
          "title": "The ID of the bundle to update"
        },
        "hideBundleItems": {
          "type": "boolean",
          "title": "Whether to hide the items in the bundle or not"
        },
        "bundleInstanceId": {
          "type": "string",
          "title": "The ID of the instance of the bundle to update"
        }
      }
    },
    "v1UpdateBundleResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1UpdateContractRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "mutations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UpdateContractRequestMutation"
          },
          "description": "A list of mutations that will be applied atomically."
        },
        "performedBy": {
          "type": "string",
          "title": "user_id of who initiated this update (optional, will default to the effective user)"
        }
      }
    },
    "v1UpdateContractResponse": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/v1Contract",
          "title": "The updated contract"
        }
      }
    },
    "v1UpdateContractSubscriptionRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of merchant"
        },
        "subscriptionId": {
          "type": "string",
          "title": "The platform subscription ID that the contract is being set to"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The frequency to bill the new subscription at"
        }
      },
      "title": "Update a contract's platform subscription tier"
    },
    "v1UpdateDefaultTaxRatesRequest": {
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "title": "Identifier of the invoice"
        },
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "taxRateIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Identifiers of the tax rates to apply to the invoice"
        }
      }
    },
    "v1UpdateDefaultTaxRatesResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1UpdateDiscountRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of a merchant the discount to delete was for"
        },
        "id": {
          "type": "string",
          "title": "The identifier of the discount. This id is scoped to a specific merchant"
        },
        "discountType": {
          "$ref": "#/definitions/billingv1DiscountType",
          "description": "Discount type eg. fixed_amount, percent_amount, etc."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Discounted dollar amount in cents"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount starts/started"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The date the discount ends/ended"
        },
        "resetEachPeriod": {
          "type": "boolean",
          "title": "Whether or not the discount's usage should reset each period"
        },
        "description": {
          "type": "string",
          "title": "The description so we know what the discount is for"
        },
        "customerId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the customer the discount is applied to"
        },
        "subscriptionId": {
          "type": "string",
          "title": "(OPTIONAL) The identifier of the subscription the discount is applied to"
        },
        "numberOfBillingPeriods": {
          "type": "string",
          "format": "int64",
          "title": "The number of billing periods the discount is applied to regardless of the Discount's `end` date"
        }
      }
    },
    "v1UpdateInvoiceRequest": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "The fields to update (no field mask means update all fields)"
        }
      }
    },
    "v1UpdateInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice"
        }
      }
    },
    "v1UpdateLineItemRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant"
        },
        "invoiceId": {
          "type": "string",
          "title": "Identifier of the invoice"
        },
        "id": {
          "type": "string",
          "title": "The unique identifier of the line item"
        },
        "sku": {
          "type": "string",
          "title": "The identifier of what products/subscription this item refers to. Does not conform to the SKU standard"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount (in cents)"
        },
        "quantity": {
          "type": "number",
          "format": "float",
          "title": "The number of items purchased"
        },
        "description": {
          "type": "string",
          "title": "The name or human readable description of what is being purchased"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tax rates to apply to the invoice line item"
        },
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppliedDiscount"
          },
          "title": "the discounts to apply to this invoice item"
        },
        "servicePeriodStart": {
          "type": "string",
          "format": "date-time",
          "title": "The start of the service period associated with the line item"
        },
        "servicePeriodEnd": {
          "type": "string",
          "format": "date-time",
          "title": "The end of the service period associated with the line item"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "description": "The field mask to apply to the invoice line item. Only fields provided in the field mask will be updated. If a field mask is not present, the operation applies to all fields (as if a field mask of all fields has been specified).\nNested field updates are not supported.\n\nNote: The only updatable fields are those included in the UpdateLineItemRequest message"
        }
      }
    },
    "v1UpdateLineItemResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "$ref": "#/definitions/v1Invoice",
          "title": "The invoice"
        }
      }
    },
    "v1UpdateMerchantRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the merchant"
        },
        "address": {
          "type": "string",
          "title": "The address of the merchant"
        },
        "city": {
          "type": "string",
          "title": "The city of the merchant"
        },
        "state": {
          "type": "string",
          "title": "The state of the merchant"
        },
        "country": {
          "type": "string",
          "title": "The country of the merchant"
        },
        "zipCode": {
          "type": "string",
          "title": "The zip code of the merchant"
        },
        "emailAddress": {
          "type": "string",
          "title": "The email address of the merchant"
        },
        "phoneNumber": {
          "type": "string",
          "title": "The phone number of the merchant"
        },
        "contactName": {
          "type": "string",
          "title": "The contact name for the merchant"
        },
        "companyName": {
          "type": "string",
          "title": "The company name of the merchant"
        },
        "additionalEmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of additional email addresses for the merchant"
        },
        "includeInFinancialRecords": {
          "$ref": "#/definitions/v1UpdateMerchantRequestIncludeInFinancialRecords"
        },
        "hasAlternativePaymentMethod": {
          "type": "boolean",
          "title": "Whether merchant has an alternative payment method on file"
        },
        "merchantType": {
          "$ref": "#/definitions/v1MerchantType",
          "title": "The merchant type"
        }
      },
      "title": "Update a merchant"
    },
    "v1UpdateMerchantRequestIncludeInFinancialRecords": {
      "type": "object",
      "properties": {
        "includeInFinancialRecords": {
          "type": "boolean"
        }
      },
      "title": "Whether to include the merchant within financial records.\nthis bool is wrapped in a message to allow for an \"unset\" null state"
    },
    "v1UpdatePaymentCardRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The unique id of the stripe customer"
        },
        "stripeToken": {
          "type": "string",
          "title": "The token to access stripes API"
        },
        "recaptchaToken": {
          "type": "string",
          "title": "The recaptcha token to verify the request"
        }
      },
      "title": "Update a payment card"
    },
    "v1UpdatePricingPlanProductRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "DEPRECATED: frequency has been moved onto nested PricingPlanProductPricing message.\nThe frequency that the product is billed at"
        },
        "pricing": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PricingPlanProductPricing"
          },
          "title": "The pricing per currency for the product"
        },
        "commitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "The required commitment windows for the product"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "description": "The Field Mask indicate what fields should actually be updated."
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The billing strategy for this product"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "minimum number of units that will be charged each billing period"
        },
        "volumeCommitmentStartsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should begin being applied"
        },
        "volumeCommitmentEndsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should cease being applied"
        }
      }
    },
    "v1UpdatePricingPlanProductResponse": {
      "type": "object",
      "description": "Currently Empty, as the caller already has all the information. Can be expanded in the future."
    },
    "v1UpdatePricingPlanRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "The fields to update (no field mask means update all fields)"
        },
        "name": {
          "type": "string",
          "title": "The new name"
        },
        "defaultBillingStrategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The new default billing strategy"
        }
      }
    },
    "v1UpdatePricingPlanResponse": {
      "type": "object",
      "description": "Currently Empty, as the caller already has all the information. Can be expanded in the future."
    },
    "v1UpdateProductRequest": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit). This Field is not mutable"
        },
        "name": {
          "type": "string",
          "title": "The name of the product"
        },
        "reportingCode": {
          "type": "string",
          "title": "A code used for reporting in sales force"
        },
        "productType": {
          "$ref": "#/definitions/billingv1ProductType",
          "description": "A definition of the type of product."
        },
        "metered": {
          "type": "boolean",
          "title": "Specifies whether or not the item undergoes metered billing"
        }
      }
    },
    "v1UpdateRecurringInvoiceRequest": {
      "type": "object",
      "properties": {
        "recurringInvoice": {
          "$ref": "#/definitions/v1RecurringInvoice",
          "description": "The new state of the recurring invoice.\n\nThis is required."
        },
        "updateMask": {
          "$ref": "#/definitions/v1FieldMask",
          "description": "The update mask to apply to the recurring invoices. Only fields provided in the update mask will be updated. If\nno mask is provided, all fields will be updated.\n\nFor example, to update the status of the recurring invoice the mask may look like this:\n[\"status\"]\n\nNote: nested field updates are not supported."
        }
      },
      "description": "The request to update a recurring invoice."
    },
    "v1UpdateRetailPaymentProviderRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the merchant id for the merchant associated to the payment provider account"
        },
        "statementDescriptor": {
          "type": "string",
          "title": "statement descriptor is the business name for the merchant that appears on a customer statement"
        }
      }
    },
    "v1UpdateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/v1UpdateSubscriptionRequestSubscription"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "description": "The field mask to apply to the subscription. Only fields provided in the field mask will be updated. At least one field is required.\nNested field updates are not supported.\n\nNote: The only updatable fields are those included in the UpdateSubscriptionRequest.Subscription message"
        }
      }
    },
    "v1UpdateSubscriptionRequestSubscription": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "title": "The unique identifier of the subscription. This is used only for identification and is not editable"
        },
        "description": {
          "type": "string",
          "title": "The description of the subscription. This is how the subscription will appear on invoices and is synonymous with a display name"
        },
        "billingCycleAnchor": {
          "type": "string",
          "format": "date-time",
          "description": "Acts as an anchor date for determining when a renewal is recorded or prepared to be charged.\nIt is called an anchor date because it does not reflect the actual date, but is used to compute future dates."
        }
      },
      "title": "The subscription that includes updatable fields"
    },
    "v1UpdateSubscriptionResponse": {
      "type": "object"
    },
    "v1UpdateTaxRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The id of the merchant the tax rate is for"
        },
        "id": {
          "type": "string",
          "title": "The identifier of the tax rate. This id is scoped to a specific merchant"
        },
        "countryCode": {
          "type": "string",
          "title": "The two digit iso country code of the tax rate"
        },
        "stateCode": {
          "type": "string",
          "title": "The two digit iso province or state code of the tax rate"
        },
        "name": {
          "type": "string",
          "title": "The tax name eg: GST, PST, HST"
        },
        "description": {
          "type": "string",
          "title": "The description of the tax (Ontario PST)"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "title": "This represents the tax rate percent from 1 to 100"
        },
        "accountingSystemId": {
          "type": "string",
          "title": "(OPTIONAL) A third party identifier"
        }
      }
    },
    "v1UpsertBundleRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "MerchantID is the merchant scope of the bundle"
        },
        "bundleId": {
          "type": "string",
          "title": "BundleID is the id of the bundle"
        },
        "name": {
          "type": "string",
          "title": "Name is the human-readable, non-unique name for this bundle"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BundleItem"
          },
          "title": "Items is the list of products and their corresponding discounts in a valid bundle"
        },
        "hideBundleDetails": {
          "type": "boolean",
          "title": "Specifies whether the items in the bundle should be shown on invoices"
        }
      }
    },
    "v1UpsertDefaultRetailCustomerConfigurationRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "retailGroupId": {
          "type": "string",
          "title": "the identifier that represents a subset of retail customers"
        },
        "defaultCustomerConfiguration": {
          "$ref": "#/definitions/v1DefaultCustomerConfiguration",
          "title": "the default customer configuration for the merchant/group ID"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "field_mask defines the fields we would apply updates to in default_customer_configuration\nAn empty field_mask would update everything"
        }
      }
    },
    "v1UpsertRetailConfigurationRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "the unique identifier of the merchant"
        },
        "retailGroupId": {
          "type": "string",
          "title": "the identifier that represents a subset of retail customers"
        },
        "currencyCode": {
          "type": "string",
          "title": "the ISO currency code"
        },
        "currencyConversionRate": {
          "type": "string",
          "format": "int64",
          "description": "Used to automatically set a retail price in the store's selected currency, converted from the product's USD MSRP.\nThis is only used when the store currency is not one of USD, CAD, or AUD. If the conversion rate is set to 0, no conversions will be done."
        }
      }
    },
    "v1UpsertRetailCustomerConfigurationRequest": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "invoiceDay": {
          "type": "string",
          "format": "int64",
          "title": "The day of the month in which renewal draft invoices will be issued"
        },
        "autoPost": {
          "type": "boolean",
          "title": "Indicates whether invoices will be automatically posted for the customer"
        },
        "netD": {
          "type": "string",
          "format": "int64",
          "title": "The number of days the customer is expected to pay from the time of invoice creation"
        },
        "autoGenerate": {
          "type": "boolean",
          "title": "Indicates whether invoices will be automatically generated for renewing subscriptions"
        },
        "contactId": {
          "type": "string",
          "title": "The default contact for the customer"
        },
        "collectionMethod": {
          "type": "string",
          "title": "Indicates how we will attempt to collect for invoices on this customer"
        },
        "useTemplateInvoice": {
          "type": "boolean",
          "title": "Indicates whether invoice will be generated using the customers template invoice"
        },
        "memo": {
          "type": "string",
          "title": "The memo to be added to the invoice"
        },
        "additionalContactIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The additional contacts for the customer"
        },
        "autoGenerateRetailSubscriptions": {
          "type": "boolean",
          "title": "Indicates whether retail subscriptions should be automatically generated for the customer"
        },
        "paymentMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PaymentMethodType"
          },
          "title": "payment_method_types define how a Customer can pay for the generated Invoices (defaults to card)"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "The fields to update (no field mask means update all fields)"
        }
      }
    },
    "v1UpsertRetailPricingRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "The unique identifier of the merchant to configure the pricing for."
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "The frequency that the product is billed at"
        },
        "pricing": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PricingPlanProductPricing"
          },
          "title": "The pricing per currency for the product"
        },
        "groupId": {
          "type": "string",
          "description": "group_id represents pricing for a subset of retail customers that the merchant is selling to."
        },
        "customerId": {
          "type": "string",
          "description": "The customer ID to resolve pricing for\nDeprecated: Customer-level pricing is no longer supported. A customer's pricing for subscriptions is determined by the corresponding subscription_id."
        },
        "subscriptionId": {
          "type": "string",
          "title": "The subscription ID to resolve pricing for"
        }
      }
    },
    "v1UpsertWholesalePricingRequest": {
      "type": "object",
      "properties": {
        "pricingPlanId": {
          "type": "string",
          "title": "The unique identifier of the pricing plan"
        },
        "sku": {
          "type": "string",
          "title": "The unique identifier of product (Stock Keeping Unit)"
        },
        "pricing": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PricingPlanProductPricing"
          },
          "title": "The pricing for the product"
        },
        "termCommitment": {
          "$ref": "#/definitions/v1Commitment",
          "title": "The required commitment windows for the product"
        },
        "strategy": {
          "$ref": "#/definitions/billingv1BillingStrategy",
          "title": "The billing strategy for this product"
        },
        "volumeCommitment": {
          "type": "string",
          "format": "int64",
          "title": "minimum number of units that will be charged each billing period"
        },
        "volumeCommitmentStartsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should begin being applied"
        },
        "volumeCommitmentEndsAt": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the volume commitment should cease being applied"
        }
      }
    },
    "v1ValidateResponse": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "code": {
          "$ref": "#/definitions/v1SubscribeValidation"
        }
      }
    },
    "v1VoidInvoiceRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "The merchant the invoice is for"
        },
        "invoiceId": {
          "type": "string",
          "title": "The invoice id"
        },
        "reason": {
          "type": "string",
          "title": "An optional reason for this update"
        }
      }
    },
    "v1VoidPurchaseRequest": {
      "type": "object",
      "properties": {
        "purchaseId": {
          "type": "string",
          "title": "The identifier for the purchase to be voided"
        },
        "merchantId": {
          "type": "string",
          "title": "The identifier of the merchant the purchase is for"
        },
        "day": {
          "type": "string",
          "title": "The day (20060102) of the purchase"
        }
      }
    },
    "v1WholesaleCostItemRequest": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Unique id representing a product (Stock Keeping Unit)."
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "The quantity of upcoming purchases"
        },
        "frequency": {
          "$ref": "#/definitions/v1Frequency",
          "title": "Optional: if the frequency is not passed, the default frequency pricing is used to determine purchase cost"
        }
      }
    },
    "vendastatypesDateRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}
