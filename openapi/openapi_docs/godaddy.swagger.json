{
  "swagger": "2.0",
  "info": {
    "title": "godaddy/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GoDaddy"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/godaddy.v1.GoDaddy/DeleteDNSRecord": {
      "post": {
        "summary": "Delete a DNS record for a domain",
        "operationId": "GoDaddy_DeleteDNSRecord",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteDNSRecordRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/GetDomain": {
      "post": {
        "summary": "GetDomain returns the domain object",
        "operationId": "GoDaddy_GetDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetDomainRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/GetDomainAgreements": {
      "post": {
        "summary": "Gets the legal agreements that must be accepted before purchase",
        "operationId": "GoDaddy_GetDomainAgreements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDomainAgreementsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetDomainAgreementsRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/GetDomainAvailable": {
      "post": {
        "summary": "Checks if a domain is available",
        "operationId": "GoDaddy_GetDomainAvailable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDomainAvailableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetDomainAvailableRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/GetDomainSuggestionAndPrice": {
      "post": {
        "summary": "Gets domain suggestions and prices for a requested domain",
        "operationId": "GoDaddy_GetDomainSuggestionAndPrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDomainSuggestionAndPriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetDomainSuggestionAndPriceRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/ListDNSRecords": {
      "post": {
        "summary": "Lists DNS records for a domain",
        "operationId": "GoDaddy_ListDNSRecords",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDNSRecordsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDNSRecordsRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/ListDomainsByBusinessID": {
      "post": {
        "summary": "Get domains that have been purchased by a business",
        "operationId": "GoDaddy_ListDomainsByBusinessID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDomainsByBusinessIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDomainsByBusinessIDRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/PatchDomain": {
      "post": {
        "summary": "PatchDomain updates an existing domain based off of fields on the request",
        "operationId": "GoDaddy_PatchDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PatchDomainRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/PutDNSRecord": {
      "post": {
        "summary": "Puts a DNS record for a domain",
        "operationId": "GoDaddy_PutDNSRecord",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PutDNSRecordRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/RenewDomain": {
      "post": {
        "summary": "RenewDomain renews the domain with GoDaddy.",
        "operationId": "GoDaddy_RenewDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RenewDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request for renewing a domain.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RenewDomainRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/ReplaceAllDNSRecords": {
      "post": {
        "summary": "Replace all DNS Records for the specified Domain",
        "operationId": "GoDaddy_ReplaceAllDNSRecords",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceAllDNSRecordsRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/ReplaceDNSRecordsForType": {
      "post": {
        "summary": "Replace all DNS records of the specified type for the specified domain",
        "operationId": "GoDaddy_ReplaceDNSRecordsForType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceDNSRecordsForTypeRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    },
    "/godaddy.v1.GoDaddy/ValidateDomainContact": {
      "post": {
        "summary": "Validates a set of contacts for a domain",
        "operationId": "GoDaddy_ValidateDomainContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateDomainContactResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ValidateDomainContactRequest"
            }
          }
        ],
        "tags": [
          "GoDaddy"
        ]
      }
    }
  },
  "definitions": {
    "DomainContactAdmin": {
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/v1DomainAddressMailing"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "nameMiddle": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "DomainContactBilling": {
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/v1DomainAddressMailing"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "nameMiddle": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "DomainContactRegistrant": {
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/v1DomainAddressMailing"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "nameMiddle": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "DomainContactTech": {
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/v1DomainAddressMailing"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "nameFirst": {
          "type": "string"
        },
        "nameLast": {
          "type": "string"
        },
        "nameMiddle": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "DomainDomainName": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "DomainRealName": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "DomainVerifications": {
      "type": "object",
      "properties": {
        "domainName": {
          "$ref": "#/definitions/DomainDomainName"
        },
        "realName": {
          "$ref": "#/definitions/DomainRealName"
        }
      }
    },
    "GetDomainAgreementsResponseAgreement": {
      "type": "object",
      "properties": {
        "agreementKey": {
          "type": "string",
          "title": "The key which identifies the agreement when purchase happens"
        },
        "content": {
          "type": "string",
          "title": "The HTML content of the agreement"
        },
        "title": {
          "type": "string",
          "title": "The title of the agreement"
        },
        "url": {
          "type": "string",
          "title": "A link to the agreement"
        }
      },
      "title": "An agreement for a TLD which must be accepts before purchase"
    },
    "GetDomainSuggestionAndPriceResponseSuggestion": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "A domain, ex google.com"
        },
        "price": {
          "type": "string",
          "format": "int64",
          "title": "The price of the domain"
        }
      },
      "title": "Suggestion is an available domain and the price for that domain"
    },
    "ValidateDomainContactResponseField": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "The description of the problem, ex. \"Your phone number cannot contain more than 10 digits after the country code (CA)\""
        },
        "path": {
          "type": "string",
          "title": "The path to the part of the body this message relates to, ex. \"body.contactAdmin.phone\""
        }
      },
      "title": "Field is a field that failed validation by GoDaddy with information about that failure"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Contact": {
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/v1ContactAddressMailing",
          "title": "Mailing address for a contact"
        },
        "email": {
          "type": "string",
          "title": "The email for a contact"
        },
        "fax": {
          "type": "string",
          "title": "The fax number for a contact, ex. 3069555512"
        },
        "jobTitle": {
          "type": "string",
          "title": "The title of the contact"
        },
        "nameFirst": {
          "type": "string",
          "title": "Their first name"
        },
        "nameLast": {
          "type": "string",
          "title": "Their last name"
        },
        "nameMiddle": {
          "type": "string",
          "title": "Their middle name"
        },
        "organization": {
          "type": "string",
          "title": "The organization they work for"
        },
        "phone": {
          "type": "string",
          "title": "Their phone number"
        }
      },
      "title": "A set of details for a person, for more information on contacts:\nhttps://ca.godaddy.com/help/change-domain-contact-information-418"
    },
    "v1ContactAddressMailing": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "title": "The first address line, ex. 220 3 Ave S"
        },
        "address2": {
          "type": "string",
          "title": "The second address line, ex. Suite 405"
        },
        "city": {
          "type": "string",
          "title": "The city of the address"
        },
        "country": {
          "type": "string",
          "title": "The country of the address"
        },
        "postalCode": {
          "type": "string",
          "title": "The postal code of the address"
        },
        "state": {
          "type": "string",
          "title": "The state of the address"
        }
      },
      "title": "Physical mailing address for a contact"
    },
    "v1DNSRecord": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "The type of a DNS record, ex. TXT"
        },
        "name": {
          "type": "string",
          "title": "A given name for a DNS record, ex. @ or www"
        },
        "data": {
          "type": "string",
          "title": "The information stored in the DNS record (ex. MS=262B3C0BB63077947E38D7B3AB081D70F4C87055)"
        },
        "ttl": {
          "type": "string",
          "format": "int64",
          "title": "The Time To Live for a DNS record"
        },
        "priority": {
          "type": "string",
          "format": "int64",
          "title": "The priority of for the record wrt other records, for example used on MX records"
        }
      },
      "title": "A Domain Name System record"
    },
    "v1DNSRecordType": {
      "type": "string",
      "enum": [
        "DNS_RECORD_TYPE_ALL",
        "DNS_RECORD_TYPE_A",
        "DNS_RECORD_TYPE_AAAA",
        "DNS_RECORD_TYPE_CNAME",
        "DNS_RECORD_TYPE_MX",
        "DNS_RECORD_TYPE_NS",
        "DNS_RECORD_TYPE_SOA",
        "DNS_RECORD_TYPE_SRV",
        "DNS_RECORD_TYPE_TXT"
      ],
      "default": "DNS_RECORD_TYPE_ALL",
      "title": "Available dns record types to filter for"
    },
    "v1DeleteDNSRecordRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "A domain, ex google.com"
        },
        "type": {
          "type": "string",
          "title": "The type of a DNS record, ex. TXT"
        },
        "name": {
          "type": "string",
          "title": "A given name for a DNS record, ex. @ or www"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID - deprecated"
        }
      },
      "title": "Request for deleting a DNS record"
    },
    "v1Domain": {
      "type": "object",
      "properties": {
        "authCode": {
          "type": "string"
        },
        "contactAdmin": {
          "$ref": "#/definitions/DomainContactAdmin"
        },
        "contactBilling": {
          "$ref": "#/definitions/DomainContactBilling"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/DomainContactRegistrant"
        },
        "contactTech": {
          "$ref": "#/definitions/DomainContactTech"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "transferAwayEligibleAt": {
          "type": "string",
          "format": "date-time"
        },
        "domain": {
          "type": "string"
        },
        "domainId": {
          "type": "string",
          "format": "int64"
        },
        "expirationProtected": {
          "type": "boolean"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "exposeWhois": {
          "type": "boolean"
        },
        "holdRegistrar": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "nameServers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "privacy": {
          "type": "boolean"
        },
        "renewAuto": {
          "type": "boolean"
        },
        "renewDeadline": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "subaccountId": {
          "type": "string"
        },
        "transferProtected": {
          "type": "boolean"
        },
        "verifications": {
          "$ref": "#/definitions/DomainVerifications"
        }
      },
      "title": "Domain represents the domain details we get from GoDaddy\nhttps://developer.godaddy.com/doc/endpoint/domains#/v1/get"
    },
    "v1DomainAddressMailing": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1GetDomainAgreementsRequest": {
      "type": "object",
      "properties": {
        "tlds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The TLDs which you are interested in agreements for, ex. com, ca"
        },
        "privacy": {
          "type": "boolean",
          "title": "Whether or not privacy has been requested"
        }
      },
      "title": "Request for getting a domain agreement"
    },
    "v1GetDomainAgreementsResponse": {
      "type": "object",
      "properties": {
        "agreements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetDomainAgreementsResponseAgreement"
          },
          "title": "A list of agreements for a set of TLDs"
        }
      },
      "title": "Returns the agreement and key to accept the agreement for the TLD"
    },
    "v1GetDomainAvailableRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "The domain to check for"
        }
      },
      "title": "Request for getting if a domain is available"
    },
    "v1GetDomainAvailableResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        }
      },
      "title": "Returns if the domain is available"
    },
    "v1GetDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "The domain information is being requested for"
        }
      },
      "title": "Request for getting domain information"
    },
    "v1GetDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/v1Domain",
          "title": "The domain details"
        }
      },
      "title": "The domain information response"
    },
    "v1GetDomainSuggestionAndPriceRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "Domain to search for"
        },
        "tlds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Top level domains to be included"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "title": "Maximum number of suggestions to return"
        }
      },
      "title": "Request for getting a domain suggestion and price"
    },
    "v1GetDomainSuggestionAndPriceResponse": {
      "type": "object",
      "properties": {
        "suggestions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetDomainSuggestionAndPriceResponseSuggestion"
          },
          "title": "List of suggestions"
        }
      },
      "title": "Returns domain suggestions and prices"
    },
    "v1ListDNSRecordsRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "Domain"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID - deprecated"
        },
        "type": {
          "$ref": "#/definitions/v1DNSRecordType",
          "description": "Type of DNS record to filter for. Default is All."
        }
      },
      "title": "Request for listing DNS records"
    },
    "v1ListDNSRecordsResponse": {
      "type": "object",
      "properties": {
        "dnsRecords": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DNSRecord"
          },
          "title": "A list of DNS records for a given domain"
        }
      },
      "title": "ListDNSRecordsResponse returns a list of DNSRecords for a given domain"
    },
    "v1ListDomainsByBusinessIDRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Business Id of the business"
        }
      },
      "title": "Request for listing domains by the business ID"
    },
    "v1ListDomainsByBusinessIDResponse": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The domains purchased by the business"
        }
      },
      "title": "The domains that have been purchased by a business"
    },
    "v1PatchDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "The domain being patched"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "Controls which fields come back on the response"
        },
        "locked": {
          "type": "boolean",
          "title": "Sets the domain to be locked or not; cannot be updated within 60 days of purchasing the domain"
        }
      },
      "title": "Request for patching a domain"
    },
    "v1PutDNSRecordRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "A domain, ex google.com"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID - deprecated"
        },
        "dnsRecord": {
          "$ref": "#/definitions/v1DNSRecord",
          "title": "The DNSRecord being put"
        }
      },
      "title": "Request for putting DNS records"
    },
    "v1RenewDomainRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "The domain to be renewed."
        }
      },
      "description": "The request for renewing a domain."
    },
    "v1RenewDomainResponse": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "itemCount": {
          "type": "string",
          "format": "int64"
        },
        "orderId": {
          "type": "string",
          "format": "int64"
        },
        "total": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "The response for renewing a domain. These properties are from the GoDaddy API response, see https://developer.godaddy.com/doc/endpoint/domains#/v1/renew."
    },
    "v1ReplaceAllDNSRecordsRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "A domain, ex google.com"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID - deprecated"
        },
        "dnsRecords": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DNSRecord"
          },
          "title": "The DNSRecords being put"
        }
      },
      "title": "Request for replacing all DNS records on a domain"
    },
    "v1ReplaceDNSRecordsForTypeRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "A domain, ex google.com"
        },
        "type": {
          "type": "string",
          "title": "The type of a DNS record, ex. TXT"
        },
        "dnsRecords": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DNSRecord"
          },
          "title": "The DNSRecords being put"
        }
      },
      "title": "Request for replacing DNS records for a specific type of record"
    },
    "v1ValidateDomainContactRequest": {
      "type": "object",
      "properties": {
        "contactAdmin": {
          "$ref": "#/definitions/v1Contact",
          "title": "The administrator information used for transferring domains between registrars"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/v1Contact",
          "title": "The contact information for the owner of the domain"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of domains these contacts are being verified against, can be formatted as vendasta.com or just com"
        }
      },
      "title": "Request for validating a domain contact"
    },
    "v1ValidateDomainContactResponse": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ValidateDomainContactResponseField"
          },
          "title": "A list of validation errors returned from GoDaddy"
        }
      },
      "title": "Returns a list of validation problems, if any"
    }
  }
}
