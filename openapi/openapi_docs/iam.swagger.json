{
  "swagger": "2.0",
  "info": {
    "title": "iam/attributes/attributes.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "IAM"
    },
    {
      "name": "UserIAM"
    },
    {
      "name": "IAMAdmin"
    },
    {
      "name": "IAMSSO"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/iam.v1.IAM/AccessResource": {
      "post": {
        "summary": "Asks IAM whether a certain subject has access to a certain resource",
        "operationId": "IAM_AccessResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1AccessResourceRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/AddKey": {
      "post": {
        "summary": "Add a public/private key pair to a subject. The private key is returned on the response, but is not stored in IAM.",
        "operationId": "IAM_AddKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddKeyRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/AddMultiUserRestriction": {
      "post": {
        "summary": "AddMultiUserRestriction adds the specific restriction to the specified users",
        "operationId": "IAM_AddMultiUserRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1AddMultiUserRestrictionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/AuthenticateSubject": {
      "post": {
        "summary": "Authenticate subject takes a context, email and password and validates the password is correct. No response\nis returned but an OK status indicates a successful authentication, while an Unauthenticated response will\nbe returned on a missing subject/persona, the persona is locked, or the password is not correct.",
        "description": "Multiple authentication attempts with the incorrect password will lock the persona for a short time period.\nThis is to prevent a brute-force attempt at authenticating a user.",
        "operationId": "IAM_AuthenticateSubject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthenticateSubjectRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/ChangeSubjectEmail": {
      "post": {
        "summary": "Will change the email of a given subject persona.",
        "operationId": "IAM_ChangeSubjectEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeSubjectEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/CreateExternalID": {
      "post": {
        "summary": "Create the external ID of a user for a given external id type",
        "operationId": "IAM_CreateExternalID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1CreateExternalIDRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/CreateSession": {
      "post": {
        "summary": "Create session subject takes in credentials for a subject, whether it be an email and password or Google id token.\nA response with a session is returned if authentication is successful, while an Unauthenticated response will\nbe returned on a missing subject/persona, the persona is locked, or the password is not correct.",
        "description": "Multiple authentication attempts with the incorrect password will lock the persona for a short time period.\nThis is to prevent a brute-force attempt at authenticating a user.",
        "operationId": "IAM_CreateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv1CreateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1CreateSessionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/CreateTemporarySubject": {
      "post": {
        "summary": "Create Custom Session will create a session that contains the attributes for a subject.\nin most cases a standard IAM session should be used.",
        "operationId": "IAM_CreateTemporarySubject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTemporarySubjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTemporarySubjectRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/DeleteSubject": {
      "post": {
        "summary": "Will delete the persona from a given subject.",
        "operationId": "IAM_DeleteSubject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteSubjectRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/DeleteUser": {
      "post": {
        "summary": "DeleteUser deletes a user",
        "operationId": "IAM_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1DeleteUserRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetMultiExternalID": {
      "post": {
        "summary": "Get the external ID of a user for a given external id type",
        "operationId": "IAM_GetMultiExternalID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv1GetMultiExternalIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1GetMultiExternalIDRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetMultiUsers": {
      "post": {
        "summary": "GetMultiUsers returns the users specified by either their user ID or their unique namespace/email",
        "operationId": "IAM_GetMultiUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv1GetMultiUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1GetMultiUsersRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetResetPasswordToken": {
      "post": {
        "summary": "Get a one-time-use, time-sensitive JWT that allows a caller to reset a password",
        "operationId": "IAM_GetResetPasswordToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1GetResetPasswordTokenRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetSessionToken": {
      "post": {
        "summary": "deprecated: Use GetSessionToken in UserIAM\nAsks IAM to exchange the caller-provided token for a IAM session token.",
        "operationId": "IAM_GetSessionToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSessionTokenRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetShortLivedToken": {
      "post": {
        "summary": "Deprecated: Use UserIAM.GetImpersonationToken or allow the desired workflow without impersonation\nAsks IAM for a short lived token for a specific user.\nThis is a temporary endpoint until we back VBC, Marketplace, and SSC sessions by IAM.",
        "operationId": "IAM_GetShortLivedToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetShortLivedTokenRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetSubjectContext": {
      "post": {
        "summary": "Given a subject ID, will return the context that is associated to this persona.\nSpecifically, this is useful for getting the partner id from a user ID, if the user is in a type/namespace\ncontext.",
        "operationId": "IAM_GetSubjectContext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSubjectContextResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSubjectContextRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetSubjects": {
      "post": {
        "summary": "Returns a list of subject personas by their subject IDs. The request is scoped to a specific context.",
        "operationId": "IAM_GetSubjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSubjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSubjectsRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/GetSubjectsByEmail": {
      "post": {
        "summary": "Returns a list of subject personas by their emails. The request is scoped to a specific context.",
        "operationId": "IAM_GetSubjectsByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSubjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSubjectsByEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/ListPersonas": {
      "post": {
        "summary": "List Personas will return a paged set of results of all the available personas across all contexts for a specific user.",
        "operationId": "IAM_ListPersonas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPersonasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IAMListPersonasRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/ListPersonasByEmail": {
      "post": {
        "summary": "List Personas by email will return a paged set of results of all the available personas across all contexts for a specific email.\nDEPRECATED: use ListPersonas",
        "operationId": "IAM_ListPersonasByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPersonasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPersonasByEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/ListSecurityLogs": {
      "post": {
        "summary": "ListSecurityLogs returns a list of security logs for a user",
        "operationId": "IAM_ListSecurityLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv1ListSecurityLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1ListSecurityLogsRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/ListUsers": {
      "post": {
        "summary": "ListUsers returns will return a paged set of results. There is an option to get all.\nFor example, listing the users with an email and/or in a namespace",
        "operationId": "IAM_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1ListUsersRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/MutateAttributes": {
      "post": {
        "summary": "Will update/set/delete a subject personas attributes by its subject ID. Will return a not found error if the\nsubject persona doesn't exist.",
        "operationId": "IAM_MutateAttributes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MutateAttributesRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RegisterPolicy": {
      "post": {
        "summary": "Registers a policy associated with a resource with IAM that is evaluated whenever a subject requests access to that type of resource.",
        "operationId": "IAM_RegisterPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterPolicyRequest registers a policy with a resource in IAM.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1RegisterPolicyRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RegisterResource": {
      "post": {
        "summary": "Registers a specific resource with IAM. This allows IAM to ask the resource owner about its resources.",
        "operationId": "IAM_RegisterResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterResourceRequest is issued by a ResourceOwner to tell IAM that they would like to expose a resource that IAM will control access to.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1RegisterResourceRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RegisterResourceOwner": {
      "post": {
        "summary": "Registers a resource owner with IAM. This sets an application up for integration with IAM access control system.",
        "operationId": "IAM_RegisterResourceOwner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterResourceOwnerRequest is issued by a prospective ResourceOwner to tell IAM they intend to expose resources that IAM will control access to.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1RegisterResourceOwnerRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RegisterSubject": {
      "post": {
        "summary": "Registers a subject with IAM, if the supplied context is already used, an already exists error will be returned.",
        "operationId": "IAM_RegisterSubject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterSubjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterSubjectRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RemoveKey": {
      "post": {
        "summary": "Remove a public key pair from a subject. Tokens signed by the corresponding private key will no longer be valid.",
        "operationId": "IAM_RemoveKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveKeyRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/RemoveMultiUserRestriction": {
      "post": {
        "summary": "RemoveMultiUserRestriction removes the specific restriction from the specified users",
        "operationId": "IAM_RemoveMultiUserRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1RemoveMultiUserRestrictionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/SearchSubject": {
      "post": {
        "summary": "Will search across a specified context. Cross context searching is not supported.",
        "operationId": "IAM_SearchSubject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchSubjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SearchSubjectRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/SendEmailVerification": {
      "post": {
        "summary": "Send an email with a token on it to a user to verify their email",
        "operationId": "IAM_SendEmailVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1SendEmailVerificationRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/UpdateUser": {
      "post": {
        "summary": "UpdateUser updates fields on the User",
        "operationId": "IAM_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.IAM/VerifyEmail": {
      "post": {
        "summary": "Verify a user's email address",
        "operationId": "IAM_VerifyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv1VerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v1.UserIAM/GetImpersonationToken": {
      "post": {
        "summary": "GetImpersonationToken produces a new token from the direct caller token for the requested impersonation if allowed",
        "operationId": "UserIAM_GetImpersonationToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetImpersonationTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetImpersonationTokenRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v1.UserIAM/GetSessionToken": {
      "post": {
        "summary": "Asks IAM to exchange the caller-provided token for a IAM session token.",
        "operationId": "UserIAM_GetSessionToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSessionTokenRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v1.UserIAM/GetSubjectBySession": {
      "post": {
        "summary": "Gets the subject from the given session",
        "operationId": "UserIAM_GetSubjectBySession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSubjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSubjectBySessionRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v1.UserIAM/GetToken": {
      "post": {
        "summary": "Returns a short lived token that can be used to issue requests to other vendasta APIs.",
        "operationId": "UserIAM_GetToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetTokenRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v1.UserIAM/ListPersonas": {
      "post": {
        "summary": "List Personas given a session id will return a paged set of results of all the available personas across all contexts for a specific Subject.",
        "operationId": "UserIAM_ListPersonas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPersonasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPersonasRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v1.UserIAM/ResetPasswordWithToken": {
      "post": {
        "summary": "Reset a password using the one-time-use, time-sensitive JWT obtained via IAM.GetResetPasswordToken",
        "operationId": "UserIAM_ResetPasswordWithToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordWithTokenRequest"
            }
          }
        ],
        "tags": [
          "UserIAM"
        ]
      }
    },
    "/iam.v2.IAM/AccessResource": {
      "post": {
        "summary": "Access RPCs",
        "operationId": "IAM_AccessResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2AccessResourceRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/AddClientKey": {
      "post": {
        "operationId": "IAM_AddClientKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2AddClientKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2AddClientKeyRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/AddMultiUserRestriction": {
      "post": {
        "summary": "Restrict users",
        "operationId": "IAM_AddMultiUserRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2AddMultiUserRestrictionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ArchiveUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_ArchiveUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ArchiveAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ChangePassword": {
      "post": {
        "summary": "Use your current password to change your password",
        "operationId": "IAM_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/CreateExternalID": {
      "post": {
        "summary": "Create External ID Mappings for users",
        "operationId": "IAM_CreateExternalID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2CreateExternalIDRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/CreateUserAuxiliaryDataFieldSchema": {
      "post": {
        "summary": "UserAuxiliaryFieldSchema service rpcs",
        "operationId": "IAM_CreateUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/DeleteUser": {
      "post": {
        "operationId": "IAM_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2DeleteUserRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ExchangeClientKeyAssertion": {
      "post": {
        "summary": "Credential exchange RPCs\nExchanges a claim signed using a client private key for an IAM user token.",
        "operationId": "IAM_ExchangeClientKeyAssertion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ExchangeClientKeyAssertionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ExchangeClientKeyAssertionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/GetMultiExternalID": {
      "post": {
        "summary": "Get External ID mappings for users",
        "operationId": "IAM_GetMultiExternalID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv2GetMultiExternalIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2GetMultiExternalIDRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/GetMultiUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_GetMultiUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiAuxiliaryDataFieldSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/GetMultiUsers": {
      "post": {
        "summary": "User RPCs",
        "operationId": "IAM_GetMultiUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv2GetMultiUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2GetMultiUsersRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/GetUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_GetUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuxiliaryDataFieldSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ListSecurityLogs": {
      "post": {
        "operationId": "IAM_ListSecurityLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv2ListSecurityLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2ListSecurityLogsRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ListUserAuxiliaryData": {
      "post": {
        "summary": "ListUserAuxiliaryData auxiliary_data_object_id in the AuxiliaryDataObjectID refers to the user_id",
        "operationId": "IAM_ListUserAuxiliaryData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAuxiliaryDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAuxiliaryDataRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ListUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_ListUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAuxiliaryDataFieldSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ListUsers": {
      "post": {
        "operationId": "IAM_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv2ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2ListUsersRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/RemoveClientKey": {
      "post": {
        "operationId": "IAM_RemoveClientKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RemoveClientKeyRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/RemoveMultiUserRestriction": {
      "post": {
        "summary": "Unrestrict users",
        "operationId": "IAM_RemoveMultiUserRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2RemoveMultiUserRestrictionRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/RequestShortOTPCode": {
      "post": {
        "summary": "One time password",
        "operationId": "IAM_RequestShortOTPCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2RequestShortOTPCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RequestShortOTPCodeRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/ResetPassword": {
      "post": {
        "operationId": "IAM_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/SendEmailVerification": {
      "post": {
        "summary": "Send an email verification Email to the user",
        "operationId": "IAM_SendEmailVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2SendEmailVerificationRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/SendOneTimePasswordEmail": {
      "post": {
        "summary": "Send an email for the given template and template data",
        "operationId": "IAM_SendOneTimePasswordEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2SendOneTimePasswordEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/UnarchiveUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_UnarchiveUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UnarchiveAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/UpdateUser": {
      "post": {
        "operationId": "IAM_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/UpdateUserAuxiliaryDataFieldSchema": {
      "post": {
        "operationId": "IAM_UpdateUserAuxiliaryDataFieldSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAuxiliaryDataFieldSchemaRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/UpsertExternalID": {
      "post": {
        "summary": "Update or insert user's external identifier",
        "operationId": "IAM_UpsertExternalID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpsertExternalIDRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/UpsertUserAuxiliaryData": {
      "post": {
        "summary": "UpsertUserAuxiliaryData auxiliary_data_object_id in the AuxiliaryDataObjectID refers to the user_id",
        "operationId": "IAM_UpsertUserAuxiliaryData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertAuxiliaryDataRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAM/VerifyEmail": {
      "post": {
        "summary": "Given a token, marks a user's email as verified.",
        "operationId": "IAM_VerifyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2VerifyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2VerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/iam.v2.IAMAdmin/AccessResourceWithExplanation": {
      "post": {
        "summary": "Determines if a resource can be accessed \u0026 returns explanation in event of access being denied.",
        "operationId": "IAMAdmin_AccessResourceWithExplanation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2AccessResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2AccessResourceRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/AddUserRole": {
      "post": {
        "summary": "Add a user role with attributes, failing if the role already exists on the user.",
        "operationId": "IAMAdmin_AddUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2AddUserRoleRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/CreateSession": {
      "post": {
        "summary": "Backend Session Creation",
        "operationId": "IAMAdmin_CreateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/iamv2CreateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2CreateSessionRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/CreateUser": {
      "post": {
        "summary": "User Management",
        "operationId": "IAMAdmin_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateUserRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/DeletePolicy": {
      "post": {
        "operationId": "IAMAdmin_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeletePolicyRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/DeleteResourceAndPolicies": {
      "post": {
        "summary": "Delete resource and all the policies associated with the given app ID and resource ID",
        "operationId": "IAMAdmin_DeleteResourceAndPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeleteResourceAndPoliciesRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/GetResetPasswordToken": {
      "post": {
        "operationId": "IAMAdmin_GetResetPasswordToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetResetPasswordTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2GetResetPasswordTokenRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/ListResources": {
      "post": {
        "operationId": "IAMAdmin_ListResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListResourcesRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/ListUserRolesMetadata": {
      "post": {
        "summary": "List all role types",
        "operationId": "IAMAdmin_ListUserRolesMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListUserRolesMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListUserRolesMetadataRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/RegisterPolicy": {
      "post": {
        "summary": "Policy Admin",
        "operationId": "IAMAdmin_RegisterPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2RegisterPolicyRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/RegisterResource": {
      "post": {
        "operationId": "IAMAdmin_RegisterResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2RegisterResourceRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/RegisterResourceOwner": {
      "post": {
        "summary": "Resource Admin",
        "operationId": "IAMAdmin_RegisterResourceOwner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iamv2RegisterResourceOwnerRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/RegisterUserRoleMetadata": {
      "post": {
        "summary": "Role Management\nRegisterUserRoleMetadata creates a new role \"type\"",
        "operationId": "IAMAdmin_RegisterUserRoleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RegisterUserRoleMetadataRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/RemoveUserRole": {
      "post": {
        "summary": "Remove a user role.",
        "operationId": "IAMAdmin_RemoveUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RemoveUserRoleRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/ReplaceResource": {
      "post": {
        "operationId": "IAMAdmin_ReplaceResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ReplaceResourceRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/SearchUsers": {
      "post": {
        "operationId": "IAMAdmin_SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SearchUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2SearchUsersRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/UpdateUserRole": {
      "post": {
        "summary": "Update the attributes of an existing user role, failing if the role doesn't exist on the user.",
        "operationId": "IAMAdmin_UpdateUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateUserRoleRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMAdmin/UpsertPartnerLimits": {
      "post": {
        "summary": "Partner Limits",
        "operationId": "IAMAdmin_UpsertPartnerLimits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpsertPartnerLimitsRequest"
            }
          }
        ],
        "tags": [
          "IAMAdmin"
        ]
      }
    },
    "/iam.v2.IAMSSO/GetTokenForUser": {
      "post": {
        "summary": "Get a token for the specified user.",
        "operationId": "IAMSSO_GetTokenForUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetTokenForUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetTokenForUserRequest"
            }
          }
        ],
        "tags": [
          "IAMSSO"
        ]
      }
    }
  },
  "definitions": {
    "GetMultiUsersResponseUserContainer": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/iamv1User"
        }
      }
    },
    "UpdateUserRequestPhoneNumbers": {
      "type": "object",
      "properties": {
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2PhoneNumber"
          }
        }
      }
    },
    "attributesAttribute": {
      "type": "object",
      "properties": {
        "intAttribute": {
          "type": "string",
          "format": "int64",
          "description": "Represents a int64 attribute."
        },
        "doubleAttribute": {
          "type": "number",
          "format": "double",
          "description": "Represents a double attribute."
        },
        "stringAttribute": {
          "type": "string",
          "description": "Represents a string attribute."
        },
        "boolAttribute": {
          "type": "boolean",
          "description": "Represents a boolean attribute."
        },
        "structAttribute": {
          "$ref": "#/definitions/attributesStructAttribute",
          "description": "Represents a structured `Attribute`."
        },
        "listAttribute": {
          "$ref": "#/definitions/attributesListAttribute",
          "description": "Represents a repeated `Attribute`."
        },
        "timestampAttribute": {
          "type": "string",
          "format": "date-time",
          "description": "Represents a timestamp attribute."
        },
        "geopointAttribute": {
          "$ref": "#/definitions/attributesGeoPointAttribute",
          "description": "Represents a geopoint attribute."
        }
      }
    },
    "attributesGeoPointAttribute": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "attributesListAttribute": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/attributesAttribute"
          }
        }
      }
    },
    "attributesStructAttribute": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/attributesAttribute"
          }
        }
      }
    },
    "iamv1AccessResourceRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "subjectId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "A user ID will identify a unique namespaced email and it's personas"
        },
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM token)"
        },
        "ownerId": {
          "type": "string",
          "title": "owner_id is the app_id of the ResourceOwner that owns the resource_id"
        },
        "resourceId": {
          "type": "string",
          "title": "resource_id is the resource type that the subject wants to access"
        },
        "resourceEntityIdentifier": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ValueList"
          },
          "title": "deprecated: Use resource_entity_identifiers\nresource_entity_identifier contains the information necessary to identify a specific resource of the type specified by resource_id"
        },
        "accessScope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AccessScope"
          },
          "description": "access_scope represents the reasons that the user wants to access the resource.\nDEPRECATED: use the 'actions' field instead.\n\nREAD -\u003e \"READ\"\nWRITE -\u003e \"WRITE\"\nDELETE -\u003e \"DELETE\"\nLIST -\u003e \"LIST\""
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "actions represents the action that the user wants to perform on the resource."
        },
        "resourceEntityIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceIdentifier"
          },
          "title": "resource_entity_identifiers contains the information necessary to identify a set of resources of the type specified by resource_id"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "description": "resource_attributes contains the resource attributes to use during policy evaluation.\nOnly works for registered resources without a resource_owner_service_url specified."
        }
      },
      "title": "AccessResourceRequest asks IAM whether a subject has access to a resource"
    },
    "iamv1AddMultiUserRestrictionRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UserIdentifier"
          },
          "title": "The list of users to add the restriction to"
        },
        "restrictionType": {
          "$ref": "#/definitions/iamv1RestrictionType",
          "title": "The restriction type to add"
        }
      }
    },
    "iamv1AlgorithmType": {
      "type": "string",
      "enum": [
        "ALGORITHM_TYPE_ES256",
        "ALGORITHM_TYPE_RS256"
      ],
      "default": "ALGORITHM_TYPE_ES256",
      "title": "Supported Algorithm Types for Persona Public/Private Keys"
    },
    "iamv1CreateExternalIDRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "description": "The identifier for the user to create an external id for."
        },
        "typedExternalIdentifier": {
          "$ref": "#/definitions/iamv1TypedExternalIdentifier",
          "description": "The type and value of external ID to create."
        }
      }
    },
    "iamv1CreateSessionRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "description": "Credentials contains a subject's credentials for getting a session or a Google id token.\nIAM will use this data to create a new IAM session that will be returned in the response."
        },
        "oauthCredentials": {
          "$ref": "#/definitions/iamv1OAuthCredentials"
        },
        "subjectCredentials": {
          "$ref": "#/definitions/v1SubjectCredentials"
        }
      },
      "title": "Request message for IAM.CreateSession"
    },
    "iamv1CreateSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM identity token)"
        }
      },
      "title": "Response for IAM.CreateSession"
    },
    "iamv1DeleteUserRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "title": "Identifier of the user to update"
        }
      },
      "title": "Request for deleting a user"
    },
    "iamv1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "iamv1GetMultiExternalIDRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UserIdentifier"
          },
          "title": "The list of external ids to fetch"
        },
        "externalIdType": {
          "type": "string",
          "description": "Which type of external ids to fetch."
        }
      }
    },
    "iamv1GetMultiExternalIDResponse": {
      "type": "object",
      "properties": {
        "externalIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The external ids."
        }
      }
    },
    "iamv1GetMultiUsersRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UserIdentifier"
          }
        }
      }
    },
    "iamv1GetMultiUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetMultiUsersResponseUserContainer"
          }
        }
      }
    },
    "iamv1GetResetPasswordTokenRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "title": "Deprecated: pass a user identifier instead"
        },
        "email": {
          "type": "string",
          "title": "Deprecated: pass a user identifier instead"
        },
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "title": "The user to fetch a password reset token for"
        }
      },
      "title": "Request for UserIAM.GetResetPasswordToken"
    },
    "iamv1ListSecurityLogsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "UserID to list for"
        },
        "filters": {
          "$ref": "#/definitions/iamv1ListSecurityLogsRequestFilters",
          "title": "Optionally apply filters"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "cursor": {
          "type": "string",
          "title": "Cursor to begin the list from"
        }
      },
      "title": "Request for iam.v1.IAM/ListSecurityLogs"
    },
    "iamv1ListSecurityLogsRequestFilters": {
      "type": "object",
      "properties": {
        "actionId": {
          "type": "string",
          "title": "Filter the list by an actionID"
        }
      },
      "title": "Filters which can be applied to this list request"
    },
    "iamv1ListSecurityLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1SecurityLog"
          },
          "title": "The list of logs"
        },
        "nextCursor": {
          "type": "string",
          "title": "cursor to begin the list from"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not there are more logs"
        }
      },
      "title": "Response for iam.v1.IAM/ListSecurityLogs"
    },
    "iamv1ListUsersRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Namespace of the users, if present, only scopes if present.\nThe value of \"\" means users that exist outside of a namespace."
        },
        "email": {
          "type": "string",
          "title": "Email of the users, if present, scopes the list"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return. A page size of -1 returns all."
        },
        "userFilter": {
          "$ref": "#/definitions/iamv1UserFilter",
          "title": "Limit which users are included in the results"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UserSortOptions"
          },
          "title": "ListUserSortField, defaults to created ascending if no sort options provided"
        }
      }
    },
    "iamv1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1User"
          },
          "title": "A list of users"
        },
        "nextCursor": {
          "type": "string",
          "description": "A string indicating the starting position of the next set of results. The client should pass this in the\nthe next request."
        },
        "hasMore": {
          "type": "boolean",
          "description": "A bool indicating if there are more results to be paged through."
        }
      }
    },
    "iamv1NamespacedEmail": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "iamv1OAuthCredentials": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "title": "provider name, ie: \"google\""
        },
        "idToken": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        }
      },
      "title": "Credentials to be passed for an OAuth workflow"
    },
    "iamv1Policy": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "title": "app_id is a unique identifier for the ResourceOwner. It must be unique across all IAM resource owners. (eg \"VBC\")"
        },
        "resourceId": {
          "type": "string",
          "description": "The unique identifier for the resource this policy will be applied to."
        },
        "policyId": {
          "type": "string",
          "description": "The identifier for this policy. This need only be unique within the scope of the resource."
        },
        "policyName": {
          "type": "string",
          "title": "policy_name is the human readable name of the policy, often phrased as a question (eg: \"Can user access account group?\")"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AccessScope"
          },
          "description": "Operations that a user may take on a resource.\nIn particular, these will be the operations that this policy is associated with, so if this policy is associated\nwith \"read\", and a user attempts to \"read\" this resource type, this policy would be evaluated.\n\nDEPRECATED: use 'actions' instead.\n\nREAD -\u003e \"READ\"\nWRITE -\u003e \"WRITE\"\nDELETE -\u003e \"DELETE\"\nLIST -\u003e \"LIST\""
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The actions for which the policy will be registered.\nThe policy will run when an access check is run for ANY of its registered actions.\nThis field is a replacement for the old \"operations\" field.\nCommon actions include \"READ\", \"WRITE\", \"DELETE\" and \"LIST\", but you may\nuse any action which makes sense for your resource, e.g. \"PUBLISH\", \"REFRESH\", etc.\n\nThese values should be UPPER_SNAKE_CASE."
        },
        "policy": {
          "$ref": "#/definitions/policiesPolicyNode",
          "description": "policy is the boolean expression tree of boolean operators and attribute-based clauses that expresses the method by which the policy is evaluated."
        }
      },
      "description": "A policy is a binary boolean expression tree of attribute-based clauses that determines whether a subject is authorized to access a resource in a specific context."
    },
    "iamv1PublicKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "key is the public key"
        },
        "id": {
          "type": "string",
          "description": "Identifier for a public key. The `kid` claim in a JWT specifies this field, telling us which key to verify the JWT with."
        },
        "algorithmType": {
          "$ref": "#/definitions/iamv1AlgorithmType",
          "title": "The algorithm used for the key"
        }
      },
      "description": "PublicKey is a key capable of validating a JWT that has been signed with a private key by someone else."
    },
    "iamv1RegisterPolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/iamv1Policy"
        }
      },
      "description": "RegisterPolicyRequest registers a policy with a resource in IAM."
    },
    "iamv1RegisterResourceOwnerRequest": {
      "type": "object",
      "properties": {
        "owner": {
          "$ref": "#/definitions/v1ResourceOwner",
          "title": "owner is the definition of a resource owner"
        }
      },
      "description": "RegisterResourceOwnerRequest is issued by a prospective ResourceOwner to tell IAM they intend to expose resources that IAM will control access to."
    },
    "iamv1RegisterResourceRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "title": "app_id is a unique identifier for the ResourceOwner. It must be unique across all IAM resource owners. (eg \"VBC\")"
        },
        "resourceId": {
          "type": "string",
          "description": "resource_id is an identifier for the resource that is unique within the resource owner's set of resources."
        },
        "resourceName": {
          "type": "string",
          "title": "resource_name is the human readable name of the resource (eg \"Account Group\")"
        },
        "resourceOwnerServiceUrl": {
          "type": "string",
          "title": "resource_owner_service_url is the base url where a ResourceOwner grpc service is being served. IAM will use this service to ask about specific resources"
        },
        "requiredResourceParams": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "required_resource_params is the set of identifiers that must be provided to ask the resource provider about a resource from\nIAM's point of view. These parameters will need to be supplied by any client asking about this resource.\neg: [\"pid\", \"account_group_id\"] means that each time IAM asks for one of these resources, it will require the client to specify\nwhich \"pid\" and \"account_group_id\" they are asking about. IAM will proxy these parameters to the resource_owner_service_url."
        },
        "resourceOwnerAudience": {
          "type": "string",
          "description": "resource_owner_audience is a google id token audience. This is used by the resource owner to validate requests."
        }
      },
      "description": "RegisterResourceRequest is issued by a ResourceOwner to tell IAM that they would like to expose a resource that IAM will control access to."
    },
    "iamv1RemoveMultiUserRestrictionRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UserIdentifier"
          },
          "title": "The list of users to remove the restriction from"
        },
        "restrictionType": {
          "$ref": "#/definitions/iamv1RestrictionType",
          "title": "The restriction type to remove"
        }
      }
    },
    "iamv1RestrictionType": {
      "type": "string",
      "enum": [
        "RESTRICTION_TYPE_UNSET",
        "RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN",
        "RESTRICTION_TYPE_FROZEN"
      ],
      "default": "RESTRICTION_TYPE_UNSET",
      "description": "- RESTRICTION_TYPE_UNSET: Unset\n - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN: This restriction prevents user from logging in. Automatically cleared on password reset.\n - RESTRICTION_TYPE_FROZEN: This restriction prevents user from logging in or passing any access checks.",
      "title": "The list of restriction types which can be applied to Users"
    },
    "iamv1SecurityLog": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "UserID that this log is for"
        },
        "actionId": {
          "type": "string",
          "title": "The action which was taken"
        },
        "logId": {
          "type": "string",
          "title": "A unique ID to identify this specific log"
        },
        "description": {
          "type": "string",
          "title": "A description of what occurred"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time this log was created"
        }
      },
      "title": "SecurityLog represents a security log"
    },
    "iamv1SendEmailVerificationRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "ID of user to send email verification to"
        },
        "recaptchaToken": {
          "type": "string",
          "title": "Optional ReCaptcha token for public email verification calls: https://developers.google.com/recaptcha/docs/verify"
        }
      }
    },
    "iamv1SortDirection": {
      "type": "string",
      "enum": [
        "SORT_DIRECTION_INVALID",
        "SORT_DIRECTION_ASCENDING",
        "SORT_DIRECTION_DESCENDING"
      ],
      "default": "SORT_DIRECTION_INVALID"
    },
    "iamv1TypedExternalIdentifier": {
      "type": "object",
      "properties": {
        "externalIdType": {
          "type": "string",
          "description": "The type of external id."
        },
        "externalId": {
          "type": "string",
          "description": "The external id."
        }
      },
      "description": "A user's external id. Identifies a user in a system outside of IAM."
    },
    "iamv1UpdateUserRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The ID of the user to update"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1UpdateUserRequestOperation"
          },
          "title": "A list of operations to perform on the user"
        }
      },
      "title": "Request for updating a user"
    },
    "iamv1UpdateUserRequestOperation": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "greetingName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        }
      }
    },
    "iamv1User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "A user ID is a globally unique id across all users."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the user."
        },
        "email": {
          "type": "string",
          "description": "Email of the user."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time when the user was created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the user was last updated."
        },
        "firstName": {
          "type": "string",
          "title": "The first name of the user"
        },
        "greetingName": {
          "type": "string",
          "title": "The greeting name for the user"
        },
        "lastName": {
          "type": "string",
          "title": "The last name of the user"
        },
        "languageCode": {
          "type": "string",
          "description": "End-User's locale, represented as a BCP47 [RFC5646] language tag. This is an ISO 639-1 Alpha-2 [ISO639‑1]\nlanguage code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.\nFor example, en-US or fr-CA."
        },
        "emailVerified": {
          "type": "boolean",
          "title": "Whether or not a user has verified their email"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of the roles (a.k.a. subject types, a.k.a. personas) which the user has.\nEach role will be listed at most once.\nE.g. For a user which has both a salesperson persona and partner persona, this field\nwill contain ['sales_person', 'partner']\nOrder is not guaranteed.\nYou can find the common role id's in the IAM sdk's `subject` package."
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the user was last authenticated."
        },
        "publicKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1PublicKey"
          },
          "description": "Public keys that are able to validate tokens issued by the user."
        }
      },
      "title": "A User is what uniquely occupies a namespace/email identity"
    },
    "iamv1UserFilter": {
      "type": "object",
      "properties": {
        "subjectTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter Users by `has any of the following subject types`"
        },
        "searchTerms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Search terms filter (not scored), matches each search term if it exists within one of first name, last name, or email of the User"
        }
      }
    },
    "iamv1UserIdentifier": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "A user ID"
        },
        "namespacedEmail": {
          "$ref": "#/definitions/iamv1NamespacedEmail",
          "title": "Deprecated: Prefer to use the `user_id` or `token` fields to avoid handling email, or for `user_id` being a more stable reference to a user who may have changed their email"
        },
        "namespacedSession": {
          "$ref": "#/definitions/v1NamespacedSession",
          "title": "Deprecated: Use the `token` field instead when the user is to be inferred from the token (ex. the session from `namespaced_session`, a session token, can be used in the `token` field)\nAny namespace specified here is ignored because a token uniquely identifies a user"
        },
        "token": {
          "type": "string",
          "title": "A token for a user signed by the platform (ie. access token or identity tokens from SSO; session tokens from IAM)"
        },
        "typedExternalIdentifier": {
          "$ref": "#/definitions/iamv1TypedExternalIdentifier",
          "description": "Identify a user by an external identifier."
        },
        "subjectId": {
          "type": "string",
          "title": "Looking up a User via a Subject ID will be slower than other methods"
        }
      },
      "title": "There are several ways to uniquely identify a user"
    },
    "iamv1UserSortField": {
      "type": "string",
      "enum": [
        "USER_SORT_FIELD_INVALID",
        "USER_SORT_FIELD_CREATED",
        "USER_SORT_FIELD_FIRST_NAME",
        "USER_SORT_FIELD_LAST_NAME",
        "USER_SORT_FIELD_EMAIL",
        "USER_SORT_FIELD_LAST_LOGIN"
      ],
      "default": "USER_SORT_FIELD_INVALID",
      "description": "The field to sort a result set on."
    },
    "iamv1UserSortOptions": {
      "type": "object",
      "properties": {
        "direction": {
          "$ref": "#/definitions/iamv1SortDirection",
          "title": "A direction to sort results in"
        },
        "field": {
          "$ref": "#/definitions/iamv1UserSortField",
          "title": "Field to sort on"
        }
      },
      "title": "Options for controlling the order of query results"
    },
    "iamv1VerifyEmailRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "Email verifier token"
        }
      }
    },
    "iamv2AccessResourceRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "An IAM token. Both identity tokens and access tokens are permitted."
        },
        "userId": {
          "type": "string",
          "description": "ID of a user to check access against."
        },
        "userAndImpersonateeId": {
          "$ref": "#/definitions/v2UserAndImpersonateeId",
          "description": "ID of a user and the impersonatee to check access against."
        },
        "ownerId": {
          "type": "string",
          "title": "The owner of the resource"
        },
        "resourceId": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceAttributes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/attributesStructAttribute"
          },
          "title": "A map of resources, keys are caller specified.\nIf ANY resources fail the access check, the call will result in\na Permission Denied error with details in the error metadata about which\nresources failed, identified by the caller-specified keys"
        }
      }
    },
    "iamv2AddMultiUserRestrictionRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UserIdentifier"
          },
          "title": "The list of users to add the restriction to"
        },
        "restrictionType": {
          "$ref": "#/definitions/iamv2RestrictionType",
          "title": "The restriction type to add"
        }
      }
    },
    "iamv2AlgorithmType": {
      "type": "string",
      "enum": [
        "ALGORITHM_TYPE_ES256",
        "ALGORITHM_TYPE_RS256"
      ],
      "default": "ALGORITHM_TYPE_ES256",
      "title": "Supported Algorithm Types for Persona Public/Private Keys"
    },
    "iamv2CreateExternalIDRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "description": "The identifier for the user to create an external id for."
        },
        "typedExternalIdentifier": {
          "$ref": "#/definitions/iamv2TypedExternalIdentifier",
          "description": "The type and value of external ID to create."
        }
      }
    },
    "iamv2CreateSessionRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Namespace to search for the user in"
        },
        "oauthCredentials": {
          "$ref": "#/definitions/iamv2OAuthCredentials"
        },
        "passwordCredentials": {
          "$ref": "#/definitions/v2PasswordCredentials"
        },
        "oneTimePasswordCredentials": {
          "$ref": "#/definitions/v2OneTimePasswordCredentials"
        },
        "subjectTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "iamv2CreateSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM session)"
        }
      }
    },
    "iamv2DeleteUserRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to delete"
        }
      }
    },
    "iamv2GetMultiExternalIDRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UserIdentifier"
          },
          "title": "The list of external ids to fetch"
        },
        "externalIdType": {
          "type": "string",
          "description": "Which type of external ids to fetch."
        }
      }
    },
    "iamv2GetMultiExternalIDResponse": {
      "type": "object",
      "properties": {
        "externalIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The external ids."
        }
      }
    },
    "iamv2GetMultiUsersRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UserIdentifier"
          },
          "title": "The users to get"
        },
        "propertyMask": {
          "$ref": "#/definitions/v2UserPropertyMask",
          "title": "Which properties to include on the returned user"
        }
      }
    },
    "iamv2GetMultiUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2User"
          },
          "title": "The users"
        }
      }
    },
    "iamv2GetResetPasswordTokenRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to fetch a password reset token for"
        }
      }
    },
    "iamv2ListSecurityLogsRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "User Identifier to list for"
        },
        "filters": {
          "$ref": "#/definitions/iamv2ListSecurityLogsRequestFilters",
          "title": "Optionally apply filters"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "cursor": {
          "type": "string",
          "title": "Cursor to begin the list from"
        }
      }
    },
    "iamv2ListSecurityLogsRequestFilters": {
      "type": "object",
      "properties": {
        "actionId": {
          "type": "string",
          "title": "Filter the list by an actionID"
        }
      },
      "title": "Filters which can be applied to this list request"
    },
    "iamv2ListSecurityLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2SecurityLog"
          },
          "title": "The list of logs"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata",
          "title": "Paging info"
        }
      }
    },
    "iamv2ListUsersRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "The partner ID"
        },
        "allPartners": {
          "type": "boolean",
          "title": "All Partners"
        },
        "userFilter": {
          "$ref": "#/definitions/iamv2UserFilter",
          "title": "Limit which users are included in the results"
        },
        "propertyMask": {
          "$ref": "#/definitions/v2UserPropertyMask",
          "title": "Which extra properties to include on the listed users"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The number of results to return"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UserSortOptions"
          },
          "title": "ListUserSortField, defaults to created ascending if no sort options provided"
        }
      }
    },
    "iamv2ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2User"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata",
          "title": "Paging info"
        }
      }
    },
    "iamv2NamespacedEmail": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "The namespace (i.e. partner id) to which a user belongs"
        },
        "email": {
          "type": "string",
          "title": "The email ID of the user"
        }
      },
      "title": "DEPRECATED: A user can be uniquely identified with an email and a partner ID namespace"
    },
    "iamv2OAuthCredentials": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "title": "provider name, ie: \"google\""
        },
        "idToken": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        }
      },
      "title": "Credentials to be passed for an OAuth workflow"
    },
    "iamv2Policy": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policy": {
          "$ref": "#/definitions/policiesPolicyNode"
        },
        "readOnlyPolicy": {
          "type": "string",
          "title": "The human readable version of the policy"
        },
        "resourceAttributesUsed": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The inferred set of resource attributes used within the policy"
        }
      }
    },
    "iamv2PublicKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "algorithmType": {
          "$ref": "#/definitions/iamv2AlgorithmType"
        }
      },
      "title": "A Client Public Key"
    },
    "iamv2RegisterPolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/iamv2Policy",
          "title": "The policy to register"
        }
      }
    },
    "iamv2RegisterResourceOwnerRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "title": "A kebab-case unique identifier for your app\ne.g. \"vendasta-business-center\""
        },
        "appName": {
          "type": "string",
          "title": "A human readable name for your application\ne.g. \"Business Center\""
        }
      }
    },
    "iamv2RegisterResourceRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "title": "A kebab-case unique identifier for your app\ne.g. \"vendasta-business-center\""
        },
        "resourceId": {
          "type": "string",
          "title": "A kebab-case identifier for your resource which is unique within your app\ne.g. \"godaddy-domain\""
        },
        "resourceName": {
          "type": "string",
          "title": "A human readable name for your resource"
        },
        "version": {
          "type": "string",
          "description": "DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource\nIf the specified version is the same as the current resource version updates will not be applied\nDecreasing the version will update the resource but will not rollback to a previous state."
        }
      }
    },
    "iamv2RemoveMultiUserRestrictionRequest": {
      "type": "object",
      "properties": {
        "userIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UserIdentifier"
          },
          "title": "The list of users to remove the restriction from"
        },
        "restrictionType": {
          "$ref": "#/definitions/iamv2RestrictionType",
          "title": "The restriction type to remove"
        }
      }
    },
    "iamv2RestrictionType": {
      "type": "string",
      "enum": [
        "RESTRICTION_TYPE_UNSET",
        "RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN",
        "RESTRICTION_TYPE_FROZEN"
      ],
      "default": "RESTRICTION_TYPE_UNSET",
      "description": "- RESTRICTION_TYPE_UNSET: Unset\n - RESTRICTION_TYPE_RESET_PASSWORD_BEFORE_LOGIN: This restriction prevents user from logging in. Automatically cleared on password reset.\n - RESTRICTION_TYPE_FROZEN: This restriction prevents user from logging in or passing any access checks.",
      "title": "The list of restriction types which can be applied to Users"
    },
    "iamv2SecurityLog": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "User ID that this log is for"
        },
        "actionId": {
          "type": "string",
          "title": "The action which was taken"
        },
        "logId": {
          "type": "string",
          "title": "A unique ID to identify this specific log"
        },
        "description": {
          "type": "string",
          "title": "A description of what occurred"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time this log was created"
        }
      },
      "title": "SecurityLog represents a security log"
    },
    "iamv2SendEmailVerificationRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "ID of user to send email verification to"
        },
        "nextUrl": {
          "type": "string",
          "title": "Provide a url for the user to navigate to after their email has been verified"
        },
        "nextUrlButtonText": {
          "type": "string",
          "title": "Provide the text for the button the user will click to navigate to the provided next_url"
        },
        "forceEmailBrandingPartnerId": {
          "type": "string",
          "description": "By default, the verification email will be sent with whitelabel branding inferred from the given UserIdentifier.\nYou can optionally set this field to a specific partner identifier to use a specific partner's whitelabel branding."
        },
        "recaptchaToken": {
          "type": "string",
          "title": "Optional ReCaptcha token for public email verification calls: https://developers.google.com/recaptcha/docs/verify"
        }
      }
    },
    "iamv2SortDirection": {
      "type": "string",
      "enum": [
        "SORT_DIRECTION_INVALID",
        "SORT_DIRECTION_ASCENDING",
        "SORT_DIRECTION_DESCENDING"
      ],
      "default": "SORT_DIRECTION_INVALID"
    },
    "iamv2TypedExternalIdentifier": {
      "type": "object",
      "properties": {
        "externalIdType": {
          "type": "string",
          "description": "The type of external id."
        },
        "externalId": {
          "type": "string",
          "description": "The external id."
        }
      },
      "description": "A user's external id. Identifies a user in a system outside of IAM."
    },
    "iamv2UpdateUserRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to update"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2UpdateUserRequestOperation"
          },
          "title": "The updates to perform"
        }
      }
    },
    "iamv2UpdateUserRequestOperation": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "greetingName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumbers": {
          "$ref": "#/definitions/UpdateUserRequestPhoneNumbers"
        },
        "address": {
          "$ref": "#/definitions/v2Address"
        },
        "profileImageUrl": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "linkedIn": {
          "$ref": "#/definitions/v2LinkedIn"
        },
        "meetingBookingUrl": {
          "type": "string"
        },
        "externalId": {
          "$ref": "#/definitions/iamv2TypedExternalIdentifier",
          "title": "Set the value for the specified external id type\nTo set the value of multiple types add the operation multiple times"
        }
      }
    },
    "iamv2User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "The User ID e.g. U-e7751c53-8a49-5e89-90fd-7a8140889c02"
        },
        "partnerId": {
          "type": "string",
          "description": "The \"owner\" partner for the user."
        },
        "email": {
          "type": "string",
          "title": "The user's email"
        },
        "roles": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2UserRole"
          },
          "title": "A map of all roles the user has, keyed by role_id"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "When the user was first created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "When the user was last updated"
        },
        "firstName": {
          "type": "string",
          "title": "The user's first name"
        },
        "greetingName": {
          "type": "string",
          "description": "This is a special name used to greet individuals\nwhich is used in certain languages.\nIt's unused in Western cultures."
        },
        "lastName": {
          "type": "string",
          "title": "The user's surname"
        },
        "languageCode": {
          "type": "string",
          "title": "The preferred language of the user as a locale"
        },
        "publicKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2PublicKey"
          },
          "title": "The user's public client keys"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "The last time the user went through the \"sign-in\" flow."
        },
        "emailVerified": {
          "type": "boolean",
          "title": "Whether or not a user has verified their email"
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2PhoneNumber"
          },
          "title": "List of phone numbers associated to the user"
        },
        "address": {
          "$ref": "#/definitions/v2Address",
          "title": "Address of the user"
        },
        "profileImageUrl": {
          "type": "string",
          "title": "The user's profile image"
        },
        "timeZone": {
          "type": "string",
          "description": "Time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles."
        },
        "userSpecifiedPassword": {
          "type": "string",
          "description": "The password entered specifically by the end user.\nThis field should only be used when someone is creating their OWN user, never\nwhen an administrator is creating a user for someone else.\nThis must never be a \"default\" or system-generated password.\nAccess to this field is limited to only the service accounts that require it.\nAll other consumers of CreateUser should instead initiate the Password Reset\nprocess to allow the end-user themselves to set their own password."
        },
        "linkedIn": {
          "$ref": "#/definitions/v2LinkedIn",
          "title": "LinkedIn user profile information"
        },
        "meetingBookingUrl": {
          "type": "string",
          "title": "Meeting booking url is where the user can provide a link for booking meetings"
        }
      }
    },
    "iamv2UserFilter": {
      "type": "object",
      "properties": {
        "roleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Users with ANY of the provided types will be returned\nEmpty list will return ALL users."
        },
        "searchTerms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Search terms filter (not scored), matches each search term if it exists within one of first name, last name, or email of the User"
        },
        "email": {
          "type": "string",
          "title": "Search by email"
        },
        "emailVerified": {
          "type": "boolean",
          "title": "Search by email verified status, if requested"
        }
      },
      "title": "Filter which users are returned"
    },
    "iamv2UserIdentifier": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "Identifies a user by their user_id"
        },
        "token": {
          "type": "string",
          "description": "An IAM token\nBoth identity tokens and access tokens are permitted."
        },
        "namespacedEmail": {
          "$ref": "#/definitions/iamv2NamespacedEmail",
          "title": "Deprecated: Prefer to use the `user_id` or `token` fields to avoid handling email, or for `user_id` being a more stable reference to a user who may have changed their email"
        },
        "typedExternalIdentifier": {
          "$ref": "#/definitions/iamv2TypedExternalIdentifier",
          "description": "Identify a user by an external identifier."
        },
        "subjectId": {
          "type": "string",
          "title": "Looking up a User via a Subject ID will be slower than other methods"
        }
      },
      "description": "A UserIdentifier uniquely identifies a user."
    },
    "iamv2UserSortField": {
      "type": "string",
      "enum": [
        "USER_SORT_FIELD_INVALID",
        "USER_SORT_FIELD_CREATED",
        "USER_SORT_FIELD_FIRST_NAME",
        "USER_SORT_FIELD_LAST_NAME",
        "USER_SORT_FIELD_EMAIL",
        "USER_SORT_FIELD_LAST_LOGIN"
      ],
      "default": "USER_SORT_FIELD_INVALID",
      "description": "The field to sort a result set on."
    },
    "iamv2UserSortOptions": {
      "type": "object",
      "properties": {
        "direction": {
          "$ref": "#/definitions/iamv2SortDirection",
          "title": "A direction to sort results in"
        },
        "field": {
          "$ref": "#/definitions/iamv2UserSortField",
          "title": "Field to sort on"
        }
      },
      "title": "Options for controlling the order of query results"
    },
    "iamv2VerifyEmailRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "Email verifier token"
        },
        "requestOtpCode": {
          "type": "boolean",
          "title": "Request OTP Code"
        }
      }
    },
    "policiesBooleanOperator": {
      "type": "string",
      "enum": [
        "AND",
        "OR",
        "NOT"
      ],
      "default": "AND",
      "title": "Boolean operator supports the basic boolean expressions AND, OR, NOT"
    },
    "policiesForOperator": {
      "type": "string",
      "enum": [
        "ANY",
        "ALL"
      ],
      "default": "ANY",
      "description": "- ANY: ANY struct inside of the list must match the PolicyNode to be true\n - ALL: ALL structs inside of the list must match the PolicyNode to be true",
      "title": "ForOperator defines how the SubjectResourceFor clauses will evaluate the list of StructAttributes"
    },
    "policiesIfClause": {
      "type": "object",
      "properties": {
        "resourceAttributeName": {
          "type": "string",
          "title": "Name of the resource's attribute to compare against"
        },
        "resourceAttributeValue": {
          "$ref": "#/definitions/attributesAttribute",
          "title": "Value to compare against the resource's attribute"
        },
        "thenPolicy": {
          "$ref": "#/definitions/policiesPolicyNode",
          "title": "If the check matches, \"then_policy\" will be evaluated"
        },
        "elsePolicy": {
          "$ref": "#/definitions/policiesPolicyNode",
          "title": "If the check fails, \"else_policy\" will be evaluated"
        }
      },
      "description": "IfClause will check whether the given attribute value intersects with the resource's attribute at the given name.\nIf the provided value is present on the resource, \"then_policy\" will be evaluated, otherwise \"else_policy\" will be evaluated."
    },
    "policiesOperator": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/policiesBooleanOperator"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policiesPolicyNode"
          }
        }
      },
      "description": "Operator consists of a boolean conjunction and one to two children nodes.\nNOT is the only conjunction that supports a single child node, whereas AND and OR both require exactly two child nodes."
    },
    "policiesPolicyNode": {
      "type": "object",
      "properties": {
        "subjectResourceIntersection": {
          "$ref": "#/definitions/policiesSubjectResourceIntersectionClause",
          "description": "Validates that the intersection between subjects and resources is not an empty set."
        },
        "operator": {
          "$ref": "#/definitions/policiesOperator",
          "title": "Allows conjuctions between many policy nodes (AND, OR, and NOT)"
        },
        "subjectValueIntersection": {
          "$ref": "#/definitions/policiesSubjectValueIntersectionClause",
          "title": "Validates that the subject has a specific value"
        },
        "subjectMissingValue": {
          "$ref": "#/definitions/policiesSubjectMissingValueClause",
          "description": "Validates that the subject has a specific missing value."
        },
        "subjectResourceSubset": {
          "$ref": "#/definitions/policiesSubjectResourceSubsetClause",
          "description": "Validates that the resources attributes is a subset of the subjects attributes."
        },
        "subjectResourceFor": {
          "$ref": "#/definitions/policiesSubjectResourceForClause",
          "description": "Iterates over a list of StructAttributes and validates the entries match the policy described."
        },
        "ifClause": {
          "$ref": "#/definitions/policiesIfClause",
          "title": "Checks conditional, branches into different paths depending on the result"
        }
      },
      "description": "A PolicyNode can either be a Boolean operator over one or more child PolicyNodes, or it can be an SubjectResourceIntersectionClause.\nA policy tree might look like this where C1, C2, C3 are SubjectResourceIntersectionClauses:\n         AND\n        /   \\\n       C1   OR\n           /  \\\n          C2  C3\nThis means that the expression would be evaluated as C1 \u0026\u0026 (C2 || C3)\nArbitrary nesting is valid."
    },
    "policiesSubjectMissingValueClause": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        }
      },
      "title": "SubjectMissingValueClause is true if the subject attribute keyed by attribute_name is either missing or has no values.\neg: with attribute_name = \"market_id\", then a subject with \"market_id\" = [] is TRUE, a subject with \"market_id\" = [\"something\"] is FALSE,\nand if the subject simply doesn't have an attribute called \"market_id\" then this clause is TRUE"
    },
    "policiesSubjectResourceForClause": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/policiesForOperator"
        },
        "rules": {
          "$ref": "#/definitions/policiesPolicyNode"
        }
      },
      "description": "SubjectResourceForClause will loop through a list of StructAttributes and return true if any or all match the PolicyNode defined.\nThe Subject MUST have a ListAttribute that contains StructAttributes at the attribute_name key for this to be evaluated."
    },
    "policiesSubjectResourceIntersectionClause": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "resourceAttributeName": {
          "type": "string"
        }
      },
      "description": "SubjectResourceIntersectionClause is true if the set of values keyed by attribute_name on the resource has a non-empty\nintersection with the set of values keyed by resource_attribute_name (or optionally attribute_name if\nresource_attribute_name is not provided) on the subject. eg: with attribute_name = \"account_group_id\" then the subject\nMUST have an attribute named \"account_group_id\" that contains any individual value of the resource's\n\"account_group_id\" attribute for this clause to be considered TRUE."
    },
    "policiesSubjectResourceSubsetClause": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "resourceAttributeName": {
          "type": "string"
        }
      },
      "description": "SubjectResourceSubsetClause is true if the set of values keyed by attribute_name on the resource is a subset of the set of values keyed by attribute_name on the subject."
    },
    "policiesSubjectValueIntersectionClause": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string",
          "title": "Name of the attribute to compare against, use periods to denote inner struct attribute names"
        },
        "attributeValue": {
          "type": "string",
          "title": "Deprecated: use structured_attribute_value instead"
        },
        "structuredAttributeValue": {
          "$ref": "#/definitions/attributesAttribute",
          "title": "Attribute value to compare against, must be a non struct attribute"
        }
      },
      "description": "SubjectValueIntersectionClause describes how an attribute's value on the subject must contain the arbitrary value specified by attribute_value.\neg: with attribute_name = \"subject_type\" and attribute_value = \"partner\", then the subject MUST have an attribute named\n\"subject_type\" that contains the value \"partner\". Note that this is different from SubjectResourceIntersectionClause because we don't\ncare about this attributes presence on the resource or its value, it is purely for enforcing constraints on the subject itself."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccessScope": {
      "type": "string",
      "enum": [
        "READ",
        "WRITE",
        "DELETE",
        "LIST"
      ],
      "default": "READ",
      "description": "AccessScope represents the spectrum of intents that a resource may be accessed with. Different intents may entail the evaluation\nof different policies, as policies are associated not only to resources, but to specific AccessScope within the scope of that resource.\n\nDEPRECATED: use \"actions\" instead of \"operations\""
    },
    "v1AddKeyRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Deprecated: use user_identifier instead\nThe email of the subject to add a key for."
        },
        "context": {
          "$ref": "#/definitions/v1Context",
          "title": "Deprecated: use user_identifier instead"
        },
        "algorithmType": {
          "$ref": "#/definitions/iamv1AlgorithmType",
          "title": "The algorithm to use to generate the key"
        },
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "description": "The identifier for the user to create a key for."
        }
      },
      "title": "Request message from IAM.AddKey"
    },
    "v1AddKeyResponse": {
      "type": "object",
      "properties": {
        "privateKey": {
          "type": "string",
          "description": "The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again."
        },
        "keyId": {
          "type": "string",
          "description": "The identifier of the matching public key."
        }
      },
      "title": "Response message from IAM.AddKey"
    },
    "v1ArchiveAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "$ref": "#/definitions/v1FieldSchemaIdentifier"
        }
      }
    },
    "v1AuthenticateSubjectRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "Request message for IAM.AuthenticateSubject"
    },
    "v1AuxiliaryDataFieldSchema": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "fieldId": {
          "type": "string"
        },
        "fieldType": {
          "$ref": "#/definitions/v1AuxiliaryDataFieldType"
        },
        "fieldName": {
          "type": "string"
        },
        "fieldDescription": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "dropdownOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DropdownOption"
          }
        },
        "currencyCode": {
          "type": "string",
          "title": "currency code according to ISO-4217, e.g. 'USD', 'CAD', 'BRL', etc"
        },
        "archived": {
          "type": "string",
          "format": "date-time"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "v1AuxiliaryDataFieldType": {
      "type": "string",
      "enum": [
        "AUXILIARY_DATA_FIELD_TYPE_INVALID",
        "AUXILIARY_DATA_FIELD_TYPE_STRING",
        "AUXILIARY_DATA_FIELD_TYPE_INTEGER",
        "AUXILIARY_DATA_FIELD_TYPE_DATE",
        "AUXILIARY_DATA_FIELD_TYPE_DROPDOWN",
        "AUXILIARY_DATA_FIELD_TYPE_CURRENCY"
      ],
      "default": "AUXILIARY_DATA_FIELD_TYPE_INVALID"
    },
    "v1AuxiliaryDataObjectID": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        }
      }
    },
    "v1ChangeSubjectEmailRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "subjectId": {
          "type": "string"
        },
        "newEmail": {
          "type": "string"
        }
      },
      "title": "Request message for IAM.ChangeSubjectEmail"
    },
    "v1Context": {
      "type": "object",
      "properties": {
        "namespaced": {
          "$ref": "#/definitions/v1NamespacedContext"
        },
        "typed": {
          "$ref": "#/definitions/v1TypedContext"
        }
      },
      "description": "Context scopes a request to a specific persona.  A persona can either be a typed or a typed/namespace unique pair.\nA typed context scopes a persona to a specific type, such as a partner user.\nA namespaced context scopes a persona to a specific type and a given namespace, such as an SMB that belongs to a\nspecific partner."
    },
    "v1CreateAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "fieldSchema": {
          "$ref": "#/definitions/v1AuxiliaryDataFieldSchema"
        }
      }
    },
    "v1CreateTemporarySubjectRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "description": "The namespace and type of the session that is being created."
        },
        "subject": {
          "type": "string",
          "description": "The session subject, this should be some identifier of the subject, for example an Account Group ID."
        },
        "attributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "These attributes will be added to the session and will be used during policy evaluation"
        }
      },
      "title": "Request for iam.v1.IAM/CreateTemporarySubject"
    },
    "v1CreateTemporarySubjectResponse": {
      "type": "object",
      "properties": {
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM identity token) which contains a subject's attributes instead of referring to a user for them"
        }
      },
      "title": "Response for iam.v1.IAM/CreateTemporarySubject"
    },
    "v1DeleteSubjectRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "description": "Context is required which indicates the specific persona of a given subject."
        },
        "subjectId": {
          "type": "string",
          "description": "The subject id that will be deleted."
        }
      },
      "title": "Request message for IAM.DeleteSubject"
    },
    "v1DropdownOption": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1FieldDataUpsertOperation": {
      "type": "object",
      "properties": {
        "fieldDataId": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "integer": {
          "type": "string",
          "format": "int64"
        },
        "string": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "dropdownValue": {
          "type": "string"
        },
        "currencyValue": {
          "type": "string",
          "format": "int64"
        },
        "deleteValue": {
          "type": "boolean",
          "title": "deletes the field's current value from the object"
        }
      }
    },
    "v1FieldSchemaIdentifier": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        }
      }
    },
    "v1GetAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "$ref": "#/definitions/v1FieldSchemaIdentifier"
        }
      }
    },
    "v1GetAuxiliaryDataFieldSchemaResponse": {
      "type": "object",
      "properties": {
        "fieldSchema": {
          "$ref": "#/definitions/v1AuxiliaryDataFieldSchema"
        }
      }
    },
    "v1GetImpersonationTokenRequest": {
      "type": "object",
      "properties": {
        "impersonatee": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "title": "user identifier of impersonatee (the user being impersonated)"
        },
        "impersonator": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "title": "user identifier of impersonator"
        }
      },
      "title": "Request message for IAM.GetImpersonationToken"
    },
    "v1GetImpersonationTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "A token with the impersonated user field set"
        }
      },
      "title": "Response message for IAM.GetImpersonationToken"
    },
    "v1GetMultiAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "identifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FieldSchemaIdentifier"
          }
        }
      }
    },
    "v1GetMultiAuxiliaryDataFieldSchemaResponse": {
      "type": "object",
      "properties": {
        "fieldSchemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuxiliaryDataFieldSchema"
          }
        }
      }
    },
    "v1GetSessionTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "token is a JWT provided by a subject registered with IAM. The token contains the context of which subject they want a session for.\n\nExample claims:\n{\n     iss: my-app-id-or-pid\n     aud: vendasta.com\n     sub: my-subject@service-account.vendasta.com\n     kid: my-public-key-id\n     /* other claims like exp, iat, as normal */\n}"
        }
      },
      "title": "Request message from IAM.GetSessionToken"
    },
    "v1GetShortLivedTokenRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "email": {
          "type": "string"
        }
      },
      "title": "Request message for IAM.GetShortLivedToken"
    },
    "v1GetSubjectBySessionRequest": {
      "type": "object",
      "properties": {
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM identity token)"
        },
        "context": {
          "$ref": "#/definitions/v1Context"
        }
      },
      "title": "Request message for IAM.GetSubjectBySession"
    },
    "v1GetSubjectContextRequest": {
      "type": "object",
      "properties": {
        "subjectId": {
          "type": "string"
        }
      },
      "title": "Request message for IAM.GetSubjectContext"
    },
    "v1GetSubjectContextResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        }
      },
      "title": "Response message for IAM.GetSubjectContext"
    },
    "v1GetSubjectResponse": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/v1SubjectResult"
        }
      },
      "title": "Response message for IAM.GetSubjectBySession"
    },
    "v1GetSubjectsByEmailRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fieldMask": {
          "$ref": "#/definitions/iamv1FieldMask"
        }
      },
      "title": "Request message for IAM.GetSubjectsByEmail"
    },
    "v1GetSubjectsRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context"
        },
        "subjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fieldMask": {
          "$ref": "#/definitions/iamv1FieldMask"
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Identifier"
          }
        }
      },
      "title": "Request message for IAM.GetSubjects"
    },
    "v1GetSubjectsResponse": {
      "type": "object",
      "properties": {
        "subjects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubjectResult"
          }
        }
      },
      "title": "Response message for IAM.GetSubjects and IAM.GetSubjectsByEmail"
    },
    "v1GetTokenRequest": {
      "type": "object",
      "title": "Request message for IAM.GetTokenRequest"
    },
    "v1GetTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "token is a session token that has been signed by IAM. It can be used as a bearer token on subsequent calls to IAM."
        }
      },
      "title": "Response message for IAM.GetToken"
    },
    "v1IAMListPersonasRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "title": "user identifier for the subject"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        },
        "type": {
          "type": "string",
          "description": "Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will\nallow retrieving Personas across all types."
        },
        "namespace": {
          "type": "string",
          "description": "namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will\nallow retrieving Personas across all namespaces. Typed Personas will always be included in list."
        },
        "alwaysIncludeSuperadmin": {
          "type": "boolean",
          "title": "If always_include_superadmin is true, then always return the partner persona associated to the the specified\nuser_identifier if that user is a superadmin.\nThis allows the inclusion of a superadmin partner persona on the list results even if the namespace doesn't match"
        }
      },
      "title": "Request for iam.v1.IAM/ListPersonas"
    },
    "v1Identifier": {
      "type": "object",
      "properties": {
        "subjectId": {
          "type": "string",
          "title": "A subject id for a user's persona"
        },
        "userId": {
          "type": "string",
          "title": "A user's user id"
        }
      },
      "title": "Identifier is a way to identify a user"
    },
    "v1ListAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "pagingOptions": {
          "$ref": "#/definitions/vendastatypesPagedRequestOptions"
        },
        "filters": {
          "$ref": "#/definitions/v1ListAuxiliaryDataFieldSchemaRequestFilters"
        }
      }
    },
    "v1ListAuxiliaryDataFieldSchemaRequestFilters": {
      "type": "object",
      "properties": {
        "onlyArchived": {
          "type": "boolean"
        }
      }
    },
    "v1ListAuxiliaryDataFieldSchemaResponse": {
      "type": "object",
      "properties": {
        "fieldSchemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuxiliaryDataFieldSchema"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ListAuxiliaryDataRequest": {
      "type": "object",
      "properties": {
        "auxiliaryDataObjectId": {
          "$ref": "#/definitions/v1AuxiliaryDataObjectID"
        },
        "pagingOptions": {
          "$ref": "#/definitions/vendastatypesPagedRequestOptions"
        }
      }
    },
    "v1ListAuxiliaryDataResponse": {
      "type": "object",
      "properties": {
        "jsonSchema": {
          "type": "string"
        },
        "jsonData": {
          "type": "string"
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ListPersonasByEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "email identifier for the subject"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        },
        "type": {
          "type": "string",
          "description": "Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will\nallow retrieving Personas across all types."
        },
        "namespace": {
          "type": "string",
          "description": "namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will\nallow retrieving Personas across all namespaces. Typed Personas will always be included in list."
        }
      },
      "title": "Request for iam.v1.IAM/ListPersonasByEmail"
    },
    "v1ListPersonasRequest": {
      "type": "object",
      "properties": {
        "session": {
          "type": "string",
          "description": "A session token (aka an IAM identity token). Required."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        },
        "type": {
          "type": "string",
          "description": "Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will\nallow retrieving Personas across all types."
        },
        "namespace": {
          "type": "string",
          "description": "namespace allows filtering the Personas to a specific Subject namespace. This is an optional field, leaving it blank will\nallow retrieving Personas across all namespaces. Typed Personas will always be included in list."
        }
      },
      "title": "Request message for IAM.ListPersonas"
    },
    "v1ListPersonasResponse": {
      "type": "object",
      "properties": {
        "personas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Persona"
          },
          "title": "A list of personas"
        },
        "nextCursor": {
          "type": "string",
          "description": "A string indicating the starting position of the next set of results. The client should pass this in the\nthe next request."
        },
        "hasMore": {
          "type": "boolean",
          "description": "A bool indicating if there are more results to be paged through."
        }
      },
      "title": "Response message for IAM.ListPersonas"
    },
    "v1MultiValueAttribute": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Represents a key-[]value pair used for representing the known attributes on a subject, as well as replace\nin IAM.MutateSubject."
    },
    "v1MutateAttributesRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "description": "Context is required which indicates the specific persona of a given subject."
        },
        "subjectId": {
          "type": "string",
          "description": "The subject id to mutate."
        },
        "mutations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Mutation"
          },
          "description": "A list of mutations that will be applied atomically."
        }
      },
      "title": "Request message for IAM.MutateAttributes"
    },
    "v1Mutation": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/v1SingleValueAttribute",
          "description": "Deprecated: use add_attributes instead\nWill add the value to the list of values at that key or if it doesnt exist will set the attribute\nto the given value."
        },
        "replace": {
          "$ref": "#/definitions/v1MultiValueAttribute",
          "description": "Deprecated: use replace_attributes instead\nReplace will delete the values at the given key and use the given list of values in its place."
        },
        "remove": {
          "$ref": "#/definitions/v1SingleValueAttribute",
          "title": "Deprecated: use remove_attributes instead\nRemove will delete the values at the given key"
        },
        "dropKey": {
          "type": "string",
          "title": "Will drop the key specified. Use periods to drop inner keys (name.inner_name)"
        },
        "replaceAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "Will set and replace the keys in the struct to the corresponding attributes"
        },
        "addAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "Will add values to the corresponding attributes"
        },
        "removeAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "Will remove values from the corresponding attributes"
        }
      },
      "description": "Mutation mutates a subject in a MutateSubject request."
    },
    "v1NamespacedContext": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Indicates a context that is scoped to a type/namespace pair."
    },
    "v1NamespacedSession": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Deprecated: Ignored because a token already uniquely identifies a user"
        },
        "session": {
          "type": "string",
          "title": "A session token (aka an IAM identity token)"
        }
      }
    },
    "v1OrderByDirection": {
      "type": "string",
      "enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "default": "ASCENDING",
      "title": "Indicates the sort order for IAM.SearchSubject"
    },
    "v1Persona": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/v1Subject"
        },
        "context": {
          "$ref": "#/definitions/v1Context"
        }
      },
      "description": "A Persona is a Subject and Context combination that provides the ability for cross context usage for a single subject."
    },
    "v1Query": {
      "type": "object",
      "properties": {
        "searchTerm": {
          "type": "string"
        },
        "attributeKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Query allows callers of IAM.SearchSubject to do full text search against the attributes of a scoped set of subjects.\nsearch_term will be queried against the supplied set of attribute keys."
    },
    "v1RegisterSubjectRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "title": "Context of the persona"
        },
        "email": {
          "type": "string",
          "title": "The email of the persona"
        },
        "password": {
          "type": "string",
          "title": "The plain text password to set for the persona"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultiValueAttribute"
          },
          "description": "Deprecated: use struct_attributes instead\nThe set of attributes that belong to the subject persona."
        },
        "structAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "description": "The set of struct attributes that belong to the subject persona."
        }
      },
      "title": "Request message for IAM.RegisterSubject"
    },
    "v1RegisterSubjectResponse": {
      "type": "object",
      "properties": {
        "subjectId": {
          "type": "string",
          "description": "The newly generated subject persona ID."
        }
      },
      "title": "Response message for IAM.RegisterSubject"
    },
    "v1RemoveKeyRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Deprecated: use user_identifier instead\nThe email of the subject to remove a key from."
        },
        "context": {
          "$ref": "#/definitions/v1Context",
          "title": "Deprecated: use user_identifier instead"
        },
        "keyId": {
          "type": "string",
          "description": "The id of the public key to delete. Tokens signed by the corresponding private key will no longer be considered valid by IAM."
        },
        "userIdentifier": {
          "$ref": "#/definitions/iamv1UserIdentifier",
          "description": "The identifier for the user to remove a key from."
        }
      },
      "title": "Request message from IAM.RemoveKey"
    },
    "v1ResetPasswordTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "A one-time-use, time-sensitive JWT that can only be used to reset the password.\nThe one-time-use condition will be enforced using the current password hash as part of the signing secret"
        }
      },
      "title": "Response for UserIAM.GetResetPasswordToken"
    },
    "v1ResetPasswordWithTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "The token returned in ResetPasswordTokenResponse"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1ResourceIdentifier": {
      "type": "object",
      "properties": {
        "identifiers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ValueList"
          },
          "description": "identifiers is a set of parameters that a resource owner needs to identify a resource."
        }
      },
      "description": "ResourceIdentifier is a set of identifiers that a resource owner needs to identify a resource."
    },
    "v1ResourceOwner": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "title": "app_id is a unique identifier for the registrant. It must be unique across all IAM resource owners. (eg \"VBC\")"
        },
        "appName": {
          "type": "string",
          "title": "app_name is the human readable name of the application registering as a Resource Owner (eg \"Vendasta Business Center\")"
        }
      },
      "description": "ResourceOwner is an application that owns one or many distinct resources."
    },
    "v1SearchSubjectRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1Context",
          "description": "Context is required, which scopes the search to a specific set of personas."
        },
        "query": {
          "$ref": "#/definitions/v1Query",
          "description": "Query will be used as a full text search query with partial matching."
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SingleValueAttribute"
          },
          "description": "Filters will be applied as a boolean filter with no partial matching."
        },
        "orderBy": {
          "type": "string",
          "description": "Indicates the attribute to order by."
        },
        "orderByDirection": {
          "$ref": "#/definitions/v1OrderByDirection",
          "description": "Indicates to sort by ascending or descending."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        },
        "fieldMask": {
          "$ref": "#/definitions/iamv1FieldMask",
          "description": "A field mask to apply to the results returned."
        }
      },
      "title": "Request message for IAM.SearchSubject"
    },
    "v1SearchSubjectResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SubjectResult"
          },
          "description": "A list of results that matched the given search criteria."
        },
        "nextCursor": {
          "type": "string",
          "description": "A string indicating the starting position of the next set of results. The client should pass this in the\nthe next request."
        },
        "hasMore": {
          "type": "boolean",
          "description": "A bool indicating if there are more results to be paged through."
        },
        "totalResults": {
          "type": "string",
          "format": "int64",
          "description": "An int64 indicating the total number of results returned by the query."
        }
      },
      "title": "Response message for IAM.SearchSubject"
    },
    "v1SingleValueAttribute": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Represents a key-value pair for adding/removing values in mutate, as well as filtering results in IAM.SearchSubject."
    },
    "v1Subject": {
      "type": "object",
      "properties": {
        "subjectId": {
          "type": "string",
          "description": "A subject ID is a globally unique id across all personas and contexts."
        },
        "email": {
          "type": "string",
          "description": "Email of the subject."
        },
        "userId": {
          "type": "string",
          "title": "User ID that the subject belongs to"
        },
        "partnerId": {
          "type": "string",
          "description": "The partner ID that the subject belongs to."
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultiValueAttribute"
          },
          "description": "Deprecated: use struct_attributes instead\nThe set of attributes that belongs to the subject persona."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The time when the subject persona was created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the subject peronsa was last updated."
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "title": "Deprecated: use last_login on the User message instead.\nThe time when the subject peronsa last authenticated with IAM.AuthenticateSubject"
        },
        "publicKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv1PublicKey"
          },
          "description": "Public keys that are able to validate tokens issued by the subject."
        },
        "structAttributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "description": "The set of struct attributes that belong to the subject persona."
        }
      },
      "description": "A subject represents a specific persona for a specified context."
    },
    "v1SubjectCredentials": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "A subjects email password combination"
    },
    "v1SubjectResult": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/v1Subject"
        }
      },
      "description": "A SubjectResult wraps a subject since nil values are not allowed in a repeated set. Therefore subject can be nil."
    },
    "v1TypedContext": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "description": "Indicates a context that is scoped to a type."
    },
    "v1UnarchiveAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "$ref": "#/definitions/v1FieldSchemaIdentifier"
        }
      }
    },
    "v1UpdateAuxiliaryDataFieldSchemaRequest": {
      "type": "object",
      "properties": {
        "fieldSchema": {
          "$ref": "#/definitions/v1AuxiliaryDataFieldSchema"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask",
          "description": "Supported updates for name, and description only at this time."
        }
      }
    },
    "v1UpsertAuxiliaryDataRequest": {
      "type": "object",
      "properties": {
        "auxiliaryDataObjectId": {
          "$ref": "#/definitions/v1AuxiliaryDataObjectID"
        },
        "fieldDataUpsertOperations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FieldDataUpsertOperation"
          }
        }
      }
    },
    "v1ValueList": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ValueList is a holder for multiple string values in order to be compatible with map declarations"
    },
    "v2AccessResourceResponse": {
      "type": "object",
      "properties": {
        "explanation": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "aiExplanation": {
          "type": "string"
        }
      }
    },
    "v2AddClientKeyRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "description": "The user to add a new client key for."
        },
        "algorithmType": {
          "$ref": "#/definitions/iamv2AlgorithmType",
          "title": "The type of key to add"
        }
      }
    },
    "v2AddClientKeyResponse": {
      "type": "object",
      "properties": {
        "privateKey": {
          "type": "string",
          "description": "The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again."
        },
        "clientKeyId": {
          "type": "string",
          "description": "The identifier of the matching public key."
        }
      }
    },
    "v2AddUserRoleRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to update"
        },
        "roleId": {
          "type": "string",
          "description": "The type of role, e.g. \"smb\", \"partner\", etc.\nYour service must own a given role in order to add it to a user."
        },
        "attributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "Attributes associated with the role.\nThese are used in conjunction with policies for Access Checks"
        }
      }
    },
    "v2Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "Street Address"
        },
        "city": {
          "type": "string",
          "title": "Name of the city"
        },
        "postalCode": {
          "type": "string",
          "title": "Postal code/zip"
        },
        "country": {
          "type": "string",
          "title": "Country code: ISO code 3166 format (CA, US)"
        },
        "state": {
          "type": "string",
          "title": "State code: ISO code 3166-2 format (CA-SK, US-FL)"
        },
        "additionalAddress": {
          "type": "string",
          "title": "Additional address line"
        }
      }
    },
    "v2CallbackResourceData": {
      "type": "object",
      "properties": {
        "requiredResourceParameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceOwnerServiceUrl": {
          "type": "string"
        },
        "resourceOwnerAudience": {
          "type": "string"
        }
      }
    },
    "v2ChangePasswordRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to attempt to change their password for"
        },
        "currentPassword": {
          "type": "string",
          "title": "The current password the user has"
        },
        "newPassword": {
          "type": "string",
          "title": "The desired new password"
        }
      }
    },
    "v2CreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/iamv2User",
          "title": "User properties to include on the created user.\nUserID should be left blank as it will be generated by the server\nUserRoles should be left blank, add them with \"AddUserRole\""
        },
        "typedExternalIdentifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2TypedExternalIdentifier"
          },
          "description": "Optionally used to store the ids of the user in the system that triggered the create user request."
        }
      }
    },
    "v2CreateUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "v2DeletePolicyRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      }
    },
    "v2DeleteResourceAndPoliciesRequest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        }
      }
    },
    "v2ExchangeClientKeyAssertionRequest": {
      "type": "object",
      "properties": {
        "assertion": {
          "type": "string",
          "description": "'assertion' is a JWT credential signed by a Client Private Key.\nVax will typically handle all of this for you.\n\nExample claims:\n{\n     iss: my-app-id-or-pid\n     aud: vendasta.com\n     sub: my-subject@service-account.vendasta.com\n     kid: my-public-key-id\n     /* other claims like exp, iat, as normal */\n}"
        }
      }
    },
    "v2ExchangeClientKeyAssertionResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "token is an IAM token"
        }
      }
    },
    "v2GetResetPasswordTokenResponse": {
      "type": "object",
      "properties": {
        "resetPasswordToken": {
          "type": "string",
          "description": "A one-time-use, time-sensitive token that can only be used to reset the password."
        }
      }
    },
    "v2GetTokenForUserRequest": {
      "type": "object",
      "properties": {
        "subjectId": {
          "type": "string",
          "title": "subject_id of the user"
        },
        "email": {
          "type": "string",
          "title": "email of the user"
        },
        "userId": {
          "type": "string",
          "title": "user id of the user"
        },
        "refreshToken": {
          "type": "string",
          "title": "refresh token given by a previous call of get session"
        },
        "clientAssertion": {
          "type": "string",
          "title": "Assertion signed by a private key provided by a client using 2-legged oauth flow"
        },
        "federatedIdentityProvider": {
          "type": "string",
          "title": "The name of the Identity Provider used to federate identity, e.g. google"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes to be added to the access token"
        },
        "clientId": {
          "type": "string",
          "description": "The client id that the session is being created for.\nIf an client_id is not passed, the client_id will fall back to IAM as the client_id.\nFor OAuth2 a client_id should always be given, unless providing a client_assertion as your ID."
        },
        "nonce": {
          "type": "string",
          "title": "When an ID token is generated, a nonce field is used for to associate the client to the given id token and\nmitigate replay attacks.\nhttps://openid.net/specs/openid-connect-core-1_0.html#IDToken"
        },
        "impersonateeUserId": {
          "type": "string",
          "title": "The user ID of the user being impersonated (optional)"
        },
        "serviceProviderId": {
          "type": "string",
          "title": "Service provider id that the tokens are to be made for and returned to"
        },
        "legacyUserId": {
          "type": "string",
          "description": "legacy_user_id is the subject ID that acted as the user ID in ssov3 marketplace integrations\nSome vendors use this to maintain backwards compatibility with marketplace APIs."
        },
        "consentingUserId": {
          "type": "string",
          "description": "The user ID of the person who provided consent for the scopes of a service account user.\nThis field is primarily used when tokens are issued to automations where we want\nto track the user who activated the automation on behalf of the service account."
        },
        "validAt": {
          "type": "string",
          "format": "date-time",
          "description": "The token's validity start time."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "The token's validity expiration time."
        }
      }
    },
    "v2GetTokenForUserResponse": {
      "type": "object",
      "properties": {
        "identityToken": {
          "type": "string",
          "description": "An IAM identity token, which is different than oidc_identity_token."
        },
        "accessToken": {
          "type": "string",
          "title": "An IAM access token"
        },
        "refreshToken": {
          "type": "string",
          "title": "A refresh token for the iam access token"
        },
        "oidcIdentityToken": {
          "type": "string",
          "title": "An OpenID Connect ID Token.\nhttps://openid.net/specs/openid-connect-core-1_0.html#IDToken"
        }
      },
      "title": "Response iam.v2.IAMSSO/GetTokenForUser"
    },
    "v2LinkedIn": {
      "type": "object",
      "properties": {
        "publicProfileId": {
          "type": "string",
          "title": "Public profile identifier used to build Linkedin public profile URL, e.g.: 'https://www.linkedin.com/in/${public_profile_id}'"
        }
      }
    },
    "v2ListResourcesRequest": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        },
        "filters": {
          "$ref": "#/definitions/v2ListResourcesRequestFilters"
        },
        "searchTerm": {
          "type": "string"
        }
      }
    },
    "v2ListResourcesRequestFilters": {
      "type": "object",
      "properties": {
        "roleTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that support at least one of the specified role types"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that contain at least one of the specified resource ids"
        },
        "resourceAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that contain at least one of the specified resource attributes"
        },
        "subjectAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that contain at least one of the specified subject attributes on its policies"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that contain at least one of the specified actions on its policies"
        },
        "appIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter to resources that contain at least one of the specified app ids"
        }
      }
    },
    "v2ListResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Resource"
          }
        },
        "nextCursor": {
          "type": "string"
        },
        "hasMore": {
          "type": "boolean"
        }
      }
    },
    "v2ListUserRolesMetadataRequest": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Limit the number of results"
        },
        "cursor": {
          "type": "string",
          "title": "Cursor to begin the list from"
        }
      }
    },
    "v2ListUserRolesMetadataResponse": {
      "type": "object",
      "properties": {
        "userRoleMetadatas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UserRoleMetadata"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata",
          "title": "Paging info"
        }
      }
    },
    "v2OneTimePasswordCredentials": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "user's id"
        },
        "oneTimePassword": {
          "type": "string",
          "title": "user's one time password"
        }
      },
      "title": "A user and a one time password"
    },
    "v2PasswordCredentials": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "user's email"
        },
        "password": {
          "type": "string",
          "title": "user's password"
        }
      },
      "title": "A users email password combination"
    },
    "v2PhoneNumber": {
      "type": "object",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "title": "The phone number stored in the tel RFC3966 format https://tools.ietf.org/html/rfc3966"
        },
        "phoneNumberType": {
          "$ref": "#/definitions/v2PhoneNumberType",
          "title": "Type of the phone number"
        }
      }
    },
    "v2PhoneNumberType": {
      "type": "string",
      "enum": [
        "PHONE_NUMBER_TYPE_INVALID",
        "PHONE_NUMBER_TYPE_WORK",
        "PHONE_NUMBER_TYPE_HOME",
        "PHONE_NUMBER_TYPE_MOBILE",
        "PHONE_NUMBER_TYPE_FAX",
        "PHONE_NUMBER_TYPE_PAGER"
      ],
      "default": "PHONE_NUMBER_TYPE_INVALID"
    },
    "v2RegisterUserRoleMetadataRequest": {
      "type": "object",
      "properties": {
        "userRoleMetadata": {
          "$ref": "#/definitions/v2UserRoleMetadata",
          "title": "A description of the role being registered"
        }
      }
    },
    "v2RemoveClientKeyRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to remove the key from"
        },
        "clientKeyId": {
          "type": "string",
          "title": "The identifier for the key to remove"
        }
      }
    },
    "v2RemoveUserRoleRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to update"
        },
        "roleId": {
          "type": "string",
          "description": "The type of role, e.g. \"smb\", \"partner\", etc.\nYour service must own a given role in order to remove it from a user."
        }
      }
    },
    "v2ReplaceResourceRequest": {
      "type": "object",
      "properties": {
        "ownerId": {
          "type": "string",
          "description": "Which service owns this resource\nShould be \"lower-kebab-case\"."
        },
        "resourceKind": {
          "type": "string",
          "title": "An identifier for the resource; previously \"resource_id\".\nShould be \"lower-kebab-case\""
        },
        "resourceDescription": {
          "type": "string",
          "description": "A human-readable description of when this resource is used for access checks."
        },
        "policies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/policiesPolicyNode"
          },
          "title": "map of action to policy for this resource"
        },
        "version": {
          "type": "string",
          "description": "DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource\nIf the specified version is the same as the current resource version updates will not be applied\nDecreasing the version will update the resource but will not rollback to a previous state."
        },
        "callbackResourceData": {
          "$ref": "#/definitions/v2CallbackResourceData",
          "description": "Contains data required for registering callback resources."
        }
      }
    },
    "v2RequestShortOTPCodeRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "The email user tries to sign in with"
        }
      }
    },
    "v2RequestShortOTPCodeResponse": {
      "type": "object"
    },
    "v2ResetPasswordRequest": {
      "type": "object",
      "properties": {
        "resetPasswordToken": {
          "type": "string",
          "title": "The password reset token which was sent in a password reset email"
        },
        "newPassword": {
          "type": "string",
          "title": "The new password to set on the user"
        },
        "invalidateActiveSessions": {
          "type": "boolean",
          "title": "Invalidates user's active sessions if reset was successful"
        }
      }
    },
    "v2Resource": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "vstoreLink": {
          "type": "string"
        },
        "callbackResourceData": {
          "$ref": "#/definitions/v2CallbackResourceData"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2Policy"
          }
        },
        "supportedRoleTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The inferred set of resource attributes"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Inferred list of actions across all policies on the resource"
        },
        "version": {
          "type": "string",
          "title": "DEPRECATED: Semantic version (vX.X.X) used to track updates to a resource"
        }
      }
    },
    "v2SearchUsersRequest": {
      "type": "object",
      "properties": {
        "searchTerm": {
          "type": "string"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor allows paging of results, the next_cursor returned by the last response is expected."
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to return."
        }
      }
    },
    "v2SearchUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/iamv2User"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata",
          "title": "Paging info"
        }
      }
    },
    "v2SendOneTimePasswordEmailRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "User ID to send the email to"
        },
        "templateId": {
          "type": "string",
          "title": "the template id to use for the email"
        },
        "parameters": {
          "type": "object",
          "title": "Substitution parameters\nSupports dot pathing in the template content; for example, given `productName['.Workflow.Step1.ProductId']` will go Workflow \u003e Step1 \u003e ProductId into\nparameters and get the associated value"
        },
        "subject": {
          "type": "string",
          "title": "the subject of the email"
        },
        "nextUrl": {
          "type": "string",
          "title": "Provide a url for the user to navigate to after exchanging the OTP for a session"
        },
        "nextUrlButtonText": {
          "type": "string",
          "title": "Provide the text for the button the user will click to navigate to the provided next_url"
        }
      }
    },
    "v2UpdateUserRoleRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "title": "The user to update"
        },
        "roleId": {
          "type": "string",
          "description": "The type of role, e.g. \"smb\", \"partner\", etc.\nYour service must own a given role in order to add it to a user."
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UpdateUserRoleRequestOperation"
          },
          "title": "The role updates to perform"
        }
      }
    },
    "v2UpdateUserRoleRequestOperation": {
      "type": "object",
      "properties": {
        "dropAttributeKey": {
          "type": "string"
        },
        "replaceAttributes": {
          "$ref": "#/definitions/attributesStructAttribute"
        },
        "addAttributes": {
          "$ref": "#/definitions/attributesStructAttribute"
        },
        "removeAttributes": {
          "$ref": "#/definitions/attributesStructAttribute"
        }
      }
    },
    "v2UpsertExternalIDRequest": {
      "type": "object",
      "properties": {
        "userIdentifier": {
          "$ref": "#/definitions/iamv2UserIdentifier",
          "description": "The identifier for the user to update/insert an external id for."
        },
        "typedExternalIdentifier": {
          "$ref": "#/definitions/iamv2TypedExternalIdentifier",
          "description": "The type and value of external ID to insert/update."
        }
      }
    },
    "v2UpsertPartnerLimitsRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "Partner ID"
        },
        "limitsId": {
          "type": "string",
          "title": "ID that maps to the limits of the Partner"
        }
      }
    },
    "v2UserAndImpersonateeId": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "impersonateeId": {
          "type": "string"
        }
      }
    },
    "v2UserPropertyMask": {
      "type": "object",
      "properties": {
        "includeRoles": {
          "type": "boolean",
          "title": "Whether to include the user roles in the response\nDeprecated, roles are always included"
        }
      },
      "title": "Allow including additional user data"
    },
    "v2UserRole": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "description": "The type of role, e.g. \"smb\", \"partner\", etc."
        },
        "attributes": {
          "$ref": "#/definitions/attributesStructAttribute",
          "title": "Additional attributes associated with the role.\nThese are used in conjunction with policies for Access Checks"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "When this role was first created on this user"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "When this role was last updated on this user"
        }
      },
      "description": "A user has many roles\nRoles contain attributes which are used in access checks."
    },
    "v2UserRoleMetadata": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "title": "The role's identifier, e.g. digital_agent, smb, partner"
        },
        "ownerUserId": {
          "type": "string",
          "description": "The user who owns this role (typically a service account)\nOnly the owner of a role are allowed to edit or view that role's attributes for a user."
        },
        "name": {
          "type": "string",
          "title": "Human readable name for the role\nE.g. \"Digital Agent\""
        },
        "description": {
          "type": "string",
          "title": "What is this role used for?"
        }
      }
    },
    "v2VerifyEmailResponse": {
      "type": "object",
      "properties": {
        "otpCode": {
          "type": "string",
          "title": "OTP Code, if requested"
        }
      }
    },
    "vendastatypesFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "vendastatypesPagedRequestOptions": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor can be passed to retrieve the next page of results keyed by the cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "page_size specifies the number of items to return in the next page"
        }
      }
    },
    "vendastatypesPagedResponseMetadata": {
      "type": "object",
      "properties": {
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        },
        "totalResults": {
          "type": "string",
          "format": "int64",
          "title": "The total number of results. This is not supported on all paged apis and will be 0 if it is not supported"
        }
      }
    }
  }
}
