{
  "swagger": "2.0",
  "info": {
    "title": "meetings/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MeetingSourceAPI"
    },
    {
      "name": "GoogleMeet"
    },
    {
      "name": "Zoom"
    },
    {
      "name": "ReserveWithGoogle"
    },
    {
      "name": "MeetingHost"
    },
    {
      "name": "MeetingGuest"
    },
    {
      "name": "MeetingBotAPI"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/meetings.v1.GoogleMeet/CreateMeeting": {
      "post": {
        "operationId": "GoogleMeet_CreateMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GoogleMeetCreateMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request body for creating a google-mmet meeting.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GoogleMeetCreateMeetingRequest"
            }
          }
        ],
        "tags": [
          "GoogleMeet"
        ]
      }
    },
    "/meetings.v1.MeetingBotAPI/ScheduleBot": {
      "post": {
        "operationId": "MeetingBotAPI_ScheduleBot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ScheduleBotRequest"
            }
          }
        ],
        "tags": [
          "MeetingBotAPI"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/BookMeeting": {
      "post": {
        "operationId": "MeetingGuest_BookMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BookMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/CancelMeeting": {
      "post": {
        "operationId": "MeetingGuest_CancelMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GuestCancelMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetCalendar": {
      "post": {
        "summary": "Gets branding data for an individual host or calendar (collection of hosts)",
        "operationId": "MeetingGuest_GetCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCalendarRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetGroup": {
      "post": {
        "operationId": "MeetingGuest_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetGroupRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetGuestBookedMeeting": {
      "post": {
        "operationId": "MeetingGuest_GetGuestBookedMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GuestGetBookedMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GuestGetBookedMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetHost": {
      "post": {
        "summary": "Gets branding data only for an individual host; Will 404 on calendarIDs that don't map to an individual host",
        "operationId": "MeetingGuest_GetHost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetHostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetHostRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetMeetingType": {
      "post": {
        "operationId": "MeetingGuest_GetMeetingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMeetingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMeetingTypeRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/GetService": {
      "post": {
        "operationId": "MeetingGuest_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetServiceRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/IsHostConfigured": {
      "post": {
        "operationId": "MeetingGuest_IsHostConfigured",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GuestIsHostConfiguredResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GuestIsHostConfiguredRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/ListAvailableTimeSlots": {
      "post": {
        "operationId": "MeetingGuest_ListAvailableTimeSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAvailableTimeSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAvailableTimeSlotsRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/ListMeetingTypes": {
      "post": {
        "operationId": "MeetingGuest_ListMeetingTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMeetingTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMeetingTypesRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingGuest/RescheduleMeeting": {
      "post": {
        "operationId": "MeetingGuest_RescheduleMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GuestRescheduleMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingGuest"
        ]
      }
    },
    "/meetings.v1.MeetingHost/BookMeeting": {
      "post": {
        "operationId": "MeetingHost_BookMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HostBookMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HostBookMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/BuildHostId": {
      "post": {
        "operationId": "MeetingHost_BuildHostId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuildHostIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BuildHostIdRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CalendarMigration": {
      "post": {
        "operationId": "MeetingHost_CalendarMigration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarMigrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CancelMeeting": {
      "post": {
        "operationId": "MeetingHost_CancelMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CancelMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CheckGroupOrServiceSlugExist": {
      "post": {
        "operationId": "MeetingHost_CheckGroupOrServiceSlugExist",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckGroupOrServiceSlugExistResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckGroupOrServiceSlugExistRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateAvailability": {
      "post": {
        "operationId": "MeetingHost_CreateAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateCalendar": {
      "post": {
        "operationId": "MeetingHost_CreateCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCalendarRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateDefaultMeetingTypes": {
      "post": {
        "summary": "An idempotent operation that ensures the host has initial meeting types.\nThis is a no-op if the calendar already has meeting types",
        "operationId": "MeetingHost_CreateDefaultMeetingTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDefaultMeetingTypesRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateGroup": {
      "post": {
        "operationId": "MeetingHost_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateMeetingType": {
      "post": {
        "operationId": "MeetingHost_CreateMeetingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateMeetingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMeetingTypeRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/CreateService": {
      "post": {
        "operationId": "MeetingHost_CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateServiceRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/DeleteAvailability": {
      "post": {
        "operationId": "MeetingHost_DeleteAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/DeleteGroup": {
      "post": {
        "operationId": "MeetingHost_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteGroupRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/DeleteMeetingType": {
      "post": {
        "operationId": "MeetingHost_DeleteMeetingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteMeetingTypeRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/DeleteService": {
      "post": {
        "operationId": "MeetingHost_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteServiceRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/DoesCalendarExist": {
      "post": {
        "operationId": "MeetingHost_DoesCalendarExist",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DoesCalendarExistResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DoesCalendarExistRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/EnsureGroupCalendarsExist": {
      "post": {
        "operationId": "MeetingHost_EnsureGroupCalendarsExist",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EnsureGroupCalendarsExistResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EnsureGroupCalendarsExistRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/EnsurePersonalCalendarExists": {
      "post": {
        "summary": "These Ensure RPCs are used in meeting scheduler during setup.\nA personal calendar should automatically exist for users who start using Meeting Scheduler.\nA group calendar should automatically exist for sales teams and businesses.",
        "operationId": "MeetingHost_EnsurePersonalCalendarExists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EnsurePersonalCalendarExistsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EnsurePersonalCalendarExistsRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetCalendar": {
      "post": {
        "operationId": "MeetingHost_GetCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HostGetCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HostGetCalendarRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetEntityAssociations": {
      "post": {
        "summary": "Fetch group \u0026 service menus linked to entity (either event type or group)",
        "operationId": "MeetingHost_GetEntityAssociations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEntityAssociationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetEntityAssociationRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetGroup": {
      "post": {
        "operationId": "MeetingHost_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetGroupRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetHostMeeting": {
      "post": {
        "operationId": "MeetingHost_GetHostMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetHostMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetHostMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetHostPreferences": {
      "post": {
        "operationId": "MeetingHost_GetHostPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetHostPreferencesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetHostPreferencesRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetHostsForCalendar": {
      "post": {
        "operationId": "MeetingHost_GetHostsForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetHostsForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetHostsForCalendarRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetMeetingType": {
      "post": {
        "operationId": "MeetingHost_GetMeetingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HostGetMeetingTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HostGetMeetingTypeRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetMeetingTypesForCalendars": {
      "post": {
        "operationId": "MeetingHost_GetMeetingTypesForCalendars",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMeetingTypesForCalendarsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMeetingTypesForCalendarsRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/GetService": {
      "post": {
        "operationId": "MeetingHost_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetServiceRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/HostBookMeeting": {
      "post": {
        "summary": "Allow host to book meeting with clients from My meeting page (CRM)",
        "operationId": "MeetingHost_HostBookMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BookMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/IsCalendarConfigured": {
      "post": {
        "operationId": "MeetingHost_IsCalendarConfigured",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsCalendarConfiguredResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IsCalendarConfiguredRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/IsHostConfigured": {
      "post": {
        "operationId": "MeetingHost_IsHostConfigured",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsHostConfiguredResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IsHostConfiguredRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/ListAvailability": {
      "post": {
        "operationId": "MeetingHost_ListAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/ListBookedMeetings": {
      "post": {
        "operationId": "MeetingHost_ListBookedMeetings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBookedMeetingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListBookedMeetingsRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/ListGroups": {
      "post": {
        "operationId": "MeetingHost_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListGroupsRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/ListMeetingTypes": {
      "post": {
        "operationId": "MeetingHost_ListMeetingTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HostListMeetingTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HostListMeetingTypesRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/ListServices": {
      "post": {
        "operationId": "MeetingHost_ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/RescheduleMeeting": {
      "post": {
        "operationId": "MeetingHost_RescheduleMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RescheduleMeetingRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/SendMeetingRequestEmail": {
      "post": {
        "operationId": "MeetingHost_SendMeetingRequestEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendMeetingRequestEmailRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/SetGeneralAvailability": {
      "post": {
        "operationId": "MeetingHost_SetGeneralAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetGeneralAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateAvailability": {
      "post": {
        "operationId": "MeetingHost_UpdateAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateCalendar": {
      "post": {
        "operationId": "MeetingHost_UpdateCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateCalendarRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateGroup": {
      "post": {
        "operationId": "MeetingHost_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateGroupRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateHostPreferences": {
      "post": {
        "operationId": "MeetingHost_UpdateHostPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateHostPreferencesRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateMeetingMetadata": {
      "post": {
        "summary": "Will only update metadata fields included in the request and leaves the old ones alone.",
        "operationId": "MeetingHost_UpdateMeetingMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMeetingMetadataRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateMeetingType": {
      "post": {
        "operationId": "MeetingHost_UpdateMeetingType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMeetingTypeRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingHost/UpdateService": {
      "post": {
        "operationId": "MeetingHost_UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateServiceRequest"
            }
          }
        ],
        "tags": [
          "MeetingHost"
        ]
      }
    },
    "/meetings.v1.MeetingSourceAPI/List": {
      "post": {
        "summary": "List lists all the available meeting sources for the given user.",
        "operationId": "MeetingSourceAPI_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeetingSourceListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MeetingSourceListRequest"
            }
          }
        ],
        "tags": [
          "MeetingSourceAPI"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/BatchAvailabilityLookup": {
      "post": {
        "operationId": "ReserveWithGoogle_BatchAvailabilityLookup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3BatchAvailabilityLookupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3BatchAvailabilityLookupRequest"
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/CreateBooking": {
      "post": {
        "operationId": "ReserveWithGoogle_CreateBooking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3CreateBookingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to create a Booking for an inventory slot. Consumes the lease if\nprovided.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3CreateBookingRequest"
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/GetBookingStatus": {
      "post": {
        "operationId": "ReserveWithGoogle_GetBookingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3GetBookingStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to get booking status and prepayment status for a Booking.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3GetBookingStatusRequest"
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/HealthCheck": {
      "post": {
        "operationId": "ReserveWithGoogle_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/ListBookings": {
      "post": {
        "operationId": "ReserveWithGoogle_ListBookings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ListBookingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3ListBookingsRequest"
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.ReserveWithGoogle/UpdateBooking": {
      "post": {
        "operationId": "ReserveWithGoogle_UpdateBooking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3UpdateBookingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to update a Booking.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v3UpdateBookingRequest"
            }
          }
        ],
        "tags": [
          "ReserveWithGoogle"
        ]
      }
    },
    "/meetings.v1.Zoom/CreateMeeting": {
      "post": {
        "operationId": "Zoom_CreateMeeting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateZoomMeetingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request body for creating a zoom meeting.\nPlease check https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate for more details.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateZoomMeetingRequest"
            }
          }
        ],
        "tags": [
          "Zoom"
        ]
      }
    }
  },
  "definitions": {
    "BookingFailureCause": {
      "type": "string",
      "enum": [
        "CAUSE_UNSPECIFIED",
        "SLOT_UNAVAILABLE",
        "SLOT_ALREADY_BOOKED_BY_USER",
        "LEASE_EXPIRED",
        "OUTSIDE_CANCELLATION_WINDOW",
        "PAYMENT_ERROR_CARD_TYPE_REJECTED",
        "PAYMENT_ERROR_CARD_DECLINED",
        "PAYMENT_OPTION_NOT_VALID",
        "PAYMENT_ERROR",
        "USER_CANNOT_USE_PAYMENT_OPTION",
        "BOOKING_ALREADY_CANCELLED",
        "BOOKING_NOT_CANCELLABLE",
        "OVERLAPPING_RESERVATION",
        "USER_OVER_BOOKING_LIMIT",
        "OFFER_UNAVAILABLE",
        "DEAL_UNAVAILABLE",
        "PAYMENT_REQUIRES_3DS1"
      ],
      "default": "CAUSE_UNSPECIFIED",
      "description": " - CAUSE_UNSPECIFIED: Default value: Don't use; amounts to an \"unknown error\"\n - SLOT_UNAVAILABLE: The referenced availability slot is not available any longer.\n - SLOT_ALREADY_BOOKED_BY_USER: The user has already booked an appointment for the referenced\navailability slot.\n - LEASE_EXPIRED: The lease (if provided) has expired and cannot be used any longer to\ncomplete the requested booking.\n - OUTSIDE_CANCELLATION_WINDOW: The requested cancellation cannot be performed at the current time due\nto time restrictions in the merchant's cancellation policy.\n - PAYMENT_ERROR_CARD_TYPE_REJECTED: An error was encountered while processing the payment because the\nprovided credit card type was not accepted by the merchant. The credit\ncard type must be supplied in rejected_card_type.\n - PAYMENT_ERROR_CARD_DECLINED: An error was encountered while processing the payment because the\nprovided credit card was declined.\n - PAYMENT_OPTION_NOT_VALID: An error was encountered with the pack/membership used to pay for the\nbooking. There could be no valid uses left, it could have expired, etc.\n - PAYMENT_ERROR: An error was encountered while processing the payment for this booking.\nUse this value to indicate a general payment related error, only if the\nerror does not match to a specific payment error above.\n - USER_CANNOT_USE_PAYMENT_OPTION: User cannot use the given payment option (e.g. user trying to use a\nfirst time price for the second time).\n - BOOKING_ALREADY_CANCELLED: A booking that the user tried to cancel has already been cancelled.\n - BOOKING_NOT_CANCELLABLE: A booking that the user tried to cancel is not cancellable.\n - OVERLAPPING_RESERVATION: User has an existing reservation too close to this time.\n - USER_OVER_BOOKING_LIMIT: Booking failed due to the user being over the aggregator's per-user\nbookings limit.\n - OFFER_UNAVAILABLE: Offer (previously \"Deal\") is unavailable for the provided slot. If the\nslot itself is unavailable, use SLOT_UNAVAILABLE instead.\n - PAYMENT_REQUIRES_3DS1: Set when payment is rejected because you are requesting that the\ntransaction be tried again, but this time after undergoing 3DS1\nchallenge/response.  Note that the current transaction's failure state\nwill stay failed.  The retry will be completely separate.\n\nWhen this is the failure reason, payment_failure.3DS1_parameters\nMUST be set.  If it is not, then the current cause will be treated as\nif it were PAYMENT_ERROR."
    },
    "PaymentInformationPaymentProcessedBy": {
      "type": "string",
      "enum": [
        "PAYMENT_PROCESSED_BY_UNSPECIFIED",
        "PROCESSED_BY_GOOGLE",
        "PROCESSED_BY_PARTNER"
      ],
      "default": "PAYMENT_PROCESSED_BY_UNSPECIFIED",
      "description": "Who handles payment processing?\nIf payment is processed by the partner, CreateBooking request will\ninclude additional parameters (PaymentProcessingParameters) indicating\nthe payment method to be used to process the payment."
    },
    "PaymentProcessingParametersPaymentProcessor": {
      "type": "string",
      "enum": [
        "PAYMENT_PROCESSOR_UNSPECIFIED",
        "PROCESSOR_STRIPE",
        "PROCESSOR_BRAINTREE"
      ],
      "default": "PAYMENT_PROCESSOR_UNSPECIFIED"
    },
    "TokenizationConfigAuthMethod": {
      "type": "string",
      "enum": [
        "AUTH_METHOD_UNSPECIFIED",
        "PAN_ONLY",
        "CRYPTOGRAM_3DS"
      ],
      "default": "AUTH_METHOD_UNSPECIFIED",
      "description": "Fields supported to authorize a card transaction.\n\nSee the GPay documentation at\nhttps://developers.google.com/pay/api/web/reference/object#CardParameters\n\n - PAN_ONLY: This authentication method is associated with payment cards stored on\nfile with the user's Google Account. Returned payment data includes\npersonal account number (PAN) with the expiration month and the\nexpiration year.\n - CRYPTOGRAM_3DS: This authentication method is associated with cards stored as Android\ndevice tokens. Returned payment data includes a 3-D Secure (3DS)\ncryptogram generated on the device."
    },
    "TokenizationConfigBillingInformationFormat": {
      "type": "string",
      "enum": [
        "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
        "MIN",
        "FULL"
      ],
      "default": "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
      "description": "How much of the Billing Address to require of the user and include in the\ntoken. The enum values correspond to parameters in the Google Pay API (see\nhttps://developers.google.com/pay/api/web/reference/object\\\n #BillingAddressParameters).\n\n - MIN: name, country code, and postal code (GPay default setting).\n - FULL: name, street address, locality, region, country code, and postal code"
    },
    "TokenizationConfigCardNetworkParameters": {
      "type": "object",
      "properties": {
        "cardNetwork": {
          "$ref": "#/definitions/v3CreditCardRestrictionsCreditCardType",
          "title": "The Card Network that these parameters are about"
        },
        "acquirerBin": {
          "type": "string",
          "description": "The Bank Identification Number of the acquiring bank used for processing\nof the card.\n\nIf this value is not known to you, you should ask your acquirer or\nmerchant processor representative."
        },
        "acquirerMerchantId": {
          "type": "string",
          "description": "The merchant identifier assigned by the acquirer to the merchant for use\nin transaction authorization (for Visa and American Express\ntransactions).\n\nIf this value is not known to you, you should ask the acquirer or\nmerchant processor representative."
        }
      },
      "description": "Per CardNetwork Processing information."
    },
    "partnerv3CreditCardType": {
      "type": "string",
      "enum": [
        "CREDIT_CARD_TYPE_UNSPECIFIED",
        "VISA",
        "MASTERCARD",
        "AMERICAN_EXPRESS",
        "DISCOVER",
        "JCB"
      ],
      "default": "CREDIT_CARD_TYPE_UNSPECIFIED",
      "description": "Used when booking/order failure cause is PAYMENT_ERROR_CARD_TYPE_REJECTED to\nindicate the type of credit card that was rejected.\n\n - CREDIT_CARD_TYPE_UNSPECIFIED: Default value. Used if credit card type does not match to one below."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typeDayOfWeek": {
      "type": "string",
      "enum": [
        "DAY_OF_WEEK_UNSPECIFIED",
        "MONDAY",
        "TUESDAY",
        "WEDNESDAY",
        "THURSDAY",
        "FRIDAY",
        "SATURDAY",
        "SUNDAY"
      ],
      "default": "DAY_OF_WEEK_UNSPECIFIED",
      "description": "Represents a day of the week.\n\n - DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.\n - MONDAY: Monday\n - TUESDAY: Tuesday\n - WEDNESDAY: Wednesday\n - THURSDAY: Thursday\n - FRIDAY: Friday\n - SATURDAY: Saturday\n - SUNDAY: Sunday"
    },
    "typeTimeOfDay": {
      "type": "object",
      "properties": {
        "hours": {
          "type": "integer",
          "format": "int32",
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose\nto allow the value \"24:00:00\" for scenarios like business closing time."
        },
        "minutes": {
          "type": "integer",
          "format": "int32",
          "description": "Minutes of hour of day. Must be from 0 to 59."
        },
        "seconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may\nallow the value 60 if it allows leap-seconds."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
        }
      },
      "description": "Represents a time of day. The date and time zone are either not significant\nor are specified elsewhere. An API may choose to allow leap seconds. Related\ntypes are [google.type.Date][google.type.Date] and\n`google.protobuf.Timestamp`."
    },
    "typeTimeZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "IANA Time Zone Database time zone, e.g. \"America/New_York\"."
        },
        "version": {
          "type": "string",
          "description": "Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
        }
      },
      "description": "Represents a time zone from the\n[IANA Time Zone Database](https://www.iana.org/time-zones)."
    },
    "v1Answer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1FormFieldType"
        },
        "answer": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Answers": {
      "type": "object",
      "properties": {
        "formAnswers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Answer"
          },
          "title": "The order of fields specified here is the order they will be displayed in"
        }
      }
    },
    "v1Attachment": {
      "type": "object",
      "properties": {
        "fileTitle": {
          "type": "string"
        },
        "fileUrl": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        }
      }
    },
    "v1Attendee": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "the first name of the attendee"
        },
        "lastName": {
          "type": "string",
          "title": "the last name of the attendee"
        },
        "email": {
          "type": "string",
          "title": "email of the attendee"
        },
        "phoneNumber": {
          "type": "string",
          "title": "phone number of the attendee"
        },
        "timeZone": {
          "type": "string"
        },
        "isPrimary": {
          "type": "boolean"
        }
      },
      "title": "TODO: For v2 of API, we'd like to merge Contact and Attendee into one message type"
    },
    "v1AvailabilityRule": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string"
        },
        "day": {
          "$ref": "#/definitions/typeDayOfWeek"
        },
        "timeSlot": {
          "$ref": "#/definitions/v1TimeRange"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone"
        }
      }
    },
    "v1BookMeetingRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/vendastatypesDateRange",
          "title": "Deprecated in favour of meeting_start and a calculated meeting end based on the event type duration"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Contact"
          }
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "start of the meeting must sent in the client's preferred time zone"
        },
        "comment": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata will include additional fields and be forwarded onto BookMeeting listeners.\nthe client will use this to pass along metadata from url parameters and additional form fields.\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Meeting-Metadata"
        },
        "formAnswers": {
          "$ref": "#/definitions/v1Answers"
        },
        "recaptchaToken": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1BookMeetingResponse": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1BuildHostIdRequest": {
      "type": "object",
      "properties": {
        "applicationContextProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application Context properties are properties that hold information for the purposes of a consumer-facing brand\nused when displaying partner attribution or following platform configurations.\nThis allows users with multiple consumer-facing brands / configurations (application contexts) to provide end-users\nwith the appropriate configuration and branding.\nIn Vendasta, this can take the form of a combination of the following:\n-\u003e partner_id: The partner id the user belongs to / acting on behalf of (Task Manager)\n-\u003e market_id: The market the user is operating under.\n-\u003e business_id: The business the user is operating under.\n-\u003e user_id: The user_id corresponding to the host.\nWhile the properties you initially provide are not important, it is currently important to communicate with Meeting Scheduler\nusing the same set of properties every time. Here are some guidelines:\nSalesperson: Don't use this. Instead, pass `subject_id` as the salespersonId. This could change in the future.\nTask Manager: don't use this. Use the current Task Manager id format TM_PID_ABC_MARKET_DEFAULT_USERID. This could change in the future.\nPartner: provide partner_id only.\nSMB: provide the business_id only. Determines what features of Meeting Scheduler the user has access to and allows them to perform actions on behalf of that business."
        },
        "userId": {
          "type": "string",
          "title": "The user_id of the user (not subjectId)"
        }
      }
    },
    "v1BuildHostIdResponse": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "description": "The host_id you can use for the rest of the APIs.\nThis is also suitable to use in the booking url (but prefer slugs from the host's preferences)."
        }
      }
    },
    "v1Calendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The immutable, generated, globally unique identifier of a calendar\nAttempting to set or mutate this will have no effect, use external_id"
        },
        "displayName": {
          "type": "string",
          "title": "The name of the calendar"
        },
        "displayProfileUrl": {
          "type": "string",
          "title": "Squared image for the calendar to be used as an icon"
        },
        "displayLogoUrl": {
          "type": "string",
          "title": "Larger image to be used as a banner for example"
        },
        "bookingUrl": {
          "type": "string",
          "title": "A valid, public URL to book a time slot on this calendar"
        },
        "slug": {
          "type": "string",
          "title": "A mutable namespaced identifier of this calendar for the purposes of building memorable URLs"
        },
        "externalId": {
          "type": "string",
          "title": "A mutable namespaced identifier of this calendar that has meaning to whoever created it\nThis is effectively the result of BuildHostId at this time"
        },
        "creatorUserId": {
          "type": "string",
          "title": "Who created the calendar"
        },
        "hostUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Who is a possible, but not necessarily available, host of the calendar (at least 1)"
        },
        "applicationContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Key-value pairs that provide context to the use of the calendar.\nThere is currently inflexible support for a handful of backend\nintegrations with other Vendasta data models to derive some of\nthe fields of the calendar. These known pairs are:\n  - external_integration: [v_sales_team, v_business]\n  - sales_team_id: G-123\n  - business_id: AG-123\nFor example, if you wanted to contextualize a sales team's calendar you would use:\n  {'external_integration': 'v_sales_team', 'sales_team_id': 'G-123'}\nIf you wanted to contextualize a business calendar you would use:\n  {'external_integration': 'v_business', 'business_id': 'AG-123'}\nIf you wanted to contextualize and individual salesperson you would use:\n  {'user_context': 'sales', 'partner_id': 'ABC', 'market_id': 'DEFAULT'}"
        },
        "calendarType": {
          "$ref": "#/definitions/v1CalendarType"
        },
        "encodedApplicationContext": {
          "type": "string"
        }
      }
    },
    "v1CalendarMigrationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "v1CalendarType": {
      "type": "string",
      "enum": [
        "CALENDAR_TYPE_INVALID",
        "CALENDAR_TYPE_PERSONAL",
        "CALENDAR_TYPE_GROUP"
      ],
      "default": "CALENDAR_TYPE_INVALID"
    },
    "v1CancelMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string",
          "title": "identifier for the meeting to cancel"
        },
        "cancellationReason": {
          "type": "string",
          "title": "an optional reason for the cancelation"
        }
      }
    },
    "v1CheckGroupOrServiceSlugExistRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "slugIdentifier": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "v1CheckGroupOrServiceSlugExistResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        }
      }
    },
    "v1Contact": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "The preferred timezone for all future contact with this guest\nEmpty timezone assumed to be UTC"
        },
        "isPrimary": {
          "type": "boolean"
        }
      },
      "title": "TODO: For v2 of API, we'd like to merge Contact and Attendee into one message type"
    },
    "v1CreateAvailabilityRequest": {
      "type": "object"
    },
    "v1CreateAvailabilityResponse": {
      "type": "object"
    },
    "v1CreateCalendarRequest": {
      "type": "object",
      "properties": {
        "calendar": {
          "$ref": "#/definitions/v1Calendar"
        }
      }
    },
    "v1CreateCalendarResponse": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string"
        }
      }
    },
    "v1CreateDefaultMeetingTypesRequest": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string",
          "title": "Deprecated in favour of calendar_ids instead"
        },
        "calendarIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateGroupRequest": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1CreateMeetingTypeRequest": {
      "type": "object",
      "properties": {
        "meetingType": {
          "$ref": "#/definitions/v1MeetingType"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1CreateMeetingTypeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1CreateServiceRequest": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1CreateServiceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1CreateZoomMeetingRequest": {
      "type": "object",
      "properties": {
        "iamUserId": {
          "type": "string",
          "description": "DEPRECATED: DO NOT use this param. The backend service will grab IAMUserID from request context."
        },
        "topic": {
          "type": "string",
          "title": "The topic will be used as the title of the meeting and will be visible to participants"
        },
        "type": {
          "$ref": "#/definitions/v1ZoomMeetingType"
        },
        "startTime": {
          "type": "string",
          "description": "Start time in UTC."
        },
        "duration": {
          "type": "string",
          "format": "int64",
          "description": "Duration in minutes."
        },
        "timezone": {
          "type": "string",
          "title": "See: https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones"
        },
        "password": {
          "type": "string",
          "description": "Password to join the meeting. Password may only contain the following character:[a-z A-Z 0-9 @-_*]. Max of 10 characters."
        },
        "agenda": {
          "type": "string",
          "description": "Meeting description."
        },
        "trackingFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomMeetingTrackingField"
          }
        },
        "recurrence": {
          "$ref": "#/definitions/v1ZoomMeetingRecurrence",
          "description": "Recurrence object. Use this object only for a meeting with type 8 i.e., a recurring meeting with fixed time."
        },
        "settings": {
          "$ref": "#/definitions/v1ZoomMeetingSettings"
        }
      },
      "description": "The request body for creating a zoom meeting.\nPlease check https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate for more details."
    },
    "v1CreateZoomMeetingResponse": {
      "type": "object",
      "properties": {
        "iamUserId": {
          "type": "string"
        },
        "meetingId": {
          "type": "string",
          "format": "int64"
        },
        "topic": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ZoomMeetingType"
        },
        "startTime": {
          "type": "string",
          "description": "Start time in UTC."
        },
        "duration": {
          "type": "string",
          "format": "int64",
          "description": "Duration in minutes."
        },
        "timezone": {
          "type": "string",
          "title": "See: https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones"
        },
        "createdAt": {
          "type": "string"
        },
        "agenda": {
          "type": "string"
        },
        "startUrl": {
          "type": "string"
        },
        "joinUrl": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "h323Password": {
          "type": "string",
          "description": "H.323/SIP room system password."
        },
        "pmi": {
          "type": "string",
          "format": "int64"
        },
        "trackingFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomMeetingTrackingField"
          }
        },
        "occurrences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomOccurrence"
          }
        },
        "settings": {
          "$ref": "#/definitions/v1ZoomMeetingSettings"
        },
        "recurrence": {
          "$ref": "#/definitions/v1ZoomMeetingRecurrence"
        }
      },
      "description": "The response body for creating a zoom meeting.\nPlease check https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate for more details."
    },
    "v1DeleteAvailabilityRequest": {
      "type": "object"
    },
    "v1DeleteGroupRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1DeleteMeetingTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1DeleteServiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1DoesCalendarExistRequest": {
      "type": "object",
      "properties": {
        "calendarIdentifier": {
          "type": "string",
          "title": "Any valid identifier for a calendar"
        }
      }
    },
    "v1DoesCalendarExistResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean",
          "title": "Whether a calendar with the given identifer exists already"
        }
      }
    },
    "v1EnsureGroupCalendarsExistRequest": {
      "type": "object",
      "properties": {
        "externalIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "external_id can be one of: a sales team id, a business id (agid)."
        }
      }
    },
    "v1EnsureGroupCalendarsExistResponse": {
      "type": "object",
      "properties": {
        "calendarIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The calendar_ids belonging to the calendars with the given external_ids.\nThe order of the returned calendar_ids is guaranteed to match the order the external_ids were given in.\nFor every calendar_id, calendar_ids[i] is the calendar_id for external_ids[i]\nOn subsequent calls this response is guaranteed to be the same."
        }
      }
    },
    "v1EnsurePersonalCalendarExistsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "applicationContextProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "See application_context_properties on BuildHostId / the Calendar\nThis request ensures a calendar with these application context properties exist. If it doesn't one is created."
        }
      }
    },
    "v1EnsurePersonalCalendarExistsResponse": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string",
          "description": "The calendar_id belonging to the user having the given application_context_properties\nsubsequence with the same user_id and application_context_properties will return the same calendar_id.\nA single property change in application_context_properties will result in a new calendar."
        }
      }
    },
    "v1EventGroupAndServiceAssociations": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "title": "group or event"
        },
        "isEditable": {
          "type": "boolean"
        },
        "creatorUserName": {
          "type": "string"
        },
        "calendarId": {
          "type": "string"
        },
        "hexColor": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "bookingUrl": {
          "type": "string"
        }
      }
    },
    "v1Field": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1FormFieldType"
        },
        "required": {
          "type": "boolean"
        }
      }
    },
    "v1Form": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Field"
          },
          "title": "The order of fields specified here is the order they will be displayed in"
        }
      }
    },
    "v1FormFieldType": {
      "type": "string",
      "enum": [
        "FORM_FIELD_TYPE_INVALID",
        "FORM_FIELD_TYPE_TEXT",
        "FORM_FIELD_TYPE_EMAIL",
        "FORM_FIELD_TYPE_PHONE_NUMBER",
        "FORM_FIELD_TYPE_SELECT"
      ],
      "default": "FORM_FIELD_TYPE_INVALID"
    },
    "v1GetCalendarRequest": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string",
          "title": "TODO: Change calendar_id to be calendar_slug.\nhost_id here can act as a calendar_id or a calendar_slug:\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Slugs\nThe returned calendar will have the actual identifier"
        }
      }
    },
    "v1GetCalendarResponse": {
      "type": "object",
      "properties": {
        "calendar": {
          "$ref": "#/definitions/v1Calendar"
        }
      }
    },
    "v1GetEntityAssociationRequest": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string",
          "title": "can be either event_type_id or group_id"
        }
      }
    },
    "v1GetEntityAssociationResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Contains names of services and groups which has linked to the entity (event_type or group)"
    },
    "v1GetGroupRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1GetGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "businessDisplayLogoUrl": {
          "type": "string"
        }
      }
    },
    "v1GetHostMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "v1GetHostMeetingResponse": {
      "type": "object",
      "properties": {
        "meeting": {
          "$ref": "#/definitions/v1Meeting"
        }
      }
    },
    "v1GetHostPreferencesRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1GetHostPreferencesResponse": {
      "type": "object",
      "properties": {
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        }
      }
    },
    "v1GetHostRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "description": "TODO: Change host_id to be host_slug.\nhost_id here can act as a host_id or a host_slug:\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Slugs\nThe actual returned Host will have the correct host_id and the slug."
        }
      }
    },
    "v1GetHostResponse": {
      "type": "object",
      "properties": {
        "host": {
          "$ref": "#/definitions/v1Host"
        }
      }
    },
    "v1GetHostsForCalendarRequest": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string"
        }
      }
    },
    "v1GetHostsForCalendarResponse": {
      "type": "object",
      "properties": {
        "hostUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HostUser"
          }
        }
      }
    },
    "v1GetMeetingTypeRequest": {
      "type": "object",
      "properties": {
        "calendarSlug": {
          "type": "string",
          "description": "Refers to either the calendar_id or the calendar_slug."
        },
        "meetingTypeSlug": {
          "type": "string",
          "description": "Refers to either the meeting_type_id or the meeting_type_slug."
        }
      },
      "title": "Documentation for slugs: https://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Slugs"
    },
    "v1GetMeetingTypeResponse": {
      "type": "object",
      "properties": {
        "meetingType": {
          "$ref": "#/definitions/v1MeetingType"
        }
      }
    },
    "v1GetMeetingTypesForCalendarsRequest": {
      "type": "object",
      "properties": {
        "calendarIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetMeetingTypesForCalendarsResponse": {
      "type": "object",
      "properties": {
        "calendarMeetingTypesMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MeetingTypeList"
          },
          "title": "map is from string to list of meeting types\nEach calendar_id passed in the request is in the map - even if there are no meeting types for the calendar"
        }
      }
    },
    "v1GetServiceRequest": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1GetServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "businessDisplayLogoUrl": {
          "type": "string"
        }
      }
    },
    "v1GoogleMeetConferenceData": {
      "type": "object",
      "properties": {
        "conferenceId": {
          "type": "string"
        },
        "conferenceSolution": {
          "$ref": "#/definitions/v1GoogleMeetConferenceSolution"
        },
        "createRequest": {
          "$ref": "#/definitions/v1GoogleMeetCreateConferenceRequest"
        },
        "entryPoints": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GoogleMeetEntryPoint"
          }
        },
        "notes": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L829"
    },
    "v1GoogleMeetConferenceRequestStatus": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "string"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L990"
    },
    "v1GoogleMeetConferenceSolution": {
      "type": "object",
      "properties": {
        "iconUri": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/v1GoogleMeetConferenceSolutionKey"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1025"
    },
    "v1GoogleMeetConferenceSolutionKey": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "title": "https://github.com/googleapis/google-api-go-client/blob/master/calendar/v3/calendar-gen.go#L1059"
    },
    "v1GoogleMeetCreateConferenceRequest": {
      "type": "object",
      "properties": {
        "conferenceSolutionKey": {
          "$ref": "#/definitions/v1GoogleMeetConferenceSolutionKey"
        },
        "requestId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1GoogleMeetConferenceRequestStatus"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1096"
    },
    "v1GoogleMeetCreateMeetingRequest": {
      "type": "object",
      "properties": {
        "calenderId": {
          "type": "string",
          "description": "Google Calendar ID. a.k.a Google emails.\nDEPRECATED: DO NOT use this param, the backend service will save calendar ID with auth token in the database."
        },
        "meeting": {
          "$ref": "#/definitions/v1GoogleMeetMeeting"
        }
      },
      "description": "Request body for creating a google-mmet meeting."
    },
    "v1GoogleMeetCreateMeetingResponse": {
      "type": "object",
      "properties": {
        "iamUserId": {
          "type": "string"
        },
        "calenderId": {
          "type": "string"
        },
        "meeting": {
          "$ref": "#/definitions/v1GoogleMeetMeeting"
        }
      },
      "description": "Request body of creating a google-mmet meeting."
    },
    "v1GoogleMeetEntryPoint": {
      "type": "object",
      "properties": {
        "accessCode": {
          "type": "string"
        },
        "entryPointFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entryPointType": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "meetingCode": {
          "type": "string"
        },
        "passcode": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "regionCode": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1135"
    },
    "v1GoogleMeetMeeting": {
      "type": "object",
      "properties": {
        "anyoneCanAddSelf": {
          "type": "boolean"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GoogleMeetMeetingAttendee"
          }
        },
        "attendeesOmitted": {
          "type": "boolean"
        },
        "colorId": {
          "type": "string"
        },
        "conferenceData": {
          "$ref": "#/definitions/v1GoogleMeetConferenceData"
        },
        "description": {
          "type": "string"
        },
        "end": {
          "$ref": "#/definitions/v1GoogleMeetMeetingDateTime"
        },
        "endTimeUnspecified": {
          "type": "boolean"
        },
        "etag": {
          "type": "string"
        },
        "icalUid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "originalStartTime": {
          "$ref": "#/definitions/v1GoogleMeetMeetingDateTime"
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recurringMeetingId": {
          "type": "string"
        },
        "reminders": {
          "$ref": "#/definitions/v1GoogleMeetMeetingReminders"
        },
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "start": {
          "$ref": "#/definitions/v1GoogleMeetMeetingDateTime"
        },
        "status": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "transparency": {
          "type": "string"
        },
        "visibility": {
          "type": "string"
        },
        "hangoutLink": {
          "type": "string",
          "title": "Read only properties"
        },
        "htmlLink": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/v1GoogleMeetMeetingCreator"
        },
        "updated": {
          "type": "string"
        }
      },
      "description": "Google meet meetings (a.k.a events of google calendar)\nCheck https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1289 for more details of parameters."
    },
    "v1GoogleMeetMeetingAttendee": {
      "type": "object",
      "properties": {
        "additionalGuests": {
          "type": "string",
          "format": "int64"
        },
        "comment": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        },
        "organizer": {
          "type": "boolean"
        },
        "resource": {
          "type": "boolean"
        },
        "responseStatus": {
          "type": "string"
        },
        "self": {
          "type": "boolean"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1842"
    },
    "v1GoogleMeetMeetingCreator": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "self": {
          "type": "boolean"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1556"
    },
    "v1GoogleMeetMeetingDateTime": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "dateTime": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1914"
    },
    "v1GoogleMeetMeetingReminder": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        },
        "minutes": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1961"
    },
    "v1GoogleMeetMeetingReminders": {
      "type": "object",
      "properties": {
        "overrides": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GoogleMeetMeetingReminder"
          }
        },
        "useDefault": {
          "type": "boolean"
        }
      },
      "title": "https://github.com/google/google-api-go-client/tree/master/calendar/v3/calendar-gen.go#L1734"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "isPinned": {
          "type": "boolean"
        },
        "associations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventGroupAndServiceAssociations"
          }
        },
        "hexColor": {
          "type": "string"
        },
        "bookingUrl": {
          "type": "string"
        }
      }
    },
    "v1GuestCancelMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string",
          "title": "identifier for the meeting to cancel"
        },
        "authToken": {
          "type": "string",
          "description": "Used as a weak form of authentication. Must be sent on the request to verify the guest."
        },
        "cancellationReason": {
          "type": "string",
          "title": "an optional reason for the cancelation"
        }
      }
    },
    "v1GuestGetBookedMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string",
          "title": "identifier for the meeting to query"
        },
        "authToken": {
          "type": "string"
        }
      }
    },
    "v1GuestGetBookedMeetingResponse": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the meeting was scheduled to start"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the meeting was scheduled to end"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "The timezone the meeting was booked in for the contact"
        },
        "meetingTypeId": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "locationType": {
          "$ref": "#/definitions/v1MeetingLocationType"
        },
        "locationGuideline": {
          "type": "string"
        }
      }
    },
    "v1GuestIsHostConfiguredRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1GuestIsHostConfiguredResponse": {
      "type": "object",
      "properties": {
        "isConfigured": {
          "type": "boolean"
        }
      }
    },
    "v1GuestRescheduleMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string",
          "title": "identifier for the meeting to reschedule"
        },
        "authToken": {
          "type": "string",
          "description": "Used as a weak form of authentication. Must be sent on the request to verify the guest."
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "start is the time the meeting should start"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "the timezone to reschedule the meeting in. A blank timezone will keep the original timezone"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "v1Host": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayProfileUrl": {
          "type": "string"
        },
        "displayLogoUrl": {
          "type": "string"
        }
      }
    },
    "v1HostBookMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingSource": {
          "$ref": "#/definitions/v1MeetingSource"
        },
        "calendarId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/vendastatypesDateRange"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Contact"
          }
        },
        "topic": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1HostBookMeetingResponse": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string"
        }
      }
    },
    "v1HostGetCalendarRequest": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string"
        }
      }
    },
    "v1HostGetCalendarResponse": {
      "type": "object",
      "properties": {
        "calendar": {
          "$ref": "#/definitions/v1Calendar"
        }
      }
    },
    "v1HostGetMeetingTypeRequest": {
      "type": "object",
      "properties": {
        "calendarSlug": {
          "type": "string",
          "description": "Refers to either the calendar_id or the calendar_slug."
        },
        "meetingTypeSlug": {
          "type": "string",
          "description": "Refers to either the meeting_type_id or the meeting_type_slug."
        }
      },
      "title": "Documentation for slugs: https://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Slugs"
    },
    "v1HostGetMeetingTypeResponse": {
      "type": "object",
      "properties": {
        "meetingType": {
          "$ref": "#/definitions/v1MeetingType"
        }
      }
    },
    "v1HostListMeetingTypesRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1HostListMeetingTypesResponse": {
      "type": "object",
      "properties": {
        "meetingTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingType"
          }
        }
      }
    },
    "v1HostUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "isConfigured": {
          "type": "boolean"
        }
      }
    },
    "v1IsCalendarConfiguredRequest": {
      "type": "object",
      "properties": {
        "applicationContextProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1IsCalendarConfiguredResponse": {
      "type": "object",
      "properties": {
        "isConfigured": {
          "type": "boolean"
        },
        "calendarIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1IsHostConfiguredRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "TODO: Change host_id to be host_slug.\nhost_id here can act as a host_id or a host_slug:\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Slugs"
        }
      }
    },
    "v1IsHostConfiguredResponse": {
      "type": "object",
      "properties": {
        "isConfigured": {
          "type": "boolean"
        }
      }
    },
    "v1ListAvailabilityRequest": {
      "type": "object",
      "properties": {
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions"
        },
        "filters": {
          "$ref": "#/definitions/v1ListAvailabilityRequestFilters"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "time zone that the client prefers the booked meeting times returned in. An empty time zone will be assumed to be UTC.\nThe tz database standard name (also known as tzdata, zoneinfo database, IANA time zone database and Olson database)"
        }
      }
    },
    "v1ListAvailabilityRequestFilters": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string",
          "title": "meeting type for the availability. OPTIONAL - empty will return all"
        }
      }
    },
    "v1ListAvailabilityResponse": {
      "type": "object",
      "properties": {
        "availabilityRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AvailabilityRule"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata"
        }
      }
    },
    "v1ListAvailableTimeSlotsRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string"
        },
        "timeSpan": {
          "$ref": "#/definitions/vendastatypesDateRange"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "time zone that the client prefers the available time slots returned in. An empty time zone will be assumed to be UTC\nThe tz database standard name (also known as tzdata, zoneinfo database, IANA time zone database and Olson database)"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1ListAvailableTimeSlotsResponse": {
      "type": "object",
      "properties": {
        "timeSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/vendastatypesDateRange"
          },
          "title": "Ordered by start time UTC and reflects the requested TimeZone"
        }
      }
    },
    "v1ListBookedMeetingsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "$ref": "#/definitions/v1ListBookedMeetingsRequestFilters",
          "title": "Filters to apply when listing booked meetings"
        },
        "pagingOptions": {
          "$ref": "#/definitions/v1PagedRequestOptions",
          "title": "Options for how to page the response for this request"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "time zone that the client prefers the booked meeting times returned in. An empty time zone will be assumed to be UTC.\nThe tz database standard name (also known as tzdata, zoneinfo database, IANA time zone database and Olson database)"
        }
      }
    },
    "v1ListBookedMeetingsRequestFilters": {
      "type": "object",
      "properties": {
        "meetingTypeIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The identifiers of a meeting types to be filtered on"
        },
        "hostId": {
          "type": "string",
          "title": "The identifier of the host to list the meetings for"
        },
        "timeSpan": {
          "$ref": "#/definitions/vendastatypesDateRange",
          "title": "The date range of meetings to filter for - this range must be specific to the client's time zone"
        }
      }
    },
    "v1ListBookedMeetingsResponse": {
      "type": "object",
      "properties": {
        "meetings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Meeting"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/v1PagedResponseMetadata",
          "title": "Metadata about the paging"
        }
      }
    },
    "v1ListGroupsRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1ListGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Group"
          }
        }
      }
    },
    "v1ListMeetingTypesRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1ListMeetingTypesResponse": {
      "type": "object",
      "properties": {
        "meetingTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingType"
          }
        }
      }
    },
    "v1ListServicesRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1ListServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        }
      }
    },
    "v1Meeting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventTypeId": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Attendee"
          }
        },
        "description": {
          "type": "string"
        },
        "joinMeetingUrl": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "formAnswers": {
          "$ref": "#/definitions/v1Answers"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata will include additional fields from the url during the booking process (msm_business, utm_campaign)\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Meeting-Metadata"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Attachment"
          }
        },
        "location": {
          "type": "string"
        },
        "calendarId": {
          "type": "string"
        }
      }
    },
    "v1MeetingLocationType": {
      "type": "string",
      "enum": [
        "VIDEO",
        "IN_PERSON_USER_SITE",
        "IN_PERSON_CLIENT_SITE"
      ],
      "default": "VIDEO"
    },
    "v1MeetingSource": {
      "type": "string",
      "enum": [
        "MEETING_SOURCE_INVALID",
        "MEETING_SOURCE_ZOOM",
        "MEETING_SOURCE_GOOGLE_MEET",
        "MEETING_SOURCE_MICROSOFT"
      ],
      "default": "MEETING_SOURCE_INVALID"
    },
    "v1MeetingSourceInfo": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/v1MeetingSource",
          "description": "meeting source. e.g. zoom."
        },
        "status": {
          "$ref": "#/definitions/v1MeetingSourceStatus"
        },
        "connectDisconnectUrl": {
          "type": "string",
          "description": "It will be a connect URL if the user is not connected yet. Otherwise, it will be a disconnected URL."
        }
      }
    },
    "v1MeetingSourceListRequest": {
      "type": "object",
      "properties": {
        "iamUserId": {
          "type": "string",
          "description": "Use this param, support for grabbing the iam_user_id from the context is being removed."
        },
        "queriedSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingSourceQuery"
          }
        },
        "namespace": {
          "type": "string",
          "description": "The pid/agid that is to be used for the resulting connection/disconnection URLs."
        },
        "origin": {
          "type": "string",
          "title": "Origin of the request. e.g. \"task-manger\", \"partner-center\", \"business-app\""
        }
      }
    },
    "v1MeetingSourceListResponse": {
      "type": "object",
      "properties": {
        "iamUserId": {
          "type": "string"
        },
        "sourceInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingSourceInfo"
          }
        }
      }
    },
    "v1MeetingSourceQuery": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/v1MeetingSource",
          "description": "meeting source. e.g. zoom."
        },
        "connectNextUrl": {
          "type": "string",
          "description": "This URL is used to constuct a connect URL of the meeting source."
        },
        "disconnectNextUrl": {
          "type": "string",
          "description": "This URL is used to constuct a disconnect URL of the meeting source."
        }
      },
      "description": "MeetingSourceQuery is used to query the status of a meeting source."
    },
    "v1MeetingSourceStatus": {
      "type": "string",
      "enum": [
        "MEETING_SOURCE_STATUS_INVALID",
        "MEETING_SOURCE_STATUS_CONNECTED",
        "MEETING_SOURCE_STATUS_DISCONNECTED",
        "MEETING_SOURCE_STATUS_BROKEN"
      ],
      "default": "MEETING_SOURCE_STATUS_INVALID"
    },
    "v1MeetingType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "calendarId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hexColor": {
          "type": "string"
        },
        "meetingTypeSlug": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "form": {
          "$ref": "#/definitions/v1Form"
        },
        "isReserveWithGoogleService": {
          "type": "boolean"
        },
        "hostUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bookingUrl": {
          "type": "string",
          "title": "Derived booking_url of the form https://bookmenow.info/book/calendar-slug/meeting-type-slug for responses"
        },
        "availabilityIncrement": {
          "type": "string",
          "format": "int64"
        },
        "bufferDurationAfterMeeting": {
          "type": "string",
          "format": "int64"
        },
        "noticeTime": {
          "type": "string",
          "format": "int64"
        },
        "location": {
          "type": "string"
        },
        "locationType": {
          "$ref": "#/definitions/v1MeetingLocationType"
        },
        "locationGuidelines": {
          "type": "string"
        },
        "isClientChoice": {
          "type": "boolean"
        },
        "emailSubject": {
          "type": "string"
        },
        "emailDescription": {
          "type": "string"
        },
        "isPinned": {
          "type": "boolean"
        },
        "calendarType": {
          "type": "string"
        },
        "hostUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HostUser"
          }
        },
        "teamName": {
          "type": "string"
        },
        "isVideoLinkDisabled": {
          "type": "boolean"
        },
        "bufferDurationBeforeMeeting": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1MeetingTypeList": {
      "type": "object",
      "properties": {
        "meetingTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingType"
          }
        }
      },
      "description": "This message is necessary as a map of string to repeated property is not supported in proto3 at this time."
    },
    "v1PagedRequestOptions": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor can be passed to retrieve the next page of results keyed by the cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "page_size specifies the number of items to return in the next page"
        }
      }
    },
    "v1PagedResponseMetadata": {
      "type": "object",
      "properties": {
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        }
      }
    },
    "v1Preferences": {
      "type": "object",
      "properties": {
        "timezone": {
          "$ref": "#/definitions/typeTimeZone"
        },
        "meetingIntegration": {
          "$ref": "#/definitions/v1MeetingSource"
        },
        "availabilityIncrement": {
          "type": "string",
          "format": "int64",
          "title": "How availability is split into smaller pieces - specified in seconds.\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Availability-Increments"
        },
        "bufferDurationAfterMeeting": {
          "type": "string",
          "format": "int64",
          "title": "The length of time that should be left unscheduled after a meeting - specified in seconds.\nSee https://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Meeting-Buffer-Time"
        },
        "noticeTime": {
          "type": "string",
          "format": "int64",
          "title": "The minimum required duration from now that a meeting can be scheduled - specified in seconds.\nSee https://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Meeting-Notice-Time"
        },
        "calendarSlug": {
          "type": "string",
          "title": "The slug that can be used for routing to the booking client for this calendar.\nI.e., if this was vendasta the link https://bookmenow.info/vendasta would link to this calendar.\nslugs are unique to a calendar.\nDANGER: Changing this slug may BREAK existing links under the previous slug.\nSee https://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Calendar-Slug"
        },
        "bufferDurationBeforeMeeting": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RescheduleMeetingRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string",
          "title": "identifier for the meeting to reschedule"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "start is the time the meeting should start"
        }
      }
    },
    "v1ScheduleBotRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "meetingUrl": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SendMeetingRequestEmailRequest": {
      "type": "object",
      "properties": {
        "contactId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "meetingTypeId": {
          "type": "string"
        }
      }
    },
    "v1Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "isPinned": {
          "type": "boolean"
        },
        "associations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventGroupAndServiceAssociations"
          }
        },
        "hexColor": {
          "type": "string"
        },
        "bookingUrl": {
          "type": "string"
        }
      }
    },
    "v1SetGeneralAvailabilityRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string",
          "title": "The host identifier to set the availability for"
        },
        "meetingTypeId": {
          "type": "string",
          "description": "an optional meeting type id. Not providing a meeting type id will make the availability work for all types."
        },
        "days": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typeDayOfWeek"
          },
          "title": "The specific days you wish to set the availabilities for.\nDeprecated in favour of weekdays_availability"
        },
        "timeSlot": {
          "$ref": "#/definitions/v1TimeRange",
          "title": "The time slot the availability is open on all of the given days\nDeprecated in favour of weekdays_availability"
        },
        "timeZone": {
          "$ref": "#/definitions/typeTimeZone",
          "title": "the time zone of the host's availability. An empty time zone will be assumed to be UTC\nThe tz database standard name (also known as tzdata, zoneinfo database, IANA time zone database and Olson database)"
        },
        "weekdaysAvailability": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WeekdayAvailability"
          },
          "title": "The availability for each day in a week\nRepeating the same day more than once results in an error"
        }
      }
    },
    "v1TimeRange": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/typeTimeOfDay"
        },
        "to": {
          "$ref": "#/definitions/typeTimeOfDay"
        }
      },
      "description": "TimeRange fields need be in UTC."
    },
    "v1UpdateAvailabilityRequest": {
      "type": "object"
    },
    "v1UpdateCalendarRequest": {
      "type": "object",
      "properties": {
        "calendarId": {
          "type": "string",
          "title": "Strictly the calendar_id, update will not look up the model with any alternative identifier"
        },
        "calendarUpdate": {
          "$ref": "#/definitions/v1Calendar",
          "title": "The updated model, calendar_id cannot be updated"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask",
          "description": "Currently supported field masks are [slug, host_user_ids], more may be added over time\nAny fields specified in the field_mask will replace the current value in the calendar\nwith the value from calendar_update, including repeated or nested fields."
        }
      }
    },
    "v1UpdateGroupRequest": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1UpdateHostPreferencesRequest": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        }
      },
      "title": "UpdateHostPreferences will only modify the preferences defined in the field_mask.\nA lack of field_mask resulting in an error is a modified, but acceptable, behaviour from the FieldMask spec.\nSee https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask"
    },
    "v1UpdateMeetingMetadataRequest": {
      "type": "object",
      "properties": {
        "meetingId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The metadata sent in this request will only overwrite / change the same keys in the already-existing metadata.\nThis is because some metadata is only set during a booking.\nhttps://vendasta.jira.com/wiki/spaces/BOOKME/pages/227836157/Terminology#Meeting-Metadata"
        }
      }
    },
    "v1UpdateMeetingTypeRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "meetingType": {
          "$ref": "#/definitions/v1MeetingType"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        }
      }
    },
    "v1UpdateServiceRequest": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "fieldMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        },
        "hostId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1WeekdayAvailability": {
      "type": "object",
      "properties": {
        "day": {
          "$ref": "#/definitions/typeDayOfWeek"
        },
        "timeSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TimeRange"
          }
        }
      }
    },
    "v1ZoomApprovalType": {
      "type": "string",
      "enum": [
        "ZOOM_APPROVAL_TYPE_INVALID",
        "ZOOM_APPROVAL_TYPE_ATUO_APPROVE",
        "ZOOM_APPROVAL_TYPE_MANUALLY_APPROVE",
        "ZOOM_APPROVAL_TYPE_NO_REGISTRATION_REQUIRED"
      ],
      "default": "ZOOM_APPROVAL_TYPE_INVALID"
    },
    "v1ZoomMeetingRecurrence": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1ZoomMeetingRecurrenceType"
        },
        "repeatInterval": {
          "type": "string",
          "format": "int64",
          "description": "Define the internal at which the meeting should recur. For instance, if you would like to schedule a meeting that\nrecurs every two months, you must set the value of this field as 2 and the value of type parameter as 3.\nMax daily meeting: 90 days\nMax weekly meeting: 12 weeks.\nMax monthly meeting: 3 months."
        },
        "weeklyDays": {
          "type": "string",
          "title": "Use this field only if you are scheduling a recurring meeting of type 2 to state which day(s) of the week the meeting\nshould repeat.\nIf you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field.\nFor example \"1,2,3\""
        },
        "monthlyDay": {
          "type": "string",
          "format": "int64",
          "description": "Use this field only if you are scheduling a recurring meeting of type 3 to state which day in a month, the meeting\nshould recurd. The value range is from 1 to 31."
        },
        "monthlyWeek": {
          "$ref": "#/definitions/v1ZoomMonthlyWeek",
          "description": "Use this field only if you are scheduling a recurring metting of type 3 to state the week of the month when the meeting\nshould recur. If you use this field, you must also use the monthly_week_day field to state the day of the week when\nthe meeting should occur."
        },
        "monthlyWeekDay": {
          "$ref": "#/definitions/v1ZoomMonthlyWeekDay",
          "description": "Use this field only if you are scheduling a recurring meeting of type 3 to state a specific day in a week when\nthe monthly meeting should recur. To use this field, you must also use the monthly_week field."
        },
        "endTimes": {
          "type": "string",
          "format": "int64",
          "title": "Select how many times the meeting should recur before it is cancelled. (Cannot be used with `end_date_time`)"
        },
        "endDateTime": {
          "type": "string",
          "title": "Select the final data on which the meeting will recur before it is cancelled. Should be in UTC time and cannot\nbe used with `end_times`"
        }
      }
    },
    "v1ZoomMeetingRecurrenceType": {
      "type": "string",
      "enum": [
        "ZOOM_MEETING_RECURRENCE_TYPE_INVALID",
        "ZOOM_MEETING_RECURRENCE_TYPE_DAILY",
        "ZOOM_MEETING_RECURRENCE_TYPE_WEEKLY",
        "ZOOM_MEETING_RECURRENCE_TYPE_MONTHLY"
      ],
      "default": "ZOOM_MEETING_RECURRENCE_TYPE_INVALID"
    },
    "v1ZoomMeetingSettings": {
      "type": "object",
      "properties": {
        "hostVideo": {
          "type": "boolean"
        },
        "participantVideo": {
          "type": "boolean"
        },
        "cnMeeting": {
          "type": "boolean"
        },
        "inMeeting": {
          "type": "boolean"
        },
        "joinBeforeHost": {
          "type": "boolean"
        },
        "muteUponEntry": {
          "type": "boolean"
        },
        "watermark": {
          "type": "boolean"
        },
        "usePmi": {
          "type": "boolean"
        },
        "approvalType": {
          "$ref": "#/definitions/v1ZoomApprovalType"
        },
        "registrationType": {
          "$ref": "#/definitions/v1ZoomRegistrationType"
        },
        "audio": {
          "type": "string"
        },
        "autoRecording": {
          "type": "string"
        },
        "alternativeHosts": {
          "type": "string"
        },
        "closeRegistration": {
          "type": "boolean"
        },
        "waitingRoom": {
          "type": "boolean"
        },
        "globalDialInCountries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contactName": {
          "type": "string"
        },
        "contactEmail": {
          "type": "string"
        },
        "registrationEmailNotification": {
          "type": "boolean"
        },
        "meetingAuthentication": {
          "type": "boolean"
        },
        "authenticationOptions": {
          "type": "string"
        },
        "authenticationDomains": {
          "type": "string"
        },
        "enforceLogin": {
          "type": "boolean",
          "description": "The following fields are reponse only."
        },
        "enforceLoginDomains": {
          "type": "string"
        }
      }
    },
    "v1ZoomMeetingTrackingField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1ZoomMeetingType": {
      "type": "string",
      "enum": [
        "ZOOM_MEETING_TYPE_INVALID",
        "ZOOM_MEETING_TYPE_INSTANT",
        "ZOOM_MEETING_TYPE_SCHEDULED",
        "ZOOM_MEETING_TYPE_RECURRING_NO_FIXED",
        "ZOOM_MEETING_TYPE_RECURRING_FIXED"
      ],
      "default": "ZOOM_MEETING_TYPE_INVALID",
      "description": " - ZOOM_MEETING_TYPE_INVALID: Invalid meeting type.\n - ZOOM_MEETING_TYPE_INSTANT: Instant meeting.\n - ZOOM_MEETING_TYPE_SCHEDULED: Scheduled meeting.\n - ZOOM_MEETING_TYPE_RECURRING_NO_FIXED: Recurring meeting with no fixed tiem.\n - ZOOM_MEETING_TYPE_RECURRING_FIXED: Recurring meeting with fixed time."
    },
    "v1ZoomMonthlyWeek": {
      "type": "string",
      "enum": [
        "ZOOM_MONTHLY_WEEK_INVALD",
        "ZOOM_MONTHLY_WEEK_LAST_WEEK",
        "ZOOM_MONTHLY_WEEK_FIRST_WEEK",
        "ZOOM_MONTHLY_WEEK_SECOND_WEEK",
        "ZOOM_MONTHLY_WEEK_THIRD_WEEK",
        "ZOOM_MONTHLY_WEEK_FOURTH_WEEK"
      ],
      "default": "ZOOM_MONTHLY_WEEK_INVALD"
    },
    "v1ZoomMonthlyWeekDay": {
      "type": "string",
      "enum": [
        "ZOOM_MONTHLY_WEEK_DAY_INVALID",
        "ZOOM_MONTHLY_WEEK_DAY_SUNDAY",
        "ZOOM_MONTHLY_WEEK_DAY_MONDAY",
        "ZOOM_MONTHLY_WEEK_DAY_TUESDAY",
        "ZOOM_MONTHLY_WEEK_DAY_WEDNESDAY",
        "ZOOM_MONTHLY_WEEK_DAY_THURSDAY",
        "ZOOM_MONTHLY_WEEK_DAY_FRIDAY",
        "ZOOM_MONTHLY_WEEK_DAY_SATURDAY"
      ],
      "default": "ZOOM_MONTHLY_WEEK_DAY_INVALID"
    },
    "v1ZoomOccurrence": {
      "type": "object",
      "properties": {
        "occurrenceId": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1ZoomRegistrationType": {
      "type": "string",
      "enum": [
        "ZOOM_REGISTRATION_TYPE_INVALID",
        "ZOOM_REGISTRATION_TYPE_RESGITER_ONCE_FOR_ALL",
        "ZOOM_REGISTRATION_TYPE_REGISTER_FOR_EACH",
        "ZOOM_REGISTRATION_TYPE_RESGITER_ONCE_FOR_ONE_OR_MORE"
      ],
      "default": "ZOOM_REGISTRATION_TYPE_INVALID"
    },
    "v3BatchAvailabilityLookupRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "description": "ID of the merchant."
        },
        "slotTime": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3SlotTime"
          },
          "description": "Multiple slot times to be checked for availability. All queried times apply\nto the same merchant_id and service_id."
        }
      }
    },
    "v3BatchAvailabilityLookupResponse": {
      "type": "object",
      "properties": {
        "slotTimeAvailability": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3SlotTimeAvailability"
          },
          "description": "The availabilities for the requested SlotTime entries. There must be\nexactly one slot_time_availability for each SlotTime entry in the\n[ext.maps.booking.partner.v3.BatchAvailabilityLookupRequest]."
        }
      },
      "description": "Response for the [ext.maps.booking.partner.v3.BatchAvailabilityLookupRequest]\nRPC with the availabilities of the appointment slots."
    },
    "v3Booking": {
      "type": "object",
      "properties": {
        "bookingId": {
          "type": "string",
          "title": "ID of this booking (required)"
        },
        "slot": {
          "$ref": "#/definitions/v3Slot",
          "title": "The appointment slot of this booking\n(required for CreateBooking and UpdateBooking:modify,\nbut not UpdateBooking:cancel)"
        },
        "userInformation": {
          "$ref": "#/definitions/v3UserInformation",
          "title": "Personal information of the user making the appointment (required for\nCreateBooking)"
        },
        "status": {
          "$ref": "#/definitions/v3BookingStatus",
          "title": "Status of the booking (required for CreateBooking and UpdateBooking:cancel,\nbut not UpdateBooking:modify)"
        },
        "paymentInformation": {
          "$ref": "#/definitions/v3PaymentInformation",
          "title": "Information about payment transactions that relate to the booking.\n(optional)"
        },
        "virtualSessionInfo": {
          "$ref": "#/definitions/v3VirtualSessionInfo",
          "title": "Information about virtual session related to this booking. (optional)"
        },
        "offerInfo": {
          "$ref": "#/definitions/v3OfferInfo",
          "description": "Information about the Offer applied to this booking.\n\nRequired in CreateBookingResponse if an offer_id was set on the\nCreateBookingRequest that created the Booking."
        }
      },
      "title": "A booking for an inventory slot"
    },
    "v3BookingFailure": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/BookingFailureCause",
          "title": "The reason why the booking failed. (required)"
        },
        "rejectedCardType": {
          "$ref": "#/definitions/partnerv3CreditCardType",
          "title": "(required only if cause is PAYMENT_ERROR_CARD_TYPE_REJECTED)"
        },
        "description": {
          "type": "string",
          "title": "This optional field is used for the partner to include additional\ninformation for debugging purpose only. (optional)"
        },
        "paymentFailure": {
          "$ref": "#/definitions/v3BookingFailurePaymentFailureInformation"
        }
      },
      "description": "Status data that conveys why (1) creating a lease or (2) creating or updating\na booking fails.\nBookingFailure is intended to primarily capture business logic errors."
    },
    "v3BookingFailurePaymentFailureInformation": {
      "type": "object",
      "properties": {
        "threeds1Parameters": {
          "$ref": "#/definitions/v3BookingFailurePaymentFailureInformationThreeDS1Parameters",
          "description": "Parameters used by a RwG aggregator to initiate a 3DS1 authentication\nprotocol with the user.  Will be ignored unless BookingFailure.cause\nis set to PAYMENT_REQUIRES_3DS1."
        }
      },
      "description": "Information about payment failures."
    },
    "v3BookingFailurePaymentFailureInformationThreeDS1Parameters": {
      "type": "object",
      "properties": {
        "acsUrl": {
          "type": "string",
          "description": "The URL from which to load a form to present to the User for\nauthentication."
        },
        "paReq": {
          "type": "string",
          "description": "A PaymentAuthentication Request.  To be posted to the ACSUrl form if\nsupplied."
        },
        "transactionId": {
          "type": "string",
          "description": "An identifier used by the ACS provider.  To be posted to the ACSUrl\nform if supplied."
        },
        "mdMerchantData": {
          "type": "string",
          "description": "Merchant data.  To be posted to the ACSUrl form if supplied."
        }
      },
      "description": "Parameters requesting that RwG perform a 3DS1 challenge.\n\nThe parameters are set by EMVCo's description of the 3DS1 protocol."
    },
    "v3BookingStatus": {
      "type": "string",
      "enum": [
        "BOOKING_STATUS_UNSPECIFIED",
        "CONFIRMED",
        "PENDING_MERCHANT_CONFIRMATION",
        "CANCELED",
        "NO_SHOW",
        "NO_SHOW_PENALIZED",
        "FAILED",
        "DECLINED_BY_MERCHANT"
      ],
      "default": "BOOKING_STATUS_UNSPECIFIED",
      "description": "Status of a booking.\n\nUpdating booking status does not change the status of the associated payment.\nPrepayment status updates should be done using the PrepaymentStatus enum.\n\n - BOOKING_STATUS_UNSPECIFIED: Not specified.\n - CONFIRMED: Booking has been confirmed\n - PENDING_MERCHANT_CONFIRMATION: Booking is awaiting confirmation by the merchant before it can transition\ninto CONFIRMED status. Only applicable to non-payments Dining or\nBeauty verticals.\n - CANCELED: Booking has been canceled on behalf of the user.\nThe merchant can still trigger a manual refund.\n - NO_SHOW: User did not show for the appointment\n - NO_SHOW_PENALIZED: User did not show for the appointment in violation of the cancellation\npolicy.\n - FAILED: Booking could not be completed by the async backend due to a failure.\n - DECLINED_BY_MERCHANT: Booking was asynchronously declined by the merchant. Only applicable to\nnon-payments Dining or Beauty verticals."
    },
    "v3ConfirmationMode": {
      "type": "string",
      "enum": [
        "CONFIRMATION_MODE_UNSPECIFIED",
        "CONFIRMATION_MODE_SYNCHRONOUS",
        "CONFIRMATION_MODE_ASYNCHRONOUS"
      ],
      "default": "CONFIRMATION_MODE_UNSPECIFIED",
      "description": "Mode by which bookings for an availability slot are confirmed.\n\n - CONFIRMATION_MODE_UNSPECIFIED: The confirmation mode was not specified.\nSynchronous confirmation will be assumed.\n - CONFIRMATION_MODE_SYNCHRONOUS: Bookings for this availability will be confirmed synchronously.\n - CONFIRMATION_MODE_ASYNCHRONOUS: Bookings for this availability will be confirmed asynchronously."
    },
    "v3CreateBookingRequest": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v3Slot",
          "title": "The inventory slot that is being requested to make this booking.\nIf lease_ref is provided, slot must match the lease; slot is provided for\nthe partner to verify the lease information.\nIf lease_ref is absent, then create the booking for the slot. (required)"
        },
        "leaseRef": {
          "$ref": "#/definitions/v3LeaseReference",
          "title": "The lease that is being confirmed to make this booking.\nIf lease_ref is provided, then create the booking using the lease.\n(optional)"
        },
        "userInformation": {
          "$ref": "#/definitions/v3UserInformation",
          "title": "Personal information of the user making the appointment (required)"
        },
        "paymentInformation": {
          "$ref": "#/definitions/v3PaymentInformation",
          "title": "Information about payments. When payment authorizations are handled by\nGoogle, if the booking request does not succeed, payment authorizations are\nautomatically canceled. (optional)"
        },
        "paymentProcessingParameters": {
          "$ref": "#/definitions/v3PaymentProcessingParameters",
          "title": "The parameters to be used if the payment is processed by the partner\n(i.e. payment_information.payment_processed_by is equal to\nPROCESSED_BY_PARTNER). (optional)"
        },
        "idempotencyToken": {
          "type": "string",
          "description": "This uniquely identifies a booking request. Specifically:\n- If a booking was already created for a CreateBooking request with this\nidempotency token, that booking should be returned.\n- If no booking has been created for a CreateBooking request with this\nidempotency token, this should be considered to be a request for a new\nbooking, and **no previously-created booking may be returned**.\n\nIf a partner considers the requested booking to be a duplicate of a\npreviously-created booking, this request should fail with reason\nBookingFailure.OVERLAPPING_RESERVATION. The partner is responsible for\ndetermining whether this duplicates a previous booking, but for example the\npartner may consider a booking request to be a duplicate if an existing\nbooking has the same party size, time, and email address.",
          "title": "Idempotency token for CreateBooking requests. (required)"
        },
        "additionalRequest": {
          "type": "string",
          "title": "A string from the user which contains any special requests or additional\ninformation that they would like to notify the merchant about. (optional)"
        },
        "offerId": {
          "type": "string",
          "description": "If the offer is no longer available, the booking should not be made, and in\nresponse.booking_failure should be set to OFFER_UNAVAILABLE.",
          "title": "Partner provided offer id associated with this slot. (optional)"
        },
        "dealId": {
          "type": "string"
        }
      },
      "description": "Request to create a Booking for an inventory slot. Consumes the lease if\nprovided."
    },
    "v3CreateBookingResponse": {
      "type": "object",
      "properties": {
        "booking": {
          "$ref": "#/definitions/v3Booking",
          "title": "The created booking (required)"
        },
        "userPaymentOption": {
          "$ref": "#/definitions/v3UserPaymentOption",
          "title": "The updated user payment option used in this booking.\nIf a new payment option was purchased to pay for the booking, this should\nbe a newly created user payment option.\nIf an already purchased user payment option was used for this booking,\nthis should reflect an updated version of that user payment option.\n(optional)"
        },
        "bookingFailure": {
          "$ref": "#/definitions/v3BookingFailure",
          "title": "If creating a booking fails, this field should reflect the business logic\nerror (e.g., slot has become unavailable) and all other fields in the\nCreateBookingResponse message are expected to be unset. (required if\nfailure occurs)"
        }
      },
      "description": "Response with the created Booking for an inventory slot."
    },
    "v3CreditCardRestrictionsCreditCardType": {
      "type": "string",
      "enum": [
        "CREDIT_CARD_TYPE_UNSPECIFIED",
        "VISA",
        "MASTERCARD",
        "AMERICAN_EXPRESS",
        "DISCOVER",
        "JCB"
      ],
      "default": "CREDIT_CARD_TYPE_UNSPECIFIED",
      "description": "A credit card type.\n\n - CREDIT_CARD_TYPE_UNSPECIFIED: Unused.\n - VISA: A Visa credit card.\n - MASTERCARD: A Mastercard credit card.\n - AMERICAN_EXPRESS: An American Express credit card.\n - DISCOVER: A Discover credit card.\n - JCB: A JCB credit card."
    },
    "v3Deposit": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/v3Price",
          "description": "Deposit amount."
        },
        "minAdvanceCancellationSec": {
          "type": "string",
          "format": "int64",
          "description": "Minimum advance cancellation for the deposit."
        },
        "depositType": {
          "$ref": "#/definitions/v3PriceType",
          "description": "Defines how the deposit is determined from the availability."
        }
      },
      "description": "A deposit that the user may be charged or have a hold on their credit card\nfor."
    },
    "v3GetBookingStatusRequest": {
      "type": "object",
      "properties": {
        "bookingId": {
          "type": "string",
          "title": "ID of the existing booking (required)"
        }
      },
      "description": "Request to get booking status and prepayment status for a Booking."
    },
    "v3GetBookingStatusResponse": {
      "type": "object",
      "properties": {
        "bookingId": {
          "type": "string",
          "title": "ID of the booking (required)"
        },
        "bookingStatus": {
          "$ref": "#/definitions/v3BookingStatus",
          "title": "Status of the booking (required)"
        },
        "prepaymentStatus": {
          "$ref": "#/definitions/v3PrepaymentStatus",
          "title": "Prepayment status of the booking (required)"
        }
      },
      "description": "Response for the GetBookingStatus RPC with booking status and prepayment\nstatus."
    },
    "v3LeaseReference": {
      "type": "object",
      "properties": {
        "leaseId": {
          "type": "string",
          "title": "Lease ID (required)"
        }
      },
      "description": "Reference to a Lease that has been created via CreateLease."
    },
    "v3ListBookingsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "ID of the user (required)"
        }
      },
      "title": "Request to list all bookings for a user"
    },
    "v3ListBookingsResponse": {
      "type": "object",
      "properties": {
        "bookings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v3Booking"
          },
          "title": "All bookings of the user (required)"
        }
      },
      "description": "Response for the ListBookings RPC with all bookings for the requested user."
    },
    "v3NoShowFee": {
      "type": "object",
      "properties": {
        "fee": {
          "$ref": "#/definitions/v3Price",
          "description": "The amount the user may be charged if they do not show up for their\nreservation."
        },
        "feeType": {
          "$ref": "#/definitions/v3PriceType",
          "description": "Defines how the fee is determined from the availability."
        }
      },
      "description": "A fee that a user may be charged if they have made a booking but do not\nshow up."
    },
    "v3OfferInfo": {
      "type": "object",
      "properties": {
        "offerId": {
          "type": "string",
          "description": "The ID of the Offer."
        }
      },
      "description": "Information about an Offer applied to a booking."
    },
    "v3PaymentInformation": {
      "type": "object",
      "properties": {
        "prepaymentStatus": {
          "$ref": "#/definitions/v3PrepaymentStatus",
          "title": "Prepayment status of the transaction.\nIf the prepayment_status is PREPAYMENT_PROVIDED, then\npayment_transaction_id contains the associated unique transaction id for\nthe purchase.\nIf the prepayment status is PREPAYMENT_REFUNDED, then\npayment_transaction_id contains the associated unique transaction id for\nthe refund. (required)"
        },
        "paymentTransactionId": {
          "type": "string",
          "description": "Unique identifier for a payment transaction associated with the booking.\nIf the payment is PROCESSED_BY_GOOGLE, this field will be set by Google.\nIf the payment is PROCESSED_BY_PARTNER, this field will be left empty in\nGoogle's CreateBooking or CreateOrder requests to the partner, and it must\nbe set by the partner in their responses."
        },
        "price": {
          "$ref": "#/definitions/v3Price",
          "description": "For bookings or orders, these fields must match the service price\n(specified in the Services feed) or the PaymentOption corresponding with\nthis service. They are included in the booking request and response to\nverify that the price indicated in the feed has not changed since the last\nfeed update.\n\nThe price of the transaction, exclusive of any taxes and fees.\nExistence of price or taxes does not imply that they have been paid,\nprepayment_state should be used for that purpose. (required)"
        },
        "taxAmount": {
          "$ref": "#/definitions/v3Price",
          "title": "Taxes that are calculated to be paid for this transaction.\nThis field can only be absent in one of the following cases:\n(1) the price is exempt from or already inclusive of applicable taxes; or\n(2) the break down between taxes and fees is not available.\n(required when neither of the above holds)"
        },
        "fees": {
          "$ref": "#/definitions/v3Price",
          "description": "Additional fees associated with this transaction, if any.\n\nThe use of this field should be consistent with other pricing related\nfields:\n - if a {price, tax, fees} breakdown is provided for service or\n availability, use the same breakdown {price, tax, fees} here.\n - if the price field for service or availability already includes taxes\n or fees, keep using price field to includes taxes or fees and avoid\n setting the tax_amount or fees fields here.\nNote: this is only supported for non-order based transactions."
        },
        "feesAndTaxes": {
          "$ref": "#/definitions/v3Price",
          "description": "Total processing fees \u0026 taxes that the user needs to pay for the order;\nonly applicable to partners that handle order based transactions.\nIf the order would incur non-zero fees based on\nthe partner's response during CheckOrderFulfillability, Google would set\nthis field during CreateOrder; otherwise, the field would be unset.\nThe partner should verify this value, in addition to the `price` value,\nbefore charging the user."
        },
        "deposit": {
          "$ref": "#/definitions/v3Deposit",
          "title": "Defines how a deposit may be charged to the user. If there is a deposit,\nthis field should be set. (optional)"
        },
        "noShowFee": {
          "$ref": "#/definitions/v3NoShowFee",
          "title": "Defines a no show fee that may be charged to the user. If the user can be\ncharged a no show fee, this field should be set. (optional)"
        },
        "paymentProcessedBy": {
          "$ref": "#/definitions/PaymentInformationPaymentProcessedBy",
          "title": "Whether the partner or Google processed the payment. (required)"
        },
        "paymentOptionId": {
          "type": "string",
          "description": "The id of the payment option associated with this booking. If this field\nis populated, price (and tax_amount, if applicable) must be  populated as\nwell."
        },
        "userPaymentOptionId": {
          "type": "string",
          "description": "The id of the user payment option used to pay for this booking."
        },
        "fraudSignals": {
          "type": "string",
          "description": "Fraud signals that are sent to the partner as per agreement with Google.\nThe signals are sent via a serialized JSON blob."
        },
        "paResponse": {
          "type": "string",
          "description": "After we engage in a 3DS1 protocol gaining further authentication\ninformation from a user, this payload is returned to us from an ACS\nprovider, and it should be used by the partner to complete the 3DS1\nprotocol."
        },
        "mdMerchantData": {
          "type": "string",
          "description": "After we engage in a 3DS1 protocol gaining further authentication\ninformation from a user, this payload may be returned to us from an ACS\nprovider, and if provided, it should be used by the partner to complete the\n3DS1 protocol."
        }
      },
      "description": "Payment details that are sent when creating a new transaction (which could be\na booking, order, or parking session)."
    },
    "v3PaymentOptionType": {
      "type": "string",
      "enum": [
        "PAYMENT_OPTION_TYPE_UNSPECIFIED",
        "PAYMENT_OPTION_SINGLE_USE",
        "PAYMENT_OPTION_MULTI_USE",
        "PAYMENT_OPTION_UNLIMITED_USE"
      ],
      "default": "PAYMENT_OPTION_TYPE_UNSPECIFIED"
    },
    "v3PaymentProcessingParameters": {
      "type": "object",
      "properties": {
        "processor": {
          "$ref": "#/definitions/PaymentProcessingParametersPaymentProcessor",
          "description": "Replaced by the payment_processor field.",
          "title": "The payment processor used to process payment for a given booking.\n(required)"
        },
        "paymentMethodToken": {
          "type": "string",
          "description": "The token representing the payment method that will be used to pay\nfor this booking. This token can be only used once. This token can be\nonly used for the merchant associated with this booking.\n\nEach processor may choose its own format for this field.\nAn example of Stripe's token is \"tok_1C3orL2eZvKYlo2CxReMgS4K\".\n\nReplaced by unparsed_payment_method_token, which contains\npayment_method_token as one of its fields.\nFor example, for Stripe, unparsed_payment_method_token is a serialized\nJSON object documented at https://stripe.com/docs/api#token_object.\npayment_method_token is the 'id' field parsed out of that."
        },
        "unparsedPaymentMethodToken": {
          "type": "string",
          "description": "This token can only be used once, and only for the merchant associated with\nthis booking.\n\n[(datapol.semantic_type) = ST_PAYMENTS_INFO];",
          "title": "The full token received from Google Payments.  This is typically a\nserialized JSON object.  See documentation from Google Payments and your\npayment processor for the JSON format of the token for your processor.\nhttps://developers.google.com/pay/api/#participating-google-pay-processors"
        },
        "version": {
          "type": "string",
          "description": "The payment processor API version that the given payment token is valid\nfor.\n\nEach processor may choose its own format for this field.\nStripe uses a date (e.g. \"2017-06-15\"). (required if and only if the\npayment processor has a tokenization parameter for version)\nThis is deprecated in favor of tokenization_parameters."
        },
        "paymentProcessor": {
          "type": "string",
          "description": "The payment processor whose configuration was used to generate this token.\n(required)\nThis is deprecated in favor of tokenization_parameters."
        },
        "tokenizationConfig": {
          "$ref": "#/definitions/v3TokenizationConfig",
          "description": "The tokenization_config supplied in the Merchant feed that was used\nto generate unparsed_payment_method_token."
        }
      }
    },
    "v3PostalAddress": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "title": "The country, e.g. \"US\". (required)"
        },
        "locality": {
          "type": "string",
          "title": "The locality/city, e.g. \"Mountain View\". (required)"
        },
        "region": {
          "type": "string",
          "title": "The region/state/province, e.g. \"CA\". This field is only required in\ncountries where region is commonly a part of the address. (optional)"
        },
        "postalCode": {
          "type": "string",
          "title": "The postal code, e.g. \"94043\". (required)"
        },
        "streetAddress": {
          "type": "string",
          "title": "The street address, e.g. \"1600 Amphitheatre Pkwy\". (required)"
        }
      },
      "description": "The postal address for a merchant."
    },
    "v3PrepaymentStatus": {
      "type": "string",
      "enum": [
        "PREPAYMENT_STATUS_UNSPECIFIED",
        "PREPAYMENT_PROVIDED",
        "PREPAYMENT_NOT_PROVIDED",
        "PREPAYMENT_REFUNDED",
        "PREPAYMENT_CREDITED"
      ],
      "default": "PREPAYMENT_STATUS_UNSPECIFIED",
      "description": "Prepayment status of a booking.\nUpdating payment status will trigger an update on the payment status of the\nassociated booking (if applicable).\nCurrently, the only supported transition is from PREPAYMENT_PROVIDED to\nPREPAYMENT_REFUNDED, which will initiate a non-reversible refund on the\nassociated payment transaction.\n\n - PREPAYMENT_STATUS_UNSPECIFIED: Not specified, defaults to PREPAYMENT_NOT_PROVIDED.\n - PREPAYMENT_PROVIDED: The fee for the booking has been paid in advance.\n - PREPAYMENT_NOT_PROVIDED: The fee for the booking has not been paid in advance.\n - PREPAYMENT_REFUNDED: The fee was previously PREPAYMENT_PROVIDED but has now been refunded.\n - PREPAYMENT_CREDITED: The fee was previously PREPAYMENT_PROVIDED but now has been credited\n(user given a UserPaymentOption as a voucher for the booking).\nIf this is set, the response should also include the updated\nUserPaymentOption."
    },
    "v3Price": {
      "type": "object",
      "properties": {
        "priceMicros": {
          "type": "string",
          "format": "int64",
          "title": "The price in micro-units of the currency.\nFor example: 1.95 USD is 1950000 in micro-units.\nIf your price contains fractions of the smallest currency unit, then it\nwill be rounded using nearest even rounding (e.g. 2.5 cents rounded\nto 2 cents, 3.5 cents rounded to 4 cents, 0.5 cents rounded to 0 cents,\n2.51 cents rounded to 3 cents). (required)"
        },
        "currencyCode": {
          "type": "string",
          "title": "The currency of the price that is defined in ISO 4217. (required)"
        },
        "pricingOptionTag": {
          "type": "string",
          "title": "An optional and opaque string that identifies the pricing option that is\nassociated with the extended price. (optional)"
        }
      },
      "description": "The price of a service or a fee."
    },
    "v3PriceType": {
      "type": "string",
      "enum": [
        "FIXED_RATE_DEFAULT",
        "PER_PERSON"
      ],
      "default": "FIXED_RATE_DEFAULT",
      "description": "Defines how a total price is determined from an availability.\n\n - FIXED_RATE_DEFAULT: The price is for a fixed amount. This is the default value if the field is\nnot set.\n\nExamples:\n  $50 deposit to reserve a table; $20 no show fee for a yoga class\n - PER_PERSON: The price specified is per person, and the total price is calculated\naccording to the party size specified in Resources as price_micros *\nparty_size. A PER_PERSON price must be accompanied by a party size in the\navailability resources. If it is not, a party size of one is used.\n\nExamples:\n  $10 each for tickets to a museum"
    },
    "v3ResourceIds": {
      "type": "object",
      "properties": {
        "staffId": {
          "type": "string",
          "title": "The staff ID as provided in the feed or empty if not applicable or no staff\nwas selected. (optional)"
        },
        "roomId": {
          "type": "string",
          "title": "The room ID as provided in the feed or empty if not applicable or no room\nwas selected. (optional)"
        },
        "partySize": {
          "type": "integer",
          "format": "int32",
          "title": "For Dining Reservations only: the number of seats requested in the booking.\n(optional)"
        }
      },
      "title": "Resource specification that disambiguates an appointment slot"
    },
    "v3Slot": {
      "type": "object",
      "properties": {
        "merchantId": {
          "type": "string",
          "title": "ID of the merchant for the slot (required for CreateBooking)"
        },
        "serviceId": {
          "type": "string",
          "title": "ID of the merchant Service (required for CreateBooking)"
        },
        "startSec": {
          "type": "string",
          "format": "int64",
          "title": "Start time of the appointment slot in seconds of UTC time since Unix epoch.\n(required for CreateBooking)"
        },
        "durationSec": {
          "type": "string",
          "format": "int64",
          "title": "Duration of the appointment slot (required for CreateBooking)"
        },
        "availabilityTag": {
          "type": "string",
          "title": "Opaque tag that identifies the availability slot and matches the value\nprovided in the availability feed (optional)"
        },
        "resources": {
          "$ref": "#/definitions/v3ResourceIds",
          "title": "The set of resources that disambiguates the appointment slot, e.g. by\nindicating the staff member and room selected by the user (optional)"
        },
        "confirmationMode": {
          "$ref": "#/definitions/v3ConfirmationMode",
          "description": "Indicates whether bookings of this slot will be confirmed\nsynchronously or asynchronously. (optional)\nAn UNSPECIFIED value will be interpreted as synchronous."
        }
      },
      "title": "An inventory slot"
    },
    "v3SlotTime": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string",
          "title": "ID of the service. (required)"
        },
        "startSec": {
          "type": "string",
          "format": "int64",
          "title": "Start time of the appointment slot in seconds of UTC time since Unix epoch\n(required)"
        },
        "durationSec": {
          "type": "string",
          "format": "int64",
          "title": "Duration of the appointment slot in seconds (optional)"
        },
        "availabilityTag": {
          "type": "string",
          "title": "Opaque tag that identifies the availability slot and matches the value\nprovided in the availability feed (optional)"
        },
        "resourceIds": {
          "$ref": "#/definitions/v3ResourceIds",
          "title": "The set of resources that specifies the appointment slot, e.g. by\nindicating the staff member and room selected by the user, or party size\nfor dining slots (optional)"
        },
        "confirmationMode": {
          "$ref": "#/definitions/v3ConfirmationMode",
          "description": "Indicates whether bookings of this slot will be confirmed\nsynchronously or asynchronously. (optional)\nAn UNSPECIFIED value will be interpreted as synchronous."
        }
      },
      "description": "Identifies a Slot service_id and start time and optionally, the Slot duration\nand resources, for a specific merchant. Note that this differs from the\ndefinition of Slot, as it does not include merchant_id identifier."
    },
    "v3SlotTimeAvailability": {
      "type": "object",
      "properties": {
        "slotTime": {
          "$ref": "#/definitions/v3SlotTime",
          "description": "The SlotTime for which availability was checked."
        },
        "available": {
          "type": "boolean",
          "title": "Whether the requested SlotTime is available"
        }
      }
    },
    "v3TokenizationConfig": {
      "type": "object",
      "properties": {
        "tokenizationParameter": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A tokenization configuration will typically have one\ntokenization_parameter whose key is \"gateway\" and whose value is the\nname of the processor.\n\nThe rest of the parameters are dependent on the processor.  See\ndocumentation from Google Pay and your processor for further information.\nhttps://developers.google.com/pay/api/web/object-reference# \\\n  PaymentMethodTokenizationSpecification\nhttps://developers.google.com/pay/api/#participating-google-pay-processors\n\nBraintree example:\ntokenization_parameter { key: \"gateway\" value: \"braintree\" }\ntokenization_parameter { key: \"braintree:apiVersion\" value: \"v1\" }\ntokenization_parameter { key: \"braintree:sdkVersion\" value: \"2.30.0\" }\ntokenization_parameter { key: \"braintree:merchantId\" value: \"abcdef\" }\ntokenization_parameter { key: \"braintree:clientKey\"\n                         value: \"production_xxx_yyy\" }\n\nStripe example:\ntokenization_parameter { key: \"gateway\" value: \"stripe\" }\ntokenization_parameter { key: \"stripe:version\" value: \"2018-02-28\" }\ntokenization_parameter { key: \"stripe:publishableKey\" value: \"pk_1234\" }\n\nAdyen example:\ntokenization_parameter { key: \"gateway\" value: \"adyen\" }\ntokenization_parameter { key: \"gatewayMerchantId\" value: \"yourId\" }"
        },
        "billingInformationFormat": {
          "$ref": "#/definitions/TokenizationConfigBillingInformationFormat",
          "description": "Include in the payment token the user's billing information as entered into\nGoogle Pay with their FOP (see above)."
        },
        "merchantOfRecordName": {
          "type": "string",
          "description": "Name of the Merchant Of Record (MOR).  This user-visible name will be shown\nin 3DS2 challenges.  In some cases, this is the Merchant, in others this is\nthe Aggregator."
        },
        "paymentCountryCode": {
          "type": "string",
          "description": "Country where transaction will be processed, in ISO 3166-1 alpha-2 form."
        },
        "cardNetworkParameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TokenizationConfigCardNetworkParameters"
          },
          "description": "Per-Card Network processing parameters.\n\nThese are currently only required for PSD2\n(https://en.wikipedia.org/wiki/Payment_Services_Directive)\nprocessing when payment_country_code is a European country where PSD2 is in\neffect.  They are also only currently required for VISA and\nAMERICAN_EXPRESS."
        },
        "allowedAuthMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenizationConfigAuthMethod"
          },
          "description": "Defines types of cardholder data that are accepted by the gateway.\nIf not specified, no restrictions are applied.\n\nNote that partners who use commercial gateways should leave this\nempty unless their gateway provider has specified otherwise.  Restricting\nallowed_auth_methods is most useful in the scenario that a partner\nintegrates with GPay as a gateway themselves."
        }
      },
      "description": "A configuration for payment-processor tokenization, set up on a per-Merchant\nbasis."
    },
    "v3UpdateBookingRequest": {
      "type": "object",
      "properties": {
        "booking": {
          "$ref": "#/definitions/v3Booking",
          "description": "The booking to be updated\nThe following fields can be set in a booking:\n- status, to cancel a booking.\n- one of the following is required:\n  - start_time AND duration in the slot, to reschedule a booking.\n  - party_size (for dining reservations)."
        }
      },
      "description": "Request to update a Booking."
    },
    "v3UpdateBookingResponse": {
      "type": "object",
      "properties": {
        "booking": {
          "$ref": "#/definitions/v3Booking",
          "title": "The updated booking (required)"
        },
        "userPaymentOption": {
          "$ref": "#/definitions/v3UserPaymentOption",
          "title": "The updated user payment option originally used to pay for this booking.\nThis should be set if the UpdateBookingRequest results in a change to\nthe UserPaymentOption.\nFor instance, if the booking is canceled, the UserPaymentOption should\nreflect an additional credit to the user. In the case of a multi-use\npayment option, the current_count should be increased by one to\nallow the user to create another booking with this payment option. In the\ncase of a single-use payment option, a new single-use user payment option\nshould be returned. (required if altered in update)"
        },
        "bookingFailure": {
          "$ref": "#/definitions/v3BookingFailure",
          "title": "If updating a booking fails, this field should reflect the business logic\nerror (e.g., booking is not cancellable) (required if failure occurs)"
        }
      },
      "description": "Response with the updated Booking."
    },
    "v3UserInformation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "Unique ID of the user to the partner, chosen by Reserve with Google.\n(required)"
        },
        "givenName": {
          "type": "string",
          "title": "Given name of the user (maximum 40 characters) (required)"
        },
        "familyName": {
          "type": "string",
          "title": "Family name of the user (maximum 40 characters) (required)"
        },
        "address": {
          "$ref": "#/definitions/v3PostalAddress",
          "title": "Address of the user (optional)"
        },
        "telephone": {
          "type": "string",
          "title": "Phone number of the user (required)\nConsistent with the international definition in ITU-T E.123 recommendation.\nHowever, local conventions are also followed, such as using '-' instead of\na space as separator. For example, a phone number in the US can be\nwritten as '+1 415-736-0000'"
        },
        "email": {
          "type": "string",
          "title": "Email address of the user (required except for waitlists)"
        },
        "languageCode": {
          "type": "string",
          "title": "User's language code, in IETF BCP 47 format. It is sent only if a partner\nis allowed to use this feature. Please contact Reserve with Google team\nto be added to the allowlist and receive this code. (optional)"
        }
      },
      "description": "Personal information about the person taking action (e.g. making a\nbooking, an order, or creates a parking session)."
    },
    "v3UserPaymentOption": {
      "type": "object",
      "properties": {
        "userPaymentOptionId": {
          "type": "string",
          "title": "A unique identifier for the user payment option. This Id MUST be unique\nfor all UserPaymentOptions across all merchants and users. (required)"
        },
        "validStartTimeSec": {
          "type": "string",
          "format": "int64",
          "title": "The user payment option will be valid (usable) between start_time and\nend_time set in UTC. Attempts to use a user payment option to make a\nbooking outside of this interval will fail. (both optional)"
        },
        "validEndTimeSec": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/v3PaymentOptionType",
          "title": "The type of the payment option associated with this user payment option.\nThis can be unlimited for a membership or subscription, multi-use for a\npack, or single-use. (required)"
        },
        "originalCount": {
          "type": "integer",
          "format": "int32",
          "title": "The original number of uses for this user payment option when it was\npurchased. This value is ignored for unlimited payment options. (required)"
        },
        "currentCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of uses remaining for this user payment option. If this number\nis 0 for a pack, attempts to use this payment option to make a booking will\nfail. (required)"
        },
        "paymentOptionId": {
          "type": "string",
          "title": "The id of the payment option that has been used to purchase this user\npayment option. (required)"
        }
      },
      "description": "This describes a payment option, such as a pack, membership, or\nsingle-session pass after it has been purchased by a user. It includes an\nidentifier for the user payment option, as well as some information about\nthe payment option with which it is associated."
    },
    "v3VirtualSessionInfo": {
      "type": "object",
      "properties": {
        "sessionUrl": {
          "type": "string",
          "title": "URL which was created for the virtual session. (optional)"
        },
        "meetingId": {
          "type": "string",
          "title": "The meeting id which was created for the virtual session. (optional)"
        },
        "password": {
          "type": "string",
          "title": "Password required to access the session. (optional)"
        }
      },
      "description": "Information related to the virtual session which was booked."
    },
    "vendastatypesDateRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "vendastatypesFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    }
  }
}
