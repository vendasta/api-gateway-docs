{
  "swagger": "2.0",
  "info": {
    "title": "shoppable_feed/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ShoppableFeed"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/shoppablefeed.v1.ShoppableFeed/ActivatePagePost": {
      "post": {
        "summary": "ActivatePagePost sets the posts on the specified page to active",
        "operationId": "ShoppableFeed_ActivatePagePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ActivatePagePostRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/CreatePage": {
      "post": {
        "summary": "CreatePage creates a new shoppable feed page",
        "operationId": "ShoppableFeed_CreatePage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePageRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/CreatePagePost": {
      "post": {
        "summary": "CreatePagePost creates a new post on a shoppable feed page",
        "operationId": "ShoppableFeed_CreatePagePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePagePostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePagePostRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/DeletePage": {
      "post": {
        "summary": "DeletePage deletes an existing page",
        "operationId": "ShoppableFeed_DeletePage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePageRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/GetActivePage": {
      "post": {
        "summary": "GetActivePage gets the active page for this social service",
        "operationId": "ShoppableFeed_GetActivePage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActivePageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivePageRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/GetPagePost": {
      "post": {
        "summary": "GetPagePost gets a single page post",
        "operationId": "ShoppableFeed_GetPagePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPagePostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPagePostRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/GetUnlinkedPage": {
      "post": {
        "summary": "GetUnlinkedPage gets the domain of an existing unlinked page",
        "operationId": "ShoppableFeed_GetUnlinkedPage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUnlinkedPageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUnlinkedPageRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/IsDomainNameUnique": {
      "post": {
        "summary": "IsDomainNameUnique checks for name uniqueness",
        "operationId": "ShoppableFeed_IsDomainNameUnique",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsDomainNameUniqueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IsDomainNameUniqueRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/ListPostsByDomainName": {
      "post": {
        "summary": "ListPostsByDomainName gets all the posts for a specific page",
        "operationId": "ShoppableFeed_ListPostsByDomainName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPostsByDomainNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPostsByDomainNameRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/RestorePage": {
      "post": {
        "summary": "RestorePage activates a deactivated page",
        "operationId": "ShoppableFeed_RestorePage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RestorePageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RestorePageRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/UpdateDomainName": {
      "post": {
        "summary": "UpdateDomainName updates an existing pages' name",
        "operationId": "ShoppableFeed_UpdateDomainName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateDomainNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDomainNameRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/UpdatePagePost": {
      "post": {
        "summary": "UpdatePagePost updates an existing post on a shoppable feed page",
        "operationId": "ShoppableFeed_UpdatePagePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePagePostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePagePostRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    },
    "/shoppablefeed.v1.ShoppableFeed/UpdatePageSettings": {
      "post": {
        "summary": "UpdatePageSettings allows edits to the page settings",
        "operationId": "ShoppableFeed_UpdatePageSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePageSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePageSettingsRequest"
            }
          }
        ],
        "tags": [
          "ShoppableFeed"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ActivatePagePostRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id for this business"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service id for this network"
        },
        "postId": {
          "type": "string",
          "title": "The unique id for this post"
        }
      },
      "title": "ActivatePagePostRequest for setting the post on the specified page to active"
    },
    "v1CreatePagePostRequest": {
      "type": "object",
      "properties": {
        "pagePost": {
          "$ref": "#/definitions/v1PagePost",
          "title": "Page post holds all the info related to a post"
        }
      },
      "title": "CreatePagePost creates a new post on a shoppable feed page"
    },
    "v1CreatePagePostResponse": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "string",
          "title": "The newly created post id"
        }
      },
      "title": "CreatePagePostRequest for a new post on a shoppable feed page"
    },
    "v1CreatePageRequest": {
      "type": "object",
      "properties": {
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The settings for this page"
        },
        "domainName": {
          "type": "string",
          "title": "The domain name"
        }
      },
      "title": "CreatePageRequest for creating a new shoppable feed page"
    },
    "v1CreatePageResponse": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string",
          "title": "The newly created page id"
        }
      },
      "title": "CreatePageResponse returns the newly created page id"
    },
    "v1DeletePageRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id for this business"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service id for this network"
        },
        "pageId": {
          "type": "string",
          "title": "The unique id for this page"
        }
      },
      "title": "DeletePageRequest for deleting an existing page"
    },
    "v1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1GetActivePageRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id for this business"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service id for this network"
        }
      },
      "title": "GetActivePageRequest for getting the active page for this social service"
    },
    "v1GetActivePageResponse": {
      "type": "object",
      "properties": {
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The active page settings"
        },
        "domainName": {
          "type": "string",
          "title": "The domain name"
        }
      },
      "title": "GetActivePageResponse returns the active page settings"
    },
    "v1GetPagePostRequest": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string",
          "title": "The unique page id"
        },
        "postId": {
          "type": "string",
          "title": "The unique post id"
        }
      },
      "title": "GetPagePostRequest for getting a single post"
    },
    "v1GetPagePostResponse": {
      "type": "object",
      "properties": {
        "pagePost": {
          "$ref": "#/definitions/v1PagePost",
          "title": "The existing page post"
        }
      },
      "title": "GetPagePostResponse returns the page post if exists"
    },
    "v1GetUnlinkedPageRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "newSocialServiceId": {
          "type": "string",
          "title": "The new social service id to link the page to"
        }
      },
      "title": "GetUnlinkedPageRequest for getting an existing unlinked page on an account"
    },
    "v1GetUnlinkedPageResponse": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string",
          "title": "The domain of an unlinked page"
        },
        "pageId": {
          "type": "string",
          "title": "The unlinked page id"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The ssid associated with the unlinked page"
        }
      },
      "title": "GetUnlinkedPageResponse returns the domain of an existing unlinked page"
    },
    "v1IsDomainNameUniqueRequest": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string",
          "title": "The domain name"
        }
      },
      "title": "IsDomainNameUniqueRequest for checking domain name uniqueness"
    },
    "v1IsDomainNameUniqueResponse": {
      "type": "object",
      "properties": {
        "isUnique": {
          "type": "boolean",
          "title": "The page name"
        }
      },
      "title": "IsDomainNameUniqueResponse returns whether the name is unique"
    },
    "v1ListPostsByDomainNameRequest": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string",
          "title": "The unique domain name"
        },
        "cursor": {
          "type": "string",
          "title": "The next cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The requested page size"
        }
      },
      "title": "ListPostsByDomainNameRequest for getting all the posts for a specific page"
    },
    "v1ListPostsByDomainNameResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PagePost"
          },
          "title": "All the active posts on this page"
        },
        "nextCursor": {
          "type": "string",
          "title": "The next cursor"
        },
        "hasMore": {
          "type": "boolean",
          "title": "If there are more results not already returned"
        },
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The page settings for this domain"
        }
      },
      "title": "ListPostsByDomainNameResponse returns all the posts for the page"
    },
    "v1PagePost": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string",
          "title": "The page id"
        },
        "postId": {
          "type": "string",
          "title": "The post id"
        },
        "imageUrl": {
          "type": "string",
          "title": "The image url for this post"
        },
        "permalink": {
          "type": "string",
          "title": "The link where this post should lead"
        },
        "postedDate": {
          "type": "string",
          "format": "date-time",
          "title": "The date of the original post on the social network"
        },
        "isActive": {
          "type": "boolean",
          "title": "Is post active"
        }
      },
      "title": "PagePost holds all the info relating to a single post"
    },
    "v1PageSettings": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The social service id"
        },
        "pageId": {
          "type": "string",
          "title": "The unique page id"
        },
        "pageTitle": {
          "type": "string",
          "title": "The page title"
        },
        "pageLogoUrl": {
          "type": "string",
          "title": "The page logo image url"
        },
        "shouldShowWebsiteButton": {
          "type": "boolean",
          "title": "Should show the button to external website"
        },
        "buttonText": {
          "type": "string",
          "title": "The button text"
        },
        "buttonLink": {
          "type": "string",
          "title": "The button link"
        }
      },
      "title": "Page settings holds all the info relating to a page"
    },
    "v1RestorePageRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id for this business"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The new service id for this network"
        },
        "pageId": {
          "type": "string",
          "title": "The unique id for this page"
        }
      },
      "title": "RestorePageRequest for activating a deactivated page"
    },
    "v1RestorePageResponse": {
      "type": "object",
      "properties": {
        "isPageActive": {
          "type": "boolean"
        },
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The page settings for the newly linked up page, copied over from the old version"
        },
        "domainName": {
          "type": "string",
          "title": "domainName of the new pageAgidMap"
        }
      },
      "description": "RestorePageResponse returns if the page is active, and if it is the pageSettings and domainName as well."
    },
    "v1UpdateDomainNameRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id for this business"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service id for this network"
        },
        "pageId": {
          "type": "string",
          "title": "The unique id for this page"
        },
        "newDomainName": {
          "type": "string",
          "title": "The new page name"
        }
      },
      "title": "UpdateDomainNameRequest updates an existing pages' domain name"
    },
    "v1UpdateDomainNameResponse": {
      "type": "object",
      "properties": {
        "newDomainName": {
          "type": "string",
          "title": "The new domain name"
        }
      },
      "title": "UpdateDomainNameResponse returns the newly updated page name"
    },
    "v1UpdatePagePostRequest": {
      "type": "object",
      "properties": {
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "Map of changed fields"
        },
        "pagePost": {
          "$ref": "#/definitions/v1PagePost",
          "title": "The page post update"
        }
      },
      "title": "UpdatePagePostRequest for editing a page post"
    },
    "v1UpdatePagePostResponse": {
      "type": "object",
      "properties": {
        "pagePost": {
          "$ref": "#/definitions/v1PagePost",
          "title": "The updated page post"
        }
      },
      "title": "UpdatePagePostResponse returns the edited page post"
    },
    "v1UpdatePageSettingsRequest": {
      "type": "object",
      "properties": {
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "Map of changed fields"
        },
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The settings for this page"
        }
      },
      "title": "UpdatePageSettingsRequest for editing the page settings"
    },
    "v1UpdatePageSettingsResponse": {
      "type": "object",
      "properties": {
        "pageSettings": {
          "$ref": "#/definitions/v1PageSettings",
          "title": "The settings for this page"
        }
      },
      "title": "UpdatePageSettingsResponse returns the edited page settings"
    }
  }
}
