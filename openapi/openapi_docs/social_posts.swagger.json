{
  "swagger": "2.0",
  "info": {
    "title": "social_posts/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "HashTags"
    },
    {
      "name": "PixabayImages"
    },
    {
      "name": "TenorGifs"
    },
    {
      "name": "SocialPosts"
    },
    {
      "name": "PartnerSocialPosts"
    },
    {
      "name": "PostTemplates"
    },
    {
      "name": "MultilocationPostService"
    },
    {
      "name": "PostPerformance"
    },
    {
      "name": "SocialPostsV2"
    },
    {
      "name": "Linkedin"
    },
    {
      "name": "CommonAiInstructions"
    },
    {
      "name": "Unsplash"
    },
    {
      "name": "ContentGeneration"
    },
    {
      "name": "CuratedContent"
    },
    {
      "name": "BlogConnectionService"
    },
    {
      "name": "CampaignService"
    },
    {
      "name": "ChatBot"
    },
    {
      "name": "ChatBotV2"
    },
    {
      "name": "WordpressPluginService"
    },
    {
      "name": "BlogPostsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/socialposts.v1.HashTags/DeleteHashtags": {
      "post": {
        "summary": "Bulk delete hashtag model",
        "operationId": "HashTags_DeleteHashtags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteHashtagsRequest"
            }
          }
        ],
        "tags": [
          "HashTags"
        ]
      }
    },
    "/socialposts.v1.HashTags/ReplaceHashtags": {
      "post": {
        "summary": "Bulk create or update hashtag model",
        "operationId": "HashTags_ReplaceHashtags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReplaceHashtagsRequest"
            }
          }
        ],
        "tags": [
          "HashTags"
        ]
      }
    },
    "/socialposts.v1.HashTags/SearchHashtag": {
      "post": {
        "summary": "Search for hashtags based on provided filter",
        "operationId": "HashTags_SearchHashtag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchHashtagResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SearchHashtagRequest"
            }
          }
        ],
        "tags": [
          "HashTags"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/BulkCreateMultilocationPost": {
      "post": {
        "summary": "BulkCreateMultilocationPost is called to create a bulk upload in multilocation",
        "operationId": "MultilocationPostService_BulkCreateMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkCreateMultilocationPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkCreateMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/CreateMultilocationPost": {
      "post": {
        "summary": "CreateMultilocationPost is called to create a multilocation post",
        "operationId": "MultilocationPostService_CreateMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateMultilocationPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/DeleteMultilocationPost": {
      "post": {
        "summary": "DeleteMultilocationPost is called to delete multilocation post",
        "operationId": "MultilocationPostService_DeleteMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/EditMultilocationPost": {
      "post": {
        "summary": "EditMultilocationPost is called to edit a multilocation post",
        "operationId": "MultilocationPostService_EditMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EditMultilocationPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EditMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/GetMultilocationPost": {
      "post": {
        "summary": "GetMultilocationPost is called to get a single multilocation post based on\nbrand_id and multilocation_id",
        "operationId": "MultilocationPostService_GetMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultilocationPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/ListMultilocationPostsForBrand": {
      "post": {
        "summary": "ListMultilocationPostsForBrand is called to retrieve a list multilocation\npost based on a date range",
        "operationId": "MultilocationPostService_ListMultilocationPostsForBrand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMultilocationPostsForBrandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListMultilocationPostsForBrandRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.MultilocationPostService/RemoveFromMultilocationPost": {
      "post": {
        "summary": "RemoveFromMultilocationPost is called to remove(edit/delete) a\nmultilocation post",
        "operationId": "MultilocationPostService_RemoveFromMultilocationPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveFromMultilocationPostRequest"
            }
          }
        ],
        "tags": [
          "MultilocationPostService"
        ]
      }
    },
    "/socialposts.v1.PartnerSocialPosts/ListScheduled": {
      "post": {
        "summary": "List all the scheduled social posts of all accounts of a partner scheduled\nfor a certain time period",
        "operationId": "PartnerSocialPosts_ListScheduled",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartnerListScheduledPostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PartnerListScheduledSocialPostsRequest"
            }
          }
        ],
        "tags": [
          "PartnerSocialPosts"
        ]
      }
    },
    "/socialposts.v1.PartnerSocialPosts/ListScheduledByCreated": {
      "post": {
        "summary": "List all the scheduled social posts of all accounts of a partner created\nduring a certain time period",
        "operationId": "PartnerSocialPosts_ListScheduledByCreated",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartnerListScheduledPostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PartnerListScheduledSocialPostsRequest"
            }
          }
        ],
        "tags": [
          "PartnerSocialPosts"
        ]
      }
    },
    "/socialposts.v1.PixabayImages/ListPixabayImages": {
      "post": {
        "summary": "List pixabay images for a given query",
        "operationId": "PixabayImages_ListPixabayImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPixabayImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPixabayImagesRequest"
            }
          }
        ],
        "tags": [
          "PixabayImages"
        ]
      }
    },
    "/socialposts.v1.PostPerformance/GenerateCSVForPerformanceStats": {
      "post": {
        "summary": "Trigger csv generation  for performance stats",
        "operationId": "PostPerformance_GenerateCSVForPerformanceStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateCSVForPerformanceStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateCSVForPerformanceStatsRequest"
            }
          }
        ],
        "tags": [
          "PostPerformance"
        ]
      }
    },
    "/socialposts.v1.PostPerformance/GetGeneratedCSVForPerformanceStats": {
      "post": {
        "summary": "This endpoint is currently just a placeholder and would be in use if we\nimplement caching for multiple downloads etc",
        "operationId": "PostPerformance_GetGeneratedCSVForPerformanceStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGeneratedCSVForPerformanceStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetGeneratedCSVForPerformanceStatsRequest"
            }
          }
        ],
        "tags": [
          "PostPerformance"
        ]
      }
    },
    "/socialposts.v1.PostTemplates/CreatePostTemplate": {
      "post": {
        "summary": "Creates a new PostTemplate",
        "operationId": "PostTemplates_CreatePostTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePostTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePostTemplateRequest"
            }
          }
        ],
        "tags": [
          "PostTemplates"
        ]
      }
    },
    "/socialposts.v1.PostTemplates/DeletePostTemplate": {
      "post": {
        "summary": "Deletes a Post Template",
        "operationId": "PostTemplates_DeletePostTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePostTemplateRequest"
            }
          }
        ],
        "tags": [
          "PostTemplates"
        ]
      }
    },
    "/socialposts.v1.PostTemplates/GetPostTemplate": {
      "post": {
        "summary": "Gets an existing PostTemplate",
        "operationId": "PostTemplates_GetPostTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPostTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPostTemplateRequest"
            }
          }
        ],
        "tags": [
          "PostTemplates"
        ]
      }
    },
    "/socialposts.v1.PostTemplates/ListPostTemplates": {
      "post": {
        "summary": "Lists Post Templates for a given AGID",
        "operationId": "PostTemplates_ListPostTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPostTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPostTemplatesRequest"
            }
          }
        ],
        "tags": [
          "PostTemplates"
        ]
      }
    },
    "/socialposts.v1.PostTemplates/UpdatePostTemplate": {
      "post": {
        "summary": "Updates an already existing PostTemplate",
        "operationId": "PostTemplates_UpdatePostTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePostTemplateRequest"
            }
          }
        ],
        "tags": [
          "PostTemplates"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/DeleteSocialPost": {
      "post": {
        "summary": "Delete a social post",
        "operationId": "SocialPosts_DeleteSocialPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteSocialPostRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/GetMultiSocialPostStats": {
      "post": {
        "summary": "Get multi socialPostStats of a list of facebook post or twitter post",
        "operationId": "SocialPosts_GetMultiSocialPostStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiSocialPostStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiSocialPostStatsRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/GetMultiSocialPosts": {
      "post": {
        "summary": "Get multiple social posts from a list of IDs",
        "operationId": "SocialPosts_GetMultiSocialPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiSocialPostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetMultiSocialPostsRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/GetScheduledPostCount": {
      "post": {
        "summary": "Get scheduled post count total for a partner and business",
        "operationId": "SocialPosts_GetScheduledPostCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetScheduledPostCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetScheduledPostCountRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/List": {
      "post": {
        "summary": "List the social posts",
        "operationId": "SocialPosts_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSocialPostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSocialPostsRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/Schedule": {
      "post": {
        "summary": "Schedule a post to the specified social services",
        "operationId": "SocialPosts_Schedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SchedulePostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SchedulePostRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/ScheduleToAllPages": {
      "post": {
        "summary": "Will schedule a post to go out to all company social services connected to\nthe account This includes all twitter accounts, Facebook pages (not\nfacebook users), Google plus pages (not google plus users) and LinkedIn\ncompany pages (not linkedin users)",
        "operationId": "SocialPosts_ScheduleToAllPages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ScheduleToAllPagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ScheduleToAllPagesRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.SocialPosts/SuggestMessage": {
      "post": {
        "summary": "Suggest a social message",
        "operationId": "SocialPosts_SuggestMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SuggestMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SuggestMessageRequest"
            }
          }
        ],
        "tags": [
          "SocialPosts"
        ]
      }
    },
    "/socialposts.v1.TenorGifs/GetTenorAnonymousId": {
      "post": {
        "summary": "Gets the anonymous id required to make calls to the tenor api",
        "operationId": "TenorGifs_GetTenorAnonymousId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTenorAnonymousIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetTenorAnonymousIdRequest"
            }
          }
        ],
        "tags": [
          "TenorGifs"
        ]
      }
    },
    "/socialposts.v1.TenorGifs/ListTenorGifs": {
      "post": {
        "summary": "list tenor gifs for a given query",
        "operationId": "TenorGifs_ListTenorGifs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTenorGifsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListTenorGifsRequest"
            }
          }
        ],
        "tags": [
          "TenorGifs"
        ]
      }
    },
    "/socialposts.v2.BlogConnectionService/Create": {
      "post": {
        "operationId": "BlogConnectionService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateBlogConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateBlogConnectionRequest"
            }
          }
        ],
        "tags": [
          "BlogConnectionService"
        ]
      }
    },
    "/socialposts.v2.BlogConnectionService/Delete": {
      "post": {
        "operationId": "BlogConnectionService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeleteBlogConnectionRequest"
            }
          }
        ],
        "tags": [
          "BlogConnectionService"
        ]
      }
    },
    "/socialposts.v2.BlogConnectionService/Get": {
      "post": {
        "operationId": "BlogConnectionService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetBlogConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetBlogConnectionRequest"
            }
          }
        ],
        "tags": [
          "BlogConnectionService"
        ]
      }
    },
    "/socialposts.v2.BlogConnectionService/List": {
      "post": {
        "operationId": "BlogConnectionService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListBlogConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListBlogConnectionRequest"
            }
          }
        ],
        "tags": [
          "BlogConnectionService"
        ]
      }
    },
    "/socialposts.v2.BlogConnectionService/Update": {
      "post": {
        "operationId": "BlogConnectionService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateBlogConnectionRequest"
            }
          }
        ],
        "tags": [
          "BlogConnectionService"
        ]
      }
    },
    "/socialposts.v2.BlogPostsService/DeleteBlogPost": {
      "post": {
        "summary": "This will delete the requested blog post",
        "operationId": "BlogPostsService_DeleteBlogPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeleteBlogPostRequest"
            }
          }
        ],
        "tags": [
          "BlogPostsService"
        ]
      }
    },
    "/socialposts.v2.BlogPostsService/GetMultiBlogPosts": {
      "post": {
        "summary": "List the multiple blog posts based on IDs",
        "operationId": "BlogPostsService_GetMultiBlogPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetMultiBlogPostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetMultiBlogPostsRequest"
            }
          }
        ],
        "tags": [
          "BlogPostsService"
        ]
      }
    },
    "/socialposts.v2.BlogPostsService/UpdateBlogPost": {
      "post": {
        "summary": "This will update the requested blog post",
        "operationId": "BlogPostsService_UpdateBlogPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateBlogPostRequest"
            }
          }
        ],
        "tags": [
          "BlogPostsService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/Create": {
      "post": {
        "operationId": "CampaignService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateCampaignRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/Delete": {
      "post": {
        "operationId": "CampaignService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeleteCampaignRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/Get": {
      "post": {
        "operationId": "CampaignService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetCampaignRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/GetMulti": {
      "post": {
        "operationId": "CampaignService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetMultiCampaignsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetMultiCampaignsRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/Update": {
      "post": {
        "operationId": "CampaignService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateCampaignRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.CampaignService/UpdateCampaignId": {
      "post": {
        "operationId": "CampaignService_UpdateCampaignId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateCampaignIdRequest"
            }
          }
        ],
        "tags": [
          "CampaignService"
        ]
      }
    },
    "/socialposts.v2.ChatBot/EndChat": {
      "post": {
        "operationId": "ChatBot_EndChat",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2EndChatRequest"
            }
          }
        ],
        "tags": [
          "ChatBot"
        ]
      }
    },
    "/socialposts.v2.ChatBot/SendMessage": {
      "post": {
        "operationId": "ChatBot_SendMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SendMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2SendMessageRequest"
            }
          }
        ],
        "tags": [
          "ChatBot"
        ]
      }
    },
    "/socialposts.v2.ChatBot/StartChat": {
      "post": {
        "operationId": "ChatBot_StartChat",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2StartChatResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2StartChatRequest"
            }
          }
        ],
        "tags": [
          "ChatBot"
        ]
      }
    },
    "/socialposts.v2.ChatBotV2/SendMessageV2": {
      "post": {
        "operationId": "ChatBotV2_SendMessageV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SendMessageV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2SendMessageV2Request"
            }
          }
        ],
        "tags": [
          "ChatBotV2"
        ]
      }
    },
    "/socialposts.v2.CommonAiInstructions/CreateCommonAiInstructions": {
      "post": {
        "operationId": "CommonAiInstructions_CreateCommonAiInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateCommonAiInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateCommonAiInstructionsRequest"
            }
          }
        ],
        "tags": [
          "CommonAiInstructions"
        ]
      }
    },
    "/socialposts.v2.CommonAiInstructions/GetCommonAiInstructions": {
      "post": {
        "operationId": "CommonAiInstructions_GetCommonAiInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GetCommonAiInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GetCommonAiInstructionsRequest"
            }
          }
        ],
        "tags": [
          "CommonAiInstructions"
        ]
      }
    },
    "/socialposts.v2.CommonAiInstructions/UpdateCommonAiInstructions": {
      "post": {
        "operationId": "CommonAiInstructions_UpdateCommonAiInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2UpdateCommonAiInstructionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateCommonAiInstructionsRequest"
            }
          }
        ],
        "tags": [
          "CommonAiInstructions"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/FetchLibraryImages": {
      "post": {
        "operationId": "ContentGeneration_FetchLibraryImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2FetchLibraryImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2FetchLibraryImagesRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/Generate": {
      "post": {
        "operationId": "ContentGeneration_Generate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GenerateAiResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GenerateAiRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/GenerateBlogPostCampaign": {
      "post": {
        "operationId": "ContentGeneration_GenerateBlogPostCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GeneratePostCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GenerateBlogPostCampaignRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/GenerateContentMetaData": {
      "post": {
        "operationId": "ContentGeneration_GenerateContentMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GenerateContentMetaDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GenerateContentMetaDataRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/GeneratePostCampaign": {
      "post": {
        "operationId": "ContentGeneration_GeneratePostCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GeneratePostCampaignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GeneratePostCampaignRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.ContentGeneration/GeneratePosts": {
      "post": {
        "operationId": "ContentGeneration_GeneratePosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2GeneratePostsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2GeneratePostsRequest"
            }
          }
        ],
        "tags": [
          "ContentGeneration"
        ]
      }
    },
    "/socialposts.v2.CuratedContent/List": {
      "post": {
        "operationId": "CuratedContent_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListCuratedContentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListCuratedContentRequest"
            }
          }
        ],
        "tags": [
          "CuratedContent"
        ]
      }
    },
    "/socialposts.v2.Linkedin/DeletePost": {
      "post": {
        "summary": "Deletes a post on the Linkedin platform",
        "operationId": "Linkedin_DeletePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2DeletePostRequest"
            }
          }
        ],
        "tags": [
          "Linkedin"
        ]
      }
    },
    "/socialposts.v2.Linkedin/UploadMedia": {
      "post": {
        "summary": "Upload media rpc, to upload any video/gif/image media to linkedIn",
        "operationId": "Linkedin_UploadMedia",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2MediaUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2MediaUploadRequest"
            }
          }
        ],
        "tags": [
          "Linkedin"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/CreateImages": {
      "post": {
        "summary": "Generate images from AI",
        "operationId": "SocialPostsV2_CreateImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CreateImageRequest"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/GenerateVariations": {
      "post": {
        "summary": "Generate Variations",
        "operationId": "SocialPostsV2_GenerateVariations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CreateImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ImageUrl"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/GetImageByUrl": {
      "post": {
        "summary": "Generate images from AI",
        "operationId": "SocialPostsV2_GetImageByUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ImageBlob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ImageUrl"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/RepostSocialPost": {
      "post": {
        "summary": "Repost a failed post",
        "operationId": "SocialPostsV2_RepostSocialPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RepostSocialPostRequest"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/ScheduleSocialPosts": {
      "post": {
        "summary": "Schedule social posts",
        "operationId": "SocialPostsV2_ScheduleSocialPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2SocialPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2SocialPostRequest"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.SocialPostsV2/UpdateSocialPosts": {
      "post": {
        "summary": "Update social posts",
        "operationId": "SocialPostsV2_UpdateSocialPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2UpdateSocialPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UpdateSocialPostRequest"
            }
          }
        ],
        "tags": [
          "SocialPostsV2"
        ]
      }
    },
    "/socialposts.v2.Unsplash/ListUnsplashImages": {
      "post": {
        "operationId": "Unsplash_ListUnsplashImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2ListUnsplashImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListUnsplashImagesRequest"
            }
          }
        ],
        "tags": [
          "Unsplash"
        ]
      }
    },
    "/socialposts.v2.Unsplash/UploadToStorage": {
      "post": {
        "operationId": "Unsplash_UploadToStorage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2UploadToStorageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UploadToStorageRequest"
            }
          }
        ],
        "tags": [
          "Unsplash"
        ]
      }
    },
    "/socialposts.v2.WordpressPluginService/GetAuthors": {
      "post": {
        "summary": "Get the list of authors",
        "operationId": "WordpressPluginService_GetAuthors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2AuthorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2AuthorsRequest"
            }
          }
        ],
        "tags": [
          "WordpressPluginService"
        ]
      }
    },
    "/socialposts.v2.WordpressPluginService/GetCategories": {
      "post": {
        "summary": "Get the Category of the blog",
        "operationId": "WordpressPluginService_GetCategories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2CategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2CategoryRequest"
            }
          }
        ],
        "tags": [
          "WordpressPluginService"
        ]
      }
    },
    "/socialposts.v2.WordpressPluginService/PublishPost": {
      "post": {
        "summary": "Publish a post to the wordpress site",
        "operationId": "WordpressPluginService_PublishPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2PublishPostResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2PublishPostRequest"
            }
          }
        ],
        "tags": [
          "WordpressPluginService"
        ]
      }
    },
    "/socialposts.v2.WordpressPluginService/RepostBlogPost": {
      "post": {
        "operationId": "WordpressPluginService_RepostBlogPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2RepostBlogPostRequest"
            }
          }
        ],
        "tags": [
          "WordpressPluginService"
        ]
      }
    },
    "/socialposts.v2.WordpressPluginService/Status": {
      "post": {
        "summary": "Check the status of the wordpress plugin",
        "operationId": "WordpressPluginService_Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2StatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2StatusRequest"
            }
          }
        ],
        "tags": [
          "WordpressPluginService"
        ]
      }
    }
  },
  "definitions": {
    "CallToActionCallToActionType": {
      "type": "string",
      "enum": [
        "LEARN_MORE",
        "BOOK",
        "ORDER",
        "SHOP",
        "SIGN_UP",
        "GET_OFFER",
        "CALL"
      ],
      "default": "LEARN_MORE",
      "title": "The type of the CTA"
    },
    "PartnerListScheduledSocialPostsRequestFilters": {
      "type": "object",
      "properties": {
        "dateRange": {
          "$ref": "#/definitions/v1DateRangeFilter",
          "title": "Scheduled posts that are scheduled to be posted between begin and end\nOnly one of scheduled_date_filter or created_date_filter can be provided"
        },
        "partnerId": {
          "type": "string"
        }
      }
    },
    "SocialPostDeletionStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "FAILED",
        "IN_PROGRESS"
      ],
      "default": "NONE"
    },
    "SocialPostService": {
      "type": "string",
      "enum": [
        "TWITTER",
        "FACEBOOK",
        "LINKED_IN",
        "GOOGLE_PLUS",
        "GOOGLE_MY_BUSINESS",
        "UNKNOWN",
        "INSTAGRAM",
        "CURATED_CONTENT",
        "YOUTUBE",
        "TIKTOK",
        "WORDPRESS"
      ],
      "default": "TWITTER"
    },
    "YoutubeCustomizationPrivacyStatus": {
      "type": "string",
      "enum": [
        "YOUTUBE_PRIVACY_STATUS_INVALID",
        "YOUTUBE_PRIVACY_STATUS_PUBLIC",
        "YOUTUBE_PRIVACY_STATUS_PRIVATE",
        "YOUTUBE_PRIVACY_STATUS_UNLISTED"
      ],
      "default": "YOUTUBE_PRIVACY_STATUS_INVALID"
    },
    "YoutubeCustomizationV2PrivacyStatusV2": {
      "type": "string",
      "enum": [
        "YOUTUBE_PRIVACY_STATUS_INVALID",
        "YOUTUBE_PRIVACY_STATUS_PUBLIC",
        "YOUTUBE_PRIVACY_STATUS_PRIVATE",
        "YOUTUBE_PRIVACY_STATUS_UNLISTED"
      ],
      "default": "YOUTUBE_PRIVACY_STATUS_INVALID"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "socialpostsv1Author": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the author"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "The id of the author"
        }
      }
    },
    "socialpostsv1Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "The categoryId"
        },
        "name": {
          "type": "string",
          "title": "The category name"
        }
      }
    },
    "socialpostsv1Location": {
      "type": "object",
      "properties": {
        "socialServiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of SSID for the location"
        },
        "accountGroupId": {
          "type": "string",
          "title": "AGID for the location"
        }
      }
    },
    "socialpostsv2Author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "socialpostsv2Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "This is the categoryId"
        },
        "name": {
          "type": "string",
          "title": "This is the category name"
        }
      }
    },
    "socialpostsv2Post": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string",
          "title": "Topic to which the post generated"
        },
        "postContent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2PostContent"
          },
          "title": "Post content by topic"
        }
      }
    },
    "v1BlogPostCustomization": {
      "type": "object",
      "properties": {
        "siteType": {
          "type": "string",
          "title": "The site type of the blog post"
        },
        "author": {
          "$ref": "#/definitions/socialpostsv1Author",
          "title": "The author of the blog post"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Category"
          },
          "title": "The categories of the blog post"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tags of the blog post"
        }
      }
    },
    "v1BulkCreateMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of locations in the original post"
        },
        "request": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BulkUploadMultilocation"
          },
          "title": "Array of CreateMultilocationPostRequest"
        }
      },
      "title": "This is for Bulk upload for multilocation"
    },
    "v1BulkCreateMultilocationPostResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1BulkPostStatus",
          "title": "The status of each post creation"
        },
        "error": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultilocationPostError"
          },
          "title": "Array of MultilocationPostError"
        }
      }
    },
    "v1BulkPostStatus": {
      "type": "string",
      "enum": [
        "SUCCESS",
        "FAILURE"
      ],
      "default": "SUCCESS",
      "title": "Enum to indicate the status of each post creation"
    },
    "v1BulkUploadMultilocation": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "title": "Original post text"
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original media links"
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that the original post was scheduled to go"
        },
        "gifs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original gif links"
        },
        "videos": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original video links"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the post, could be anything"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags required to differentiate posts"
        },
        "customization": {
          "$ref": "#/definitions/v1PostCustomization",
          "title": "Extra specific configurations for the post"
        },
        "linkShortCode": {
          "type": "string",
          "description": "The short code of the link in this post."
        },
        "postTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SSIDPostType"
          },
          "title": "The type of post for each SSID e.g., Image/video/reel/gif etc"
        },
        "multilocationId": {
          "type": "string",
          "title": "Multilocation ID is the key for bulk upload post in multilocation"
        }
      },
      "title": "This message for create BulkUpload in Multilocation"
    },
    "v1CallToAction": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The url for the CTA"
        },
        "actionType": {
          "$ref": "#/definitions/CallToActionCallToActionType"
        }
      }
    },
    "v1CreateMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "text": {
          "type": "string",
          "title": "Original post text"
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original media links"
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that the original post was scheduled to go"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of locations in the original post"
        },
        "gifs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original gif links"
        },
        "videos": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original video links"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the post, could be anything"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags required to differentiate posts"
        },
        "customization": {
          "$ref": "#/definitions/v1PostCustomization",
          "title": "Extra specific configurations for the post"
        },
        "linkShortCode": {
          "type": "string",
          "description": "The short code of the link in this post."
        },
        "postTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SSIDPostType"
          },
          "title": "The type of post for each SSID e.g., Image/video/reel/gif etc"
        }
      }
    },
    "v1CreateMultilocationPostResponse": {
      "type": "object",
      "properties": {
        "post": {
          "$ref": "#/definitions/v1MultilocationPost",
          "title": "The successfully created Multilocation post"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultilocationPostError"
          },
          "title": "Multilocation posts with errors"
        }
      }
    },
    "v1CreatePostTemplateRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "title": {
          "type": "string",
          "title": "The title of the template"
        },
        "postText": {
          "type": "string",
          "title": "Fields covering the contents of the Template"
        },
        "postDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "gmbPostCustomization": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        },
        "imageSize": {
          "type": "string"
        },
        "previews": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "videoUrl": {
          "type": "string"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the media, could be anything"
        },
        "postType": {
          "$ref": "#/definitions/v1PostType",
          "title": "The type of post e.g., Image/video/reel/gif etc"
        },
        "youtubeCustomization": {
          "$ref": "#/definitions/v1YoutubeCustomization",
          "title": "Youtube customization for this template"
        }
      }
    },
    "v1CreatePostTemplateResponse": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string",
          "title": "A brand new unique internal identifier for a PostTemplate object"
        }
      }
    },
    "v1DateRangeFilter": {
      "type": "object",
      "properties": {
        "beginRange": {
          "type": "string",
          "format": "date-time"
        },
        "endRange": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Begin and end of date range"
    },
    "v1DeleteHashtagsRequest": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtag keyword to be deleted"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the account"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the account"
        }
      }
    },
    "v1DeleteMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "multilocationId": {
          "type": "string",
          "title": "MultilocationID"
        }
      }
    },
    "v1DeletePostTemplateRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "templateId": {
          "type": "string",
          "title": "The internal id of the template"
        }
      }
    },
    "v1DeleteSocialPostRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business to delete the social post for"
        },
        "socialPostId": {
          "type": "string",
          "title": "The post id that going to delete"
        }
      }
    },
    "v1EditMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "multilocationId": {
          "type": "string",
          "title": "MultilocationID"
        },
        "text": {
          "type": "string",
          "title": "post text"
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "media links"
        },
        "scheduledDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that the post is scheduled to go"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "title": "Map of changed fields"
        },
        "gifs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "gif links"
        },
        "videos": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "video links"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of locations, either added, removed or original"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the post, could be anything"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags required to differentiate posts"
        },
        "customization": {
          "$ref": "#/definitions/v1PostCustomization",
          "title": "Extra specific configurations for the post"
        },
        "linkShortCode": {
          "type": "string",
          "description": "The short code of the link in this post."
        },
        "postTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SSIDPostType"
          },
          "title": "The type of post for each SSID e.g., Image/video/reel/gif etc"
        }
      }
    },
    "v1EditMultilocationPostResponse": {
      "type": "object",
      "properties": {
        "post": {
          "$ref": "#/definitions/v1MultilocationPost",
          "title": "The successfully created Multilocation post"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultilocationPostError"
          },
          "title": "Any errors that may have occured on individual posts"
        }
      }
    },
    "v1Error": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "v1Event": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "The title of the event"
        },
        "startDatetime": {
          "type": "string",
          "format": "date-time",
          "title": "The start timestamp of the event"
        },
        "endDatetime": {
          "type": "string",
          "format": "date-time",
          "title": "The end timestamp of the evet"
        }
      }
    },
    "v1FacebookPostStats": {
      "type": "object",
      "properties": {
        "commentCount": {
          "type": "string",
          "format": "int64"
        },
        "shareCount": {
          "type": "string",
          "format": "int64"
        },
        "likeCount": {
          "type": "string",
          "format": "int64"
        },
        "hasLike": {
          "type": "boolean"
        },
        "canLike": {
          "type": "boolean"
        },
        "reactions": {
          "type": "string",
          "format": "int64"
        },
        "peopleReached": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1GenerateCSVForPerformanceStatsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "business_id for the stats (e.g., ABC)"
        },
        "postData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PostData"
          },
          "title": "array of maps of post_id, reach and engagement to merge"
        },
        "includeHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of string for getting the headers to be included"
        }
      }
    },
    "v1GenerateCSVForPerformanceStatsResponse": {
      "type": "object",
      "properties": {
        "generatedId": {
          "type": "string",
          "title": "returns just a url string for now\nreason for calling it a generated id is so\nthat in future if we are supporting caching,\nwe can use a id instead of URL"
        }
      }
    },
    "v1GetGeneratedCSVForPerformanceStatsRequest": {
      "type": "object",
      "properties": {
        "generatedId": {
          "type": "string",
          "title": "Same as generated_id from GenerateCSVForPerformanceStatsResponse"
        }
      }
    },
    "v1GetGeneratedCSVForPerformanceStatsResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The csv storage url from google storage (or any other)"
        }
      }
    },
    "v1GetMultiSocialPostStatsRequest": {
      "type": "object",
      "properties": {
        "internalPostIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Internal post id"
        },
        "businessId": {
          "type": "string",
          "title": "account group id"
        },
        "partnerId": {
          "type": "string",
          "title": "partner id"
        }
      }
    },
    "v1GetMultiSocialPostStatsResponse": {
      "type": "object",
      "properties": {
        "socialPostStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SocialPostStats"
          },
          "title": "Post stats entity"
        }
      }
    },
    "v1GetMultiSocialPostsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business ID"
        },
        "internalPostIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The internal post IDs"
        }
      }
    },
    "v1GetMultiSocialPostsResponse": {
      "type": "object",
      "properties": {
        "socialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SocialPost"
          },
          "title": "The requested social posts"
        }
      }
    },
    "v1GetMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "multilocationId": {
          "type": "string",
          "title": "MultilocationID"
        }
      }
    },
    "v1GetMultilocationPostResponse": {
      "type": "object",
      "properties": {
        "multilocationPost": {
          "$ref": "#/definitions/v1MultilocationPost",
          "title": "The requested multilocation post"
        }
      }
    },
    "v1GetPostTemplateRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "templateId": {
          "type": "string",
          "title": "The internal id of the template"
        }
      }
    },
    "v1GetPostTemplateResponse": {
      "type": "object",
      "properties": {
        "postTemplate": {
          "$ref": "#/definitions/v1PostTemplate",
          "title": "The obtained PostTemplate"
        }
      }
    },
    "v1GetScheduledPostCountRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "The partner ID"
        },
        "businessId": {
          "type": "string",
          "title": "The business ID"
        },
        "socialServiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The social service IDs"
        }
      }
    },
    "v1GetScheduledPostCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "title": "The total count of scheduled posts"
        }
      }
    },
    "v1GetTenorAnonymousIdRequest": {
      "type": "object"
    },
    "v1GetTenorAnonymousIdResponse": {
      "type": "object",
      "properties": {
        "anonymousId": {
          "type": "string",
          "title": "Anonyous id to be used for calling tenor"
        }
      }
    },
    "v1Hashtag": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "string",
          "title": "The keyword"
        },
        "usedCount": {
          "type": "string",
          "format": "int64",
          "title": "Used count"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the account"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the account"
        }
      }
    },
    "v1ListMultilocationPostsForBrandRequest": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "title": "Start Date for the multilocation post"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "title": "End Date for the multilocation post"
        },
        "cursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Number of results to grab"
        }
      }
    },
    "v1ListMultilocationPostsForBrandResponse": {
      "type": "object",
      "properties": {
        "multilocationPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MultilocationPost"
          },
          "title": "List of MultilocationPost"
        },
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        },
        "failedSocialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SocialPost"
          },
          "title": "A list of failed social posts in this range"
        }
      }
    },
    "v1ListPixabayImagesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "title": "Query string for pixabay images"
        },
        "cursor": {
          "type": "string",
          "title": "A cursor to specify where to start listing pixabay images"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The number of pixabay images to return"
        },
        "includeLocalUrl": {
          "type": "boolean",
          "title": "to get google storage"
        },
        "agid": {
          "type": "string"
        }
      }
    },
    "v1ListPixabayImagesResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string",
          "format": "int64",
          "title": "total number"
        },
        "totalHits": {
          "type": "string",
          "format": "int64",
          "title": "hit number"
        },
        "hits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PixabayImage"
          },
          "title": "Hit pixabay images response list"
        }
      }
    },
    "v1ListPostTemplatesRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "cursor": {
          "type": "string",
          "title": "Cursor to more templates if it is greater then the page size"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Number of results to grab"
        }
      }
    },
    "v1ListPostTemplatesResponse": {
      "type": "object",
      "properties": {
        "postTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PostTemplate"
          },
          "title": "List of obtained Templates"
        },
        "nextCursor": {
          "type": "string",
          "title": "Cursor to more templates if it is greater then the page size"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Boolean if there are more templates to get"
        }
      }
    },
    "v1ListSocialPostsRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "If a start time is provided, a page of the posts that are newer than it\nwill be returned If a start time of the current date time is provided you\nwill get a page of posts that are scheduled to be posted"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "If an end time is provided, a page of the posts older than it will be\nreturned If an end time of the current date time is provided you will not\nget any posts that are scheduled to be posted"
        },
        "businessId": {
          "type": "string",
          "title": "The business to list the social posts for"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner the social posts belong to"
        },
        "cursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "socialServiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of social service IDs to request posts for"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of tags to request posts for"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Number of results to grab"
        }
      }
    },
    "v1ListSocialPostsResponse": {
      "type": "object",
      "properties": {
        "socialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SocialPost"
          },
          "title": "A page of social posts"
        },
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        }
      }
    },
    "v1ListTenorGifsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "title": "Query string for the gifs"
        },
        "cursor": {
          "type": "string",
          "title": "A cursor to specify where to start listing tenor gifs"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The number of tenor gifs to return"
        },
        "locale": {
          "type": "string",
          "title": "Language of the response"
        },
        "anonymousId": {
          "type": "string",
          "title": "Anonymous id required to make calls to tenor apis"
        },
        "mediaFilter": {
          "type": "string",
          "title": "Applied filters"
        },
        "aspectRatioRange": {
          "type": "string",
          "title": "The aspect ratio of gifs to list"
        },
        "contentFilter": {
          "type": "string",
          "title": "Content filter"
        }
      }
    },
    "v1ListTenorGifsResponse": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string",
          "title": "next cursor"
        },
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TenorGif"
          },
          "title": "resulting list of tenor gifs"
        }
      }
    },
    "v1MediaEntry": {
      "type": "object",
      "properties": {
        "mediaEntryId": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "containerId": {
          "type": "string"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          }
        },
        "mediaPath": {
          "type": "string"
        }
      }
    },
    "v1MessageLength": {
      "type": "string",
      "enum": [
        "SHORT_FORM",
        "LONG_FORM"
      ],
      "default": "SHORT_FORM"
    },
    "v1MetaData": {
      "type": "object",
      "properties": {
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        }
      },
      "title": "Metadata message type for saving properties in instagram µservice"
    },
    "v1MultilocationPost": {
      "type": "object",
      "properties": {
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "multilocationId": {
          "type": "string",
          "title": "MultilocationID"
        },
        "originalText": {
          "type": "string",
          "title": "Original post text"
        },
        "originalScheduledDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date that the original post was scheduled to go"
        },
        "originalMedia": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original media links (images only)"
        },
        "originalLocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of locations in the original post"
        },
        "editedLocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of edited(in SL) locations"
        },
        "deletedLocations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "List of deleted(in SL) locations"
        },
        "originalGifs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original gif links"
        },
        "originalVideos": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Original video links"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the post, could be anything"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags required to differentiate posts"
        },
        "customization": {
          "$ref": "#/definitions/v1PostCustomization",
          "title": "Extra specific configurations for the post"
        },
        "linkShortCode": {
          "type": "string",
          "description": "The short code of the link in this post."
        },
        "postTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SSIDPostType"
          },
          "title": "The PostType for each of the SSIDs associated with this post"
        }
      }
    },
    "v1MultilocationPostError": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "SSID for which the error happened"
        },
        "accountGroupId": {
          "type": "string",
          "title": "AGID for which the error happened"
        },
        "errorReason": {
          "type": "string",
          "title": "Actual error message"
        }
      }
    },
    "v1PartnerListScheduledPostsResponse": {
      "type": "object",
      "properties": {
        "socialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SocialPost"
          },
          "title": "A page of social posts"
        },
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        }
      }
    },
    "v1PartnerListScheduledSocialPostsRequest": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "filters": {
          "$ref": "#/definitions/PartnerListScheduledSocialPostsRequestFilters"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Number of results to grab"
        }
      }
    },
    "v1PixabayImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "The id of pixabay image"
        },
        "pageUrl": {
          "type": "string",
          "title": "pixabay image page URL"
        },
        "type": {
          "type": "string",
          "title": "pixabay image type"
        },
        "tags": {
          "type": "string",
          "title": "pixabay image tag"
        },
        "previewUrl": {
          "type": "string",
          "title": "pixabay image preview"
        },
        "previewWidth": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image preview width"
        },
        "previewHeight": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image preview height"
        },
        "webformatUrl": {
          "type": "string",
          "title": "pixabay image webformat URL"
        },
        "webformatWidth": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image webformat wdith"
        },
        "webformatHeight": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image webformat height"
        },
        "largeImageUrl": {
          "type": "string",
          "title": "pixabay image large image URL"
        },
        "fullHdUrl": {
          "type": "string",
          "title": "pixabay image full HD URL"
        },
        "imageUrl": {
          "type": "string",
          "title": "pixabay image image URL"
        },
        "imageWidth": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image image width"
        },
        "imageHeight": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image image height"
        },
        "imageSize": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image image size"
        },
        "views": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image count of view"
        },
        "downloads": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image count of download"
        },
        "favorites": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image count of favorite"
        },
        "likes": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image count of like"
        },
        "comments": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image count of comment"
        },
        "userId": {
          "type": "string",
          "format": "int64",
          "title": "pixabay image user Id"
        },
        "user": {
          "type": "string",
          "title": "pixabay image user"
        },
        "userImageUrl": {
          "type": "string",
          "title": "pixabay image user image URL"
        },
        "storageUrl": {
          "type": "string",
          "title": "Local storage url"
        }
      }
    },
    "v1PostAction": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Represents the type of the CTA"
        },
        "linkUrl": {
          "type": "string",
          "title": "The link where the CTA will lead to"
        }
      },
      "title": "Represents the action associated with the post when the network allows CTA"
    },
    "v1PostCustomization": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/v1PostEvent",
          "title": "Event associated with this post. For example, a GMB event that should be created with the post"
        },
        "action": {
          "$ref": "#/definitions/v1PostAction",
          "title": "Actions that can be triggered within the posts when the network allows CTA"
        }
      },
      "title": "Contains extra configurations of a post, like events and actions"
    },
    "v1PostData": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "string"
        },
        "reach": {
          "type": "string",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "float"
        },
        "views": {
          "type": "string",
          "format": "int64"
        },
        "clicks": {
          "type": "string",
          "format": "int64"
        },
        "comments": {
          "type": "string",
          "format": "int64"
        },
        "shares": {
          "type": "string",
          "format": "int64"
        },
        "reactions": {
          "type": "string",
          "format": "int64"
        },
        "saves": {
          "type": "string",
          "format": "int64"
        },
        "likes": {
          "type": "string",
          "format": "int64"
        },
        "videoViews": {
          "type": "string",
          "format": "int64"
        },
        "retweets": {
          "type": "string",
          "format": "int64"
        },
        "favourites": {
          "type": "string",
          "format": "int64"
        },
        "impressions": {
          "type": "string",
          "format": "int64"
        },
        "commentsCount": {
          "type": "string",
          "format": "int64"
        },
        "likeCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1PostEvent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "Title of the event related to the post"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp when the event will start"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp when the event will end"
        }
      },
      "title": "Represents an event that should be associated/created with a post"
    },
    "v1PostTemplate": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "description": "Unique id signifying account group this belongs to."
        },
        "templateId": {
          "type": "string",
          "description": "Unique id signifying template this is."
        },
        "title": {
          "type": "string",
          "description": "Title of Template."
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "postText": {
          "type": "string",
          "description": "Text contained in template."
        },
        "postDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "gmbPostCustomization": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        },
        "imageSize": {
          "type": "string"
        },
        "previews": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "videoUrl": {
          "type": "string"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the media, could be anything"
        },
        "postType": {
          "$ref": "#/definitions/v1PostType",
          "title": "The type of post e.g., Image/video/reel/gif etc"
        },
        "youtubeCustomization": {
          "$ref": "#/definitions/v1YoutubeCustomization",
          "title": "Youtube customization"
        },
        "tiktokCustomization": {
          "$ref": "#/definitions/v1TikTokCustomization",
          "title": "Tiktok customization"
        }
      }
    },
    "v1PostType": {
      "type": "string",
      "enum": [
        "POST_TYPE_INVALID",
        "POST_TYPE_IMAGE",
        "POST_TYPE_VIDEO",
        "POST_TYPE_GIF",
        "POST_TYPE_REEL",
        "POST_TYPE_CAROUSEL",
        "POST_TYPE_STORIES",
        "POST_TYPE_TEXT"
      ],
      "default": "POST_TYPE_INVALID"
    },
    "v1PostingStatus": {
      "type": "string",
      "enum": [
        "POSTING_IN_PROGRESS",
        "POSTING_FAILED",
        "POSTING_COMPLETED"
      ],
      "default": "POSTING_IN_PROGRESS"
    },
    "v1RemoveFromMultilocationPostRequest": {
      "type": "object",
      "properties": {
        "reason": {
          "$ref": "#/definitions/v1RemoveReason",
          "description": "The reason for removing the post."
        },
        "brandId": {
          "type": "string",
          "title": "BrandID for the post"
        },
        "multilocationId": {
          "type": "string",
          "title": "MultilocationID"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv1Location"
          },
          "title": "Locations to remove"
        }
      }
    },
    "v1RemoveReason": {
      "type": "string",
      "enum": [
        "REMOVE_REASON_EDIT",
        "REMOVE_REASON_DELETE"
      ],
      "default": "REMOVE_REASON_EDIT",
      "description": " - REMOVE_REASON_EDIT: Used if the post is edited.\n - REMOVE_REASON_DELETE: Used if the post is deleted."
    },
    "v1ReplaceHashtagsRequest": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtag keyword for create or update for used count"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the account"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the account"
        }
      }
    },
    "v1SSIDPostType": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string"
        },
        "postType": {
          "$ref": "#/definitions/v1PostType"
        }
      },
      "title": "SSIDPostType represents the post type for each social service id"
    },
    "v1SchedulePostRequest": {
      "type": "object",
      "properties": {
        "socialPost": {
          "$ref": "#/definitions/v1SocialPostData",
          "title": "The social post to post"
        },
        "socialServiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The social accounts to post this post to"
        },
        "partnerId": {
          "type": "string"
        },
        "businessId": {
          "type": "string",
          "title": "The business that has the social accounts connected to it"
        }
      }
    },
    "v1SchedulePostResponse": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SchedulePostStatus"
          },
          "title": "The statuses of the posts that were attempted to be scheduled"
        }
      }
    },
    "v1SchedulePostStatus": {
      "type": "object",
      "properties": {
        "socialPostId": {
          "type": "string",
          "title": "The ID of this post that can be used to get it again"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The ID of the social page this post was posted to"
        },
        "socialServiceLabel": {
          "type": "string",
          "title": "The Name or Username of the social page this post was posted to (may not\nalways be populated)"
        },
        "error": {
          "$ref": "#/definitions/v1Error",
          "title": "The reason why there was an error scheduling the post. Error will be nil if\nit was successful"
        }
      }
    },
    "v1ScheduleToAllPagesRequest": {
      "type": "object",
      "properties": {
        "socialPost": {
          "$ref": "#/definitions/v1SocialPostData",
          "title": "The social post to post"
        },
        "partnerId": {
          "type": "string"
        },
        "businessId": {
          "type": "string",
          "title": "The business to post the social post to all of it's connected pages\n(twitter user, linkedin company, google plus page, facebook page)"
        }
      }
    },
    "v1ScheduleToAllPagesResponse": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SchedulePostStatus"
          },
          "title": "The statuses of the posts that were attempted to be scheduled"
        }
      }
    },
    "v1SearchHashtagRequest": {
      "type": "object",
      "properties": {
        "searchTerm": {
          "type": "string",
          "title": "search term for hashtags"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "title": "Limit size for hashtags"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the account"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the account"
        }
      }
    },
    "v1SearchHashtagResponse": {
      "type": "object",
      "properties": {
        "hashtags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Hashtag"
          },
          "title": "Hashtag response list"
        }
      }
    },
    "v1SocialCampaign": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the campaign"
        },
        "id": {
          "type": "string",
          "title": "Unique ID of the campaign"
        }
      }
    },
    "v1SocialPost": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The unique identifier of the business this post is related to"
        },
        "socialPostId": {
          "type": "string"
        },
        "postText": {
          "type": "string"
        },
        "posted": {
          "type": "string",
          "format": "date-time",
          "title": "The date time that this post was posted to it's corresponding social\naccount"
        },
        "isError": {
          "type": "boolean"
        },
        "deletionStatus": {
          "$ref": "#/definitions/SocialPostDeletionStatus"
        },
        "service": {
          "$ref": "#/definitions/SocialPostService"
        },
        "permalink": {
          "type": "string",
          "title": "The link to the post on the social page (e.g. an actual link to Facebook)"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "The date time that this entity was created in our system (not the time that\nit was posted)"
        },
        "profileUrl": {
          "type": "string"
        },
        "profileImageUrl": {
          "type": "string"
        },
        "scheduled": {
          "type": "string",
          "format": "date-time",
          "title": "The date time that this post is scheduled to be posted. If it's in the past\nthat means it we have or are attempting to post this You can see if it was\nsuccessful based on the status"
        },
        "status": {
          "$ref": "#/definitions/v1PostingStatus",
          "title": "The status of attempting to post this social post to the social account"
        },
        "imageUrl": {
          "type": "string",
          "title": "The image posted"
        },
        "name": {
          "type": "string",
          "title": "The name of the social account (may not always be populated)"
        },
        "username": {
          "type": "string",
          "title": "The username of the social account (may not always be populated)"
        },
        "parentId": {
          "type": "string",
          "title": "The correlation id for posts that have been posted as a group"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The id of the social service this post was created with"
        },
        "event": {
          "$ref": "#/definitions/v1Event",
          "title": "The event for a Google My Business post"
        },
        "callToAction": {
          "$ref": "#/definitions/v1CallToAction",
          "title": "The call to action for a Google My Busines post"
        },
        "videoUrl": {
          "type": "string",
          "title": "The video posted"
        },
        "error": {
          "$ref": "#/definitions/v1Error",
          "title": "The reason why there was an error scheduling the post. Error will be nil if\nit was successful"
        },
        "imageUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of images for this post"
        },
        "linkPreviewImageUrl": {
          "type": "string",
          "description": "An image that appears as a preview to a URL link."
        },
        "brandId": {
          "type": "string",
          "title": "A unique identifer for a brand (if this is a multilocation post)"
        },
        "multilocationPostId": {
          "type": "string",
          "title": "A unique identifer if this is a multilocation post"
        },
        "postType": {
          "$ref": "#/definitions/v1PostType",
          "title": "The type of post e.g., Image/video/reel/gif etc"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the media, could be anything"
        },
        "title": {
          "type": "string",
          "title": "The title of the post"
        },
        "youtubeCustomization": {
          "$ref": "#/definitions/v1YoutubeCustomization",
          "title": "Customization for youtube posts"
        },
        "tiktokCustomization": {
          "$ref": "#/definitions/v1TikTokCustomization",
          "title": "Customization for tiktok posts"
        },
        "blogPostCustomization": {
          "$ref": "#/definitions/v1BlogPostCustomization",
          "title": "Customization for blog posts"
        },
        "campaign": {
          "$ref": "#/definitions/v1SocialCampaign",
          "title": "Campaign details of a post"
        }
      },
      "title": "The information about a social post. It does not necessarily need to have\nbeen posted yet"
    },
    "v1SocialPostData": {
      "type": "object",
      "properties": {
        "postText": {
          "type": "string",
          "title": "The text to post, must be provided for all twitter and google plus page\nposts"
        },
        "imageUrl": {
          "type": "string",
          "title": "The image to post"
        },
        "scheduleFor": {
          "type": "string",
          "format": "date-time",
          "title": "When this social post should be posted. If not provided the social  will be\nposted asap"
        }
      }
    },
    "v1SocialPostStats": {
      "type": "object",
      "properties": {
        "internalPostId": {
          "type": "string"
        },
        "facebookPostStats": {
          "$ref": "#/definitions/v1FacebookPostStats"
        },
        "twitterPostStats": {
          "$ref": "#/definitions/v1TwitterPostStats"
        }
      }
    },
    "v1SuggestMessageRequest": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "title": "prompt that will be used to suggest the message"
        },
        "businessId": {
          "type": "string",
          "title": "business_id is the id of the business fo which this message is being generated to"
        },
        "length": {
          "$ref": "#/definitions/v1MessageLength",
          "title": "length indicates whether the consumer wants to build a long or short message"
        },
        "type": {
          "$ref": "#/definitions/v1TemplateType",
          "title": "type indicates whether the consumer wants to use a specific template or a custom format"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "metadata is a list of key value pairs that can be used to pass additional information to the suggester"
        }
      }
    },
    "v1SuggestMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1TemplateType": {
      "type": "string",
      "enum": [
        "TEMPLATE_UNSET",
        "TEMPLATE_CUSTOM",
        "TEMPLATE_SOCIAL_POST"
      ],
      "default": "TEMPLATE_UNSET"
    },
    "v1TenorGif": {
      "type": "object",
      "properties": {
        "mediaMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1TenorMediaObject"
          },
          "title": "The gif in various file types"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Gif tags"
        },
        "hasAudio": {
          "type": "boolean",
          "title": "If the gif has audio"
        },
        "title": {
          "type": "string",
          "title": "Gif name"
        },
        "id": {
          "type": "string",
          "title": "Gif id"
        },
        "created": {
          "type": "number",
          "format": "float",
          "title": "Gif created time"
        }
      }
    },
    "v1TenorMediaObject": {
      "type": "object",
      "properties": {
        "preview": {
          "type": "string",
          "title": "Preview url"
        },
        "url": {
          "type": "string",
          "title": "Gif url"
        },
        "dimensions": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "Gif dimensions"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Gif file size"
        }
      }
    },
    "v1TikTokCustomization": {
      "type": "object",
      "properties": {
        "allowComment": {
          "type": "boolean"
        },
        "allowDuet": {
          "type": "boolean"
        },
        "allowStitch": {
          "type": "boolean"
        }
      }
    },
    "v1TwitterPostStats": {
      "type": "object",
      "properties": {
        "favourites": {
          "type": "string",
          "format": "int64"
        },
        "hasFavourited": {
          "type": "boolean"
        },
        "retweets": {
          "type": "string",
          "format": "int64"
        },
        "hasRetweeted": {
          "type": "boolean"
        }
      }
    },
    "v1UpdatePostTemplateRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "title": "The account group id"
        },
        "templateId": {
          "type": "string",
          "title": "The internal id of the template"
        },
        "title": {
          "type": "string",
          "title": "The title of the template"
        },
        "postText": {
          "type": "string",
          "title": "Fields covering the contents of the template"
        },
        "postDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "gmbPostCustomization": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        },
        "imageSize": {
          "type": "string"
        },
        "previews": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "videoUrl": {
          "type": "string"
        },
        "mediaEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MediaEntry"
          },
          "title": "Array of media content when uploading multiple media"
        },
        "metaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetaData"
          },
          "title": "Metadata about the post, could be anything"
        },
        "postType": {
          "$ref": "#/definitions/v1PostType",
          "title": "The type of post e.g., Image/video/reel/gif etc"
        },
        "youtubeCustomization": {
          "$ref": "#/definitions/v1YoutubeCustomization",
          "title": "Youtube customization for this template"
        }
      }
    },
    "v1YoutubeCustomization": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "Title of Youtube video"
        },
        "privacyStatus": {
          "$ref": "#/definitions/YoutubeCustomizationPrivacyStatus"
        }
      }
    },
    "v2Action": {
      "type": "object",
      "properties": {
        "actionType": {
          "$ref": "#/definitions/v2ActionType",
          "description": "Action type represent what type content needed from AI."
        },
        "actionPayload": {
          "type": "string",
          "title": "action payload is the param which hold the text to be modified"
        }
      }
    },
    "v2ActionType": {
      "type": "string",
      "enum": [
        "RESPOND",
        "CHANGE_TONE"
      ],
      "default": "RESPOND"
    },
    "v2AiInstructions": {
      "type": "object",
      "properties": {
        "commonAiInstructions": {
          "type": "string"
        },
        "dataUsageStatus": {
          "type": "boolean"
        },
        "aiBlogInstructions": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v2Ancestry": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v2SubAncestry"
        },
        "category": {
          "$ref": "#/definitions/v2SubAncestry"
        },
        "subcategory": {
          "$ref": "#/definitions/v2SubAncestry"
        }
      }
    },
    "v2AuthorsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service if of the connection"
        }
      }
    },
    "v2AuthorsResponse": {
      "type": "object",
      "properties": {
        "authors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv2Author"
          },
          "title": "List of available authors"
        }
      }
    },
    "v2BlogConnection": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "The unique identifier of the blog post connection"
        },
        "name": {
          "type": "string",
          "title": "The name of the blog post connection"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the blog post connection"
        },
        "apiKey": {
          "type": "string",
          "title": "The api key of the blog post connection"
        },
        "logo": {
          "type": "string",
          "title": "The logo of the blog post connection"
        },
        "pluginStatus": {
          "type": "boolean",
          "title": "The plugin status of the blog post connection"
        },
        "version": {
          "type": "string",
          "title": "The version of the wordpress plugin"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Connection created date time"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "Connection updated date time"
        },
        "siteUrl": {
          "type": "string",
          "title": "The root url of the website"
        }
      }
    },
    "v2BlogImage": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "The path of the image"
        },
        "publicUrl": {
          "type": "string",
          "title": "The public url of the image"
        }
      }
    },
    "v2BlogPost": {
      "type": "object",
      "properties": {
        "internalPostId": {
          "type": "string",
          "title": "Internal post Id of Blog"
        },
        "socialServiceId": {
          "type": "string",
          "title": "Social service Id for blog"
        },
        "businessId": {
          "type": "string",
          "title": "Business ID"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID"
        },
        "postId": {
          "type": "string",
          "title": "Blog Post Id"
        },
        "title": {
          "type": "string",
          "title": "Blog Title"
        },
        "content": {
          "type": "string",
          "title": "Blog Content"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MediaProperty"
          },
          "title": "Image property for Blog"
        },
        "video": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MediaProperty"
          },
          "title": "Video property for Blog"
        },
        "permalink": {
          "type": "string",
          "title": "Permalink for a blog"
        },
        "siteType": {
          "type": "string",
          "title": "Site Type"
        },
        "author": {
          "$ref": "#/definitions/socialpostsv2Author",
          "title": "Author for a blog"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv2Category"
          },
          "title": "Category for a blog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags for a blog"
        },
        "error": {
          "type": "string",
          "title": "Holds the error message from blog"
        },
        "postDateTime": {
          "type": "string",
          "format": "date-time",
          "title": "Blog post date time"
        },
        "postedDateTime": {
          "type": "string",
          "format": "date-time",
          "title": "Blog posted date time"
        },
        "userId": {
          "type": "string",
          "title": "User Id"
        },
        "userName": {
          "type": "string",
          "title": "User Name"
        },
        "pageViews": {
          "type": "string",
          "format": "int64",
          "title": "Blog post visitor count"
        },
        "commentsCount": {
          "type": "string",
          "format": "int64",
          "title": "Blog comment count"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "Created Time"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "Updated Time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time",
          "title": "Deleted Time"
        }
      }
    },
    "v2BlogPostCampaign": {
      "type": "object",
      "properties": {
        "blogPostId": {
          "type": "string",
          "title": "Unique identifier for the blog post"
        },
        "blogPostType": {
          "$ref": "#/definitions/v2PostCategory",
          "title": "Type of the blog post"
        },
        "noOfPosts": {
          "type": "integer",
          "format": "int64",
          "title": "No. of posts to generate"
        }
      }
    },
    "v2BlogVideo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "The path of the video"
        },
        "publicUrl": {
          "type": "string",
          "title": "The public url of the video"
        }
      }
    },
    "v2Campaign": {
      "type": "object",
      "properties": {
        "campaignName": {
          "type": "string",
          "title": "Name of the campaign"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the campaign post"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the campaign post"
        },
        "id": {
          "type": "string",
          "title": "The unique id of the campaign"
        }
      }
    },
    "v2CategoryRequest": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "This social_service_id for get the categories"
        },
        "businessId": {
          "type": "string",
          "title": "This business_id for get the categories"
        }
      }
    },
    "v2CategoryResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv2Category"
          },
          "title": "This Categories is give us the Array of response"
        }
      }
    },
    "v2ChatMessage": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v2Role"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "v2Collection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "publishedAt": {
          "type": "string"
        },
        "lastCollectedAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "coverPhoto": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "v2ContentLength": {
      "type": "string",
      "enum": [
        "SHORT_FORM",
        "MEDIUM_FORM",
        "LONG_FORM",
        "OPTIMIZED_FORM"
      ],
      "default": "SHORT_FORM",
      "title": "The length of the content to be generated"
    },
    "v2CreateBlogConnectionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the blog post connection"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the blog post connection"
        },
        "apiKey": {
          "type": "string",
          "title": "The api key of the blog post connection"
        },
        "logo": {
          "type": "string",
          "title": "The logo of the blog post connection"
        },
        "pluginStatus": {
          "type": "boolean",
          "title": "The plugin status of the blog post connection"
        },
        "version": {
          "type": "string",
          "title": "The version of the wordpress plugin"
        },
        "siteUrl": {
          "type": "string",
          "title": "The root url of the website"
        }
      }
    },
    "v2CreateBlogConnectionResponse": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "Unique identifier of the connection"
        }
      }
    },
    "v2CreateCampaignRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the campaign"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the campaign post"
        }
      }
    },
    "v2CreateCampaignResponse": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string",
          "title": "This is identifier for the campaign"
        }
      }
    },
    "v2CreateCommonAiInstructionsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        },
        "aiInstructions": {
          "$ref": "#/definitions/v2AiInstructions"
        }
      }
    },
    "v2CreateCommonAiInstructionsResponse": {
      "type": "object",
      "properties": {
        "aiInstructions": {
          "$ref": "#/definitions/v2AiInstructions"
        }
      }
    },
    "v2CreateImageRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id of the account"
        },
        "prompt": {
          "type": "string",
          "title": "search term for image generator"
        },
        "imageAmount": {
          "type": "integer",
          "format": "int32",
          "title": "number of images needed 1-10 images"
        },
        "size": {
          "type": "string",
          "title": "size of the image : \"256x256\" ,\"512x512\" ,\"1024x1024\""
        },
        "responseFormat": {
          "type": "string",
          "title": "images format : \"url\" , \"b64_json\""
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "metadata is a list of key value pairs that can be used to pass additional information to the suggester"
        },
        "model": {
          "type": "string",
          "title": "The AI Model used . it can be \"dall-e-2\" or \"dalle-e-3\""
        },
        "style": {
          "type": "string",
          "title": "the Style of the image. it can be \"vivid\" or \"natural\""
        },
        "quality": {
          "type": "string",
          "title": "The qualiy of the image. it can be \"standar\" or \"hd\""
        }
      }
    },
    "v2CreateImageResponse": {
      "type": "object",
      "properties": {
        "createdId": {
          "type": "string",
          "format": "uint64",
          "title": "request id from DALLE"
        },
        "generatedImages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ImageCreated"
          },
          "title": "List of images"
        }
      }
    },
    "v2CuratedContentPost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier of the post"
        },
        "text": {
          "type": "string",
          "title": "The message of the post"
        },
        "media": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2UploadedMedia"
          },
          "title": "Both the image and video details are stored in this field"
        },
        "errors": {
          "type": "string",
          "title": "The error message if the post is an error"
        },
        "businessId": {
          "type": "string",
          "title": "The business ID of the post"
        },
        "createdAt": {
          "type": "string",
          "title": "The date the post was created"
        },
        "postedAt": {
          "type": "string",
          "title": "The date the post was posted"
        }
      }
    },
    "v2DeleteBlogConnectionRequest": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "The unique identifier of the blog post connection to delete connection"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        }
      }
    },
    "v2DeleteBlogPostRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "internalPostId": {
          "type": "string"
        },
        "parentPostId": {
          "type": "string"
        }
      }
    },
    "v2DeleteCampaignRequest": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string",
          "title": "The unique id of the campaign"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the campaign post"
        }
      }
    },
    "v2DeletePostRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "title": "Linkedin user's access token"
        },
        "postId": {
          "type": "string",
          "title": "A Linkedin post urn"
        }
      }
    },
    "v2EndChatRequest": {
      "type": "object",
      "properties": {
        "threadId": {
          "type": "string",
          "title": "This threadID is required to delete the thread from the Assistant (or else a thread may lasts upto 60 days)"
        }
      }
    },
    "v2FetchLibraryImagesRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Account group ID to fetch images"
        },
        "keywordInput": {
          "$ref": "#/definitions/v2KeywordGeneration",
          "title": "Input to generate keywords"
        },
        "imageCount": {
          "type": "integer",
          "format": "int64",
          "title": "Number of images required"
        }
      }
    },
    "v2FetchLibraryImagesResponse": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ImageResponse"
          },
          "title": "List of images fetched"
        }
      }
    },
    "v2GenerateAiRequest": {
      "type": "object",
      "properties": {
        "goal": {
          "type": "string",
          "title": "This goal is to create a title and content"
        },
        "instruction": {
          "type": "string",
          "title": "Instructions for how the content should be generated"
        },
        "keyword": {
          "type": "string",
          "title": "Keyword for generating the content"
        },
        "tone": {
          "type": "string",
          "title": "Tone indicates the desired style or type of content"
        },
        "length": {
          "$ref": "#/definitions/v2ContentLength",
          "title": "Length refers to the number of characters in the content"
        },
        "generateType": {
          "$ref": "#/definitions/v2GenerateType",
          "title": "generate_type determines the response format based on the enum value"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "description": "contains key value pair to utilise additional details."
        }
      },
      "title": "This request message for generate the content"
    },
    "v2GenerateAiResponse": {
      "type": "object",
      "properties": {
        "multiResult": {
          "$ref": "#/definitions/v2MultiResponse",
          "title": "(For TITLE and OUTLINE)"
        },
        "result": {
          "$ref": "#/definitions/v2Response",
          "title": "(For BLOG)"
        }
      },
      "title": "This is Wrapper message for multiple response types"
    },
    "v2GenerateBlogPostCampaignRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Account group ID"
        },
        "networkType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Network"
          },
          "title": "List of social networks"
        },
        "blogCampaign": {
          "$ref": "#/definitions/v2BlogPostCampaign",
          "title": "Campaigns from a blog post"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID to fetch the common instructions"
        }
      }
    },
    "v2GenerateContentMetaDataRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Account group ID"
        },
        "titleInput": {
          "$ref": "#/definitions/v2TitleGeneration"
        },
        "keywordInput": {
          "$ref": "#/definitions/v2KeywordGeneration",
          "title": "deprected use FetchLibraryImagesRequest endpoint"
        }
      }
    },
    "v2GenerateContentMetaDataResponse": {
      "type": "object",
      "properties": {
        "generatedTitle": {
          "type": "string",
          "title": "Generated title suggestion"
        },
        "generatedKeywords": {
          "$ref": "#/definitions/v2KeywordList",
          "description": "deprected use FetchLibraryImagesResponse endpoint",
          "title": "List of generated keywords"
        }
      }
    },
    "v2GeneratePostCampaignRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Account group ID"
        },
        "networkType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Network"
          },
          "title": "List of social networks"
        },
        "postGeneration": {
          "$ref": "#/definitions/v2PostsGeneration",
          "title": "Campaigns from user's input"
        },
        "partnerId": {
          "type": "string",
          "title": "Partner ID to fetch the common instructions"
        }
      }
    },
    "v2GeneratePostCampaignResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv2Post"
          },
          "title": "List of posts generated"
        }
      }
    },
    "v2GeneratePostsRequest": {
      "type": "object",
      "properties": {
        "numberOfPosts": {
          "type": "string",
          "format": "int64",
          "description": "The number of posts to generate."
        },
        "topic": {
          "type": "string",
          "description": "The topic the posts should be about."
        },
        "commonInstructions": {
          "type": "string",
          "description": "Common instructions to use when generating the posts."
        },
        "tone": {
          "type": "string",
          "description": "The tone of the posts."
        },
        "postLength": {
          "type": "string",
          "format": "int64",
          "description": "The max character length of the posts."
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Meta data to exchange info like AGID/PartnerId as  flexible for AI knowledge"
        }
      }
    },
    "v2GeneratePostsResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2GeneratePostsResponsePost"
          }
        },
        "keyword": {
          "type": "string"
        }
      }
    },
    "v2GeneratePostsResponsePost": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "v2GenerateType": {
      "type": "string",
      "enum": [
        "TITLE",
        "OUTLINE",
        "BLOG"
      ],
      "default": "TITLE",
      "title": "This request and response for AI purpose"
    },
    "v2GetBlogConnectionRequest": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "The unique identifier of the blog post connection"
        }
      }
    },
    "v2GetBlogConnectionResponse": {
      "type": "object",
      "properties": {
        "blogConnection": {
          "$ref": "#/definitions/v2BlogConnection",
          "title": "The blog post connection"
        }
      }
    },
    "v2GetCampaignRequest": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string",
          "title": "The unique id of the campaign"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the campaign post"
        }
      }
    },
    "v2GetCampaignResponse": {
      "type": "object",
      "properties": {
        "campaign": {
          "$ref": "#/definitions/v2Campaign"
        }
      }
    },
    "v2GetCommonAiInstructionsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        }
      }
    },
    "v2GetCommonAiInstructionsResponse": {
      "type": "object",
      "properties": {
        "aiInstructions": {
          "$ref": "#/definitions/v2AiInstructions"
        }
      }
    },
    "v2GetMultiBlogPostsRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "A partner ID"
        },
        "businessId": {
          "type": "string",
          "title": "A business ID"
        },
        "socialServiceId": {
          "type": "string",
          "title": "A Social service ID"
        },
        "blogPostId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of unique internal identifier of blog post that are getting"
        }
      },
      "title": "Get Multi blog posts for a list ids"
    },
    "v2GetMultiBlogPostsResponse": {
      "type": "object",
      "properties": {
        "blogPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BlogPost"
          },
          "title": "A list of BlogPost"
        }
      }
    },
    "v2GetMultiCampaignsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "description": "The unique identifier of the business (Used for access check)."
        },
        "campaignId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of internal identifier of campaigns"
        }
      }
    },
    "v2GetMultiCampaignsResponse": {
      "type": "object",
      "properties": {
        "campaigns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Campaign"
          },
          "title": "A array of campaigns"
        }
      }
    },
    "v2Image": {
      "type": "object",
      "properties": {
        "small": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "large": {
          "type": "string"
        }
      }
    },
    "v2ImageBlob": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v2ImageCreated": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "b64Json": {
          "type": "string"
        },
        "revisedPrompt": {
          "type": "string"
        }
      }
    },
    "v2ImageResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "pixabay image type"
        },
        "webformatUrl": {
          "type": "string",
          "title": "pixabay image webformat URL"
        },
        "fullHdUrl": {
          "type": "string",
          "title": "pixabay image full HD URL"
        }
      }
    },
    "v2ImageUrl": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v2KeywordGeneration": {
      "type": "object",
      "properties": {
        "blogPostId": {
          "type": "string",
          "title": "Unique identifier for the blog post"
        },
        "keywordCount": {
          "type": "integer",
          "format": "int64",
          "title": "Number of keywords to generate"
        },
        "postType": {
          "$ref": "#/definitions/v2PostCategory",
          "title": "Type of the blog post"
        }
      }
    },
    "v2KeywordList": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v2LinkV2": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the link preview"
        },
        "picture": {
          "type": "string",
          "description": "The preview image associated with the link."
        },
        "description": {
          "type": "string",
          "title": "The description of the link"
        },
        "title": {
          "type": "string",
          "title": "The title for the link"
        },
        "url": {
          "type": "string",
          "title": "The URL of the link"
        },
        "shortcode": {
          "type": "string",
          "title": "The shortcode of the link"
        }
      },
      "title": "Represents all the information of a post's link"
    },
    "v2Links": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "html": {
          "type": "string"
        },
        "download": {
          "type": "string"
        },
        "downloadLocation": {
          "type": "string"
        }
      }
    },
    "v2ListBlogConnectionRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "Page size of the connection"
        },
        "cursor": {
          "type": "string",
          "title": "Cursor"
        }
      }
    },
    "v2ListBlogConnectionResponse": {
      "type": "object",
      "properties": {
        "blogConnections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BlogConnection"
          },
          "title": "List of connections under a business id"
        },
        "cursor": {
          "type": "string"
        },
        "hasMore": {
          "type": "boolean"
        }
      }
    },
    "v2ListCuratedContentRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "Account ID of the business"
        },
        "feedId": {
          "type": "string",
          "title": "Feed Identifier of the website(Integration)"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "title": "Page size"
        },
        "cursor": {
          "type": "string",
          "title": "Next page cursor"
        }
      }
    },
    "v2ListCuratedContentResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2CuratedContentPost"
          }
        },
        "externalId": {
          "type": "string"
        },
        "hasMore": {
          "type": "boolean"
        },
        "nextCursor": {
          "type": "string"
        }
      }
    },
    "v2ListUnsplashImagesRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "title": "Query string for unsplash images"
        },
        "page": {
          "type": "string",
          "format": "int64",
          "title": "page to be retrieved. By default 1"
        },
        "perPage": {
          "type": "string",
          "format": "int64",
          "title": "number of images per page. By default 10"
        },
        "orderBy": {
          "type": "string",
          "title": "how to sort the images. By default \"relevant\""
        },
        "collection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "collection id to narrow the search. Optional"
        },
        "contentFilter": {
          "type": "string",
          "title": "filter content bu safety. Optional"
        },
        "color": {
          "type": "string",
          "title": "filter result by color. Optional"
        },
        "orientation": {
          "type": "string",
          "title": "filter result by image orientation. Optional"
        },
        "random": {
          "type": "boolean",
          "title": "if set to true, use the random endpoint instead of search endpoint"
        },
        "includeLocalUrl": {
          "type": "boolean",
          "title": "to get google storage"
        }
      }
    },
    "v2ListUnsplashImagesResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string",
          "format": "int64"
        },
        "totalPages": {
          "type": "string",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Photo"
          }
        }
      }
    },
    "v2Media": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/v2MediaType"
        }
      }
    },
    "v2MediaProperty": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Path of media"
        },
        "publicUrl": {
          "type": "string",
          "title": "Public Url for the blog media"
        }
      }
    },
    "v2MediaType": {
      "type": "string",
      "enum": [
        "MEDIA_TYPE_INVALID",
        "MEDIA_TYPE_IMAGE",
        "MEDIA_TYPE_VIDEO",
        "MEDIA_TYPE_GIF",
        "MEDIA_TYPE_CAROUSEL"
      ],
      "default": "MEDIA_TYPE_INVALID"
    },
    "v2MediaUploadRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "title": "LinkedIn user's access token"
        },
        "owner": {
          "type": "string",
          "title": "owner e.g., it could either be a person(in case of a personal profile)\nor a organization (in case of a business page maintained)\nurn:li:organization:24141830 this would get translated to\nregisterUploadRequest. owner\tschema inside linkedin vector API\nhttps://docs.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/vector-asset-api?view=li-lms-2022-08\u0026tabs=http#schema"
        },
        "medias": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Media"
          },
          "title": "video url, it should be a public url. In case of SM, it would be the gogole\nstorage public url of the resource"
        }
      }
    },
    "v2MediaUploadResponse": {
      "type": "object",
      "properties": {
        "uploadUrns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "upload_urn would be a resouce identifier returned by LinkedIn service which\nwould be needed to add iamge/video in a post"
        }
      }
    },
    "v2MetadataV2": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The property name or key"
        },
        "value": {
          "type": "string",
          "title": "The property value associated with the name/key"
        }
      },
      "title": "Stored as key/value pairs can contain generic metadata information"
    },
    "v2MultiResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Response message for Title and Outline(Array of string)"
    },
    "v2Network": {
      "type": "string",
      "enum": [
        "INVALID_NETWORK",
        "FACEBOOK",
        "INSTAGRAM",
        "LINKEDIN",
        "TWITTER",
        "GMB",
        "TIKTOK",
        "YOUTUBE",
        "CUSTOM_FEED",
        "WORDPRESS"
      ],
      "default": "INVALID_NETWORK"
    },
    "v2Photo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "promotedAt": {
          "type": "string"
        },
        "width": {
          "type": "string",
          "format": "int64"
        },
        "height": {
          "type": "string",
          "format": "int64"
        },
        "color": {
          "type": "string"
        },
        "blurHash": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "altDescription": {
          "type": "string"
        },
        "breadcrumbs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "urls": {
          "$ref": "#/definitions/v2Urls"
        },
        "links": {
          "$ref": "#/definitions/v2Links"
        },
        "likes": {
          "type": "string",
          "format": "int64"
        },
        "likedByUser": {
          "type": "boolean"
        },
        "currentUserCollections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Collection"
          }
        },
        "sponsorship": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "$ref": "#/definitions/v2User"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Tags"
          }
        },
        "storageUrl": {
          "type": "string",
          "title": "Local storage url"
        }
      }
    },
    "v2PostActionV2": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Represents the type of the CTA"
        },
        "linkUrl": {
          "type": "string",
          "title": "The link where the CTA will lead to"
        }
      },
      "title": "Represents the action associated with the post when the network allows CTA"
    },
    "v2PostCategory": {
      "type": "string",
      "enum": [
        "INVALID_CATEGORY",
        "DRAFT",
        "SCHEDULED",
        "PUBLISHED"
      ],
      "default": "INVALID_CATEGORY"
    },
    "v2PostContent": {
      "type": "object",
      "properties": {
        "socialNetwork": {
          "$ref": "#/definitions/v2Network",
          "title": "Network to which the post generated"
        },
        "post": {
          "type": "string",
          "title": "Post generated"
        }
      }
    },
    "v2PostContentV2": {
      "type": "object",
      "properties": {
        "postText": {
          "type": "string",
          "title": "The text of the post"
        },
        "medias": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2PostMediaV2"
          },
          "title": "All media associated with the post"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2LinkV2"
          },
          "title": "Contains the information of a post's link if any"
        },
        "description": {
          "type": "string",
          "title": "Description : Added specifically for linkedin"
        },
        "title": {
          "type": "string",
          "title": "Title: Not required for all social networks"
        }
      },
      "title": "Represents all the content of a post: text, media, links, etc"
    },
    "v2PostCustomizationV2": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/v2PostEventV2",
          "title": "Event associated with this post. For example, a GMB event that should be created with the post"
        },
        "action": {
          "$ref": "#/definitions/v2PostActionV2",
          "title": "Actions that can be triggered within the posts when the network allows CTA"
        }
      },
      "title": "Contains extra configurations of a post, like events and actions"
    },
    "v2PostEventV2": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "Title of the event related to the post"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp when the event will start"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp when the event will end"
        }
      },
      "title": "Represents an event that should be associated/created with a post"
    },
    "v2PostMediaV2": {
      "type": "object",
      "properties": {
        "mediaId": {
          "type": "string",
          "title": "Identifier of all the media associated to a post"
        },
        "mediaUrl": {
          "type": "string",
          "title": "The URL where the media is stored"
        },
        "mediaType": {
          "type": "string",
          "title": "Type of the media: 'IMAGE' or 'VIDEO', etc"
        },
        "containerId": {
          "type": "string",
          "title": "Represents the container identifier, if the network requires it"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Contains metadata if any associated with each media of the post"
        }
      },
      "title": "Represents the media used on a post"
    },
    "v2PostStatusV2": {
      "type": "string",
      "enum": [
        "POST_STATUS_INVALID",
        "POST_STATUS_SUCCESS",
        "POST_STATUS_ERROR"
      ],
      "default": "POST_STATUS_INVALID",
      "title": "Represents the status of a post"
    },
    "v2PostTypeV2": {
      "type": "string",
      "enum": [
        "POST_TYPE_INVALID",
        "POST_TYPE_IMAGE",
        "POST_TYPE_VIDEO",
        "POST_TYPE_GIF",
        "POST_TYPE_MULTI_MEDIA",
        "POST_TYPE_TEXT",
        "POST_TYPE_STORIES"
      ],
      "default": "POST_TYPE_INVALID",
      "title": "Represents the type of a post"
    },
    "v2PostsGeneration": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The topic the posts should be about"
        },
        "goal": {
          "type": "string",
          "title": "The goal of the post"
        },
        "tone": {
          "$ref": "#/definitions/v2Tone",
          "title": "Tone of the post"
        },
        "contentLength": {
          "$ref": "#/definitions/v2ContentLength",
          "title": "Length of the post"
        },
        "noOfPosts": {
          "type": "integer",
          "format": "int64",
          "title": "No. of posts to generate"
        },
        "useCommonInstr": {
          "type": "boolean",
          "title": "Whether or not use common instructions"
        }
      }
    },
    "v2PublishPostRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "socialServiceId": {
          "type": "string",
          "title": "The service id of the connection"
        },
        "title": {
          "type": "string",
          "title": "The title of the blog post"
        },
        "content": {
          "type": "string",
          "title": "The content of the blog post"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BlogImage"
          },
          "title": "The images of the blog post"
        },
        "videos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2BlogVideo"
          },
          "title": "The videos of the blog post"
        },
        "siteType": {
          "type": "string",
          "title": "The site type of the blog post"
        },
        "author": {
          "$ref": "#/definitions/socialpostsv2Author",
          "title": "The author of the blog post"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/socialpostsv2Category"
          },
          "title": "The categories of the blog post"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The tags of the blog post"
        },
        "postTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The post tags of the blog post"
        },
        "postDateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The post date time of the blog post"
        },
        "userId": {
          "type": "string",
          "title": "The user id of the blog post"
        },
        "userName": {
          "type": "string",
          "title": "The user name of the blog post"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the blog post"
        },
        "internalPostId": {
          "type": "string",
          "title": "The internal post id of the blog post"
        }
      }
    },
    "v2PublishPostResponse": {
      "type": "object",
      "properties": {
        "internalPostId": {
          "type": "string",
          "title": "Internal ID of the post"
        }
      }
    },
    "v2RepostBlogPostRequest": {
      "type": "object",
      "properties": {
        "blogPostId": {
          "type": "string",
          "title": "Blog post id to repost"
        },
        "accountGroupId": {
          "type": "string",
          "title": "Account group id of the Blog post to repost"
        }
      }
    },
    "v2RepostSocialPostRequest": {
      "type": "object",
      "properties": {
        "socialPostId": {
          "type": "string",
          "title": "Social post id to repost"
        },
        "accountGroupId": {
          "type": "string",
          "title": "Account group id of the post to repost"
        }
      }
    },
    "v2Response": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      },
      "title": "Response message for BLOG (String)"
    },
    "v2Role": {
      "type": "string",
      "enum": [
        "INVALID",
        "USER",
        "AI_BOT"
      ],
      "default": "INVALID"
    },
    "v2SendMessageRequest": {
      "type": "object",
      "properties": {
        "messageContent": {
          "type": "string",
          "title": "The text that will be sent to AI to create an AI text model"
        },
        "threadId": {
          "type": "string",
          "title": "Thread Id used to get the conversation details of Thread"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Action"
          },
          "title": "Action params are used to generate a text based on additional info"
        }
      }
    },
    "v2SendMessageResponse": {
      "type": "object",
      "properties": {
        "messageResponse": {
          "type": "string",
          "description": "Message Response is Text where it holds the actual text model received from AI based on our input."
        },
        "threadId": {
          "type": "string",
          "title": "Thread Id used to get the conversation details of Thread"
        }
      }
    },
    "v2SendMessageV2Request": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        },
        "marketId": {
          "type": "string"
        },
        "customInstructions": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2ChatMessage"
          }
        },
        "brandId": {
          "type": "string",
          "title": "Included brand id to check the multilocation contexts"
        }
      }
    },
    "v2SendMessageV2Response": {
      "type": "object",
      "properties": {
        "messageResponse": {
          "type": "string"
        }
      }
    },
    "v2Social": {
      "type": "object",
      "properties": {
        "instagramUsername": {
          "type": "string"
        },
        "portfolioUrl": {
          "type": "string"
        },
        "twitterUsername": {
          "type": "string"
        },
        "paypalEmail": {
          "type": "string"
        }
      }
    },
    "v2SocialPostOutput": {
      "type": "object",
      "properties": {
        "internalPostId": {
          "type": "string",
          "title": "Internal identifier of the post"
        },
        "socialPost": {
          "$ref": "#/definitions/v2SocialPostV2",
          "title": "All the post content and information"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Contains metadata if any associated with the post"
        },
        "status": {
          "$ref": "#/definitions/v2PostStatusV2",
          "title": "Represents the status of each post, since we allow partial schedule for bundles"
        },
        "statusMessage": {
          "type": "string",
          "title": "A message related to the post. Can be the error message in case of an error status, for example"
        }
      },
      "title": "Contains all the information of a post plus internal identifier and metadata"
    },
    "v2SocialPostRequest": {
      "type": "object",
      "properties": {
        "socialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SocialPostV2"
          },
          "title": "List of posts to be created and scheduled"
        }
      },
      "title": "The complete request of the ScheduleSocialPosts RPC"
    },
    "v2SocialPostResponse": {
      "type": "object",
      "properties": {
        "socialPosts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SocialPostOutput"
          },
          "title": "List of the created/scheduled posts containing internal identifiers"
        }
      },
      "title": "The complete response of the ScheduleSocialPosts RPC"
    },
    "v2SocialPostV2": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id that owes this post"
        },
        "socialServiceId": {
          "type": "string",
          "title": "Social service id represents specific networks ids. Indicates the network in which the post will be published"
        },
        "postContent": {
          "$ref": "#/definitions/v2PostContentV2",
          "description": "Stores the content of the post: text, media, links, etc."
        },
        "scheduled": {
          "type": "string",
          "format": "date-time",
          "title": "The time to schedule the post at"
        },
        "customization": {
          "$ref": "#/definitions/v2PostCustomizationV2",
          "title": "Extra specific configurations for the post"
        },
        "postType": {
          "$ref": "#/definitions/v2PostTypeV2",
          "title": "Represents the type of the post"
        },
        "internalPostId": {
          "type": "string",
          "title": "Internal post id, we need it as  a fail-safe"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Metadata to hold any additional details related to the post"
        },
        "partnerId": {
          "type": "string",
          "title": "partner_id of the business_id for this post"
        },
        "brandId": {
          "type": "string",
          "title": "brand_id related to this post (multilocation only)"
        },
        "multilocationPostId": {
          "type": "string",
          "title": "multi_location_post_id related to this post (multilocation only)"
        },
        "youtubeCustomization": {
          "$ref": "#/definitions/v2YoutubeCustomizationV2",
          "title": "Youtube specific customization"
        },
        "userId": {
          "type": "string",
          "title": "Adding UserId, for TikTok"
        },
        "shareId": {
          "type": "string",
          "title": "Adding share_id for TikTok"
        },
        "tiktokCustomization": {
          "$ref": "#/definitions/v2TikTokCustomizationV2",
          "title": "TikTok customization"
        },
        "campaignId": {
          "type": "string",
          "title": "Campaign ID , Used to store Control social posts for Campaign"
        }
      },
      "title": "Represents all the structure needed to create a post"
    },
    "v2Source": {
      "type": "object",
      "properties": {
        "ancestry": {
          "$ref": "#/definitions/v2Ancestry"
        },
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "metaTitle": {
          "type": "string"
        },
        "metaDescription": {
          "type": "string"
        },
        "coverPhoto": {
          "$ref": "#/definitions/v2Photo"
        }
      }
    },
    "v2StartChatRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Meta data to exchange info like AGID/PartnerId as flexible for AI knowledge"
        }
      }
    },
    "v2StartChatResponse": {
      "type": "object",
      "properties": {
        "assistantId": {
          "type": "string",
          "description": "Assistant-ID used for start Thread."
        },
        "threadId": {
          "type": "string",
          "title": "Thread ID used for message conversation"
        }
      }
    },
    "v2StatusRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "apiKey": {
          "type": "string",
          "title": "The api key of the blog post connection"
        },
        "siteUrl": {
          "type": "string",
          "title": "The root url of the website"
        }
      }
    },
    "v2StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "title": "The status of the wordpress site"
        },
        "version": {
          "type": "string",
          "title": "The version of the wordpress plugin"
        },
        "logo": {
          "type": "string",
          "title": "logo of the wordpress site"
        },
        "name": {
          "type": "string",
          "title": "The name of the wordpress site"
        }
      }
    },
    "v2SubAncestry": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string"
        },
        "prettySlug": {
          "type": "string"
        }
      }
    },
    "v2Tags": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v2Source"
        }
      }
    },
    "v2TikTokCustomizationV2": {
      "type": "object",
      "properties": {
        "allowComment": {
          "type": "boolean"
        },
        "allowDuet": {
          "type": "boolean"
        },
        "allowStitch": {
          "type": "boolean"
        }
      }
    },
    "v2TitleGeneration": {
      "type": "object",
      "properties": {
        "blogTitle": {
          "type": "string",
          "description": "Title of the blog."
        }
      }
    },
    "v2Tone": {
      "type": "string",
      "enum": [
        "INVALID_TONE",
        "DEFAULT",
        "FRIENDLY",
        "LUXURIOUS",
        "PROFESSIONAL",
        "RELAXED",
        "BOLD",
        "ADVENTUROUS",
        "WITTY",
        "PERSUASIVE",
        "EMPATHETIC"
      ],
      "default": "INVALID_TONE"
    },
    "v2UpdateBlogConnectionRequest": {
      "type": "object",
      "properties": {
        "socialServiceId": {
          "type": "string",
          "title": "The unique identifier of the blog post connection"
        },
        "name": {
          "type": "string",
          "title": "The name of the blog post connection"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the blog post connection"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the blog post connection"
        },
        "apiKey": {
          "type": "string",
          "title": "The api key of the blog post connection"
        },
        "logo": {
          "type": "string",
          "title": "The logo of the blog post connection"
        },
        "pluginStatus": {
          "type": "boolean",
          "title": "The plugin status of the blog post connection"
        },
        "version": {
          "type": "string",
          "title": "The version of the wordpress plugin"
        },
        "siteUrl": {
          "type": "string",
          "title": "The root url of the website"
        }
      }
    },
    "v2UpdateBlogPostRequest": {
      "type": "object",
      "properties": {
        "blogPost": {
          "$ref": "#/definitions/v2BlogPost"
        }
      }
    },
    "v2UpdateCampaignIdRequest": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string",
          "title": "This is identifier for the campaign"
        },
        "businessId": {
          "type": "string",
          "description": "The unique identifier of the business (Used for access check)."
        },
        "blogPostId": {
          "type": "string",
          "description": "The id to identify specific blog or the draft."
        },
        "type": {
          "$ref": "#/definitions/v2PostCategory",
          "description": "type holds if the blog is scheduled, published or drafted."
        }
      }
    },
    "v2UpdateCampaignRequest": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string",
          "title": "This is identifier for the campaign"
        },
        "name": {
          "type": "string",
          "title": "The name of the campaign"
        },
        "businessId": {
          "type": "string",
          "title": "The business id of the campaign post"
        },
        "partnerId": {
          "type": "string",
          "title": "The partner id of the campaign post"
        }
      }
    },
    "v2UpdateCommonAiInstructionsRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        },
        "aiInstructions": {
          "$ref": "#/definitions/v2AiInstructions"
        }
      }
    },
    "v2UpdateCommonAiInstructionsResponse": {
      "type": "object",
      "properties": {
        "aiInstructions": {
          "$ref": "#/definitions/v2AiInstructions"
        }
      }
    },
    "v2UpdateSocialPostRequest": {
      "type": "object",
      "properties": {
        "socialPost": {
          "$ref": "#/definitions/v2SocialPostV2",
          "title": "Social post to update"
        },
        "isError": {
          "type": "boolean",
          "title": "is post is an error"
        },
        "errors": {
          "type": "string",
          "title": "errors in case any"
        },
        "errorCategory": {
          "type": "string",
          "title": "error description"
        },
        "postId": {
          "type": "string",
          "title": "post id, e.g. urn:share:12345"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Contains metadata if any associated with the post"
        },
        "permalink": {
          "type": "string",
          "title": "permalink, e.g. https://www.facebook.com/169454092503751/posts/184857307630096"
        }
      }
    },
    "v2UpdateSocialPostResponse": {
      "type": "object",
      "properties": {
        "socialPost": {
          "$ref": "#/definitions/v2SocialPostV2",
          "title": "Social post to update"
        },
        "isError": {
          "type": "boolean",
          "title": "is post is an error"
        },
        "errors": {
          "type": "string",
          "title": "errors in case any"
        },
        "errorCategory": {
          "type": "string",
          "title": "error description"
        },
        "postId": {
          "type": "string",
          "title": "post id, e.g. urn:share:12345"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2MetadataV2"
          },
          "title": "Contains metadata if any associated with the post"
        }
      }
    },
    "v2UploadToStorageRequest": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/v2MediaType"
        },
        "agid": {
          "type": "string"
        }
      }
    },
    "v2UploadToStorageResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v2UploadedMedia": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v2Urls": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string"
        },
        "full": {
          "type": "string"
        },
        "regular": {
          "type": "string"
        },
        "small": {
          "type": "string"
        },
        "thumb": {
          "type": "string"
        },
        "smallS3": {
          "type": "string"
        }
      }
    },
    "v2User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "twitterUsername": {
          "type": "string"
        },
        "portfolioUrl": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/v2UserLink"
        },
        "profileImage": {
          "$ref": "#/definitions/v2Image"
        },
        "instagramUsername": {
          "type": "string"
        },
        "totalCollections": {
          "type": "string",
          "format": "int64"
        },
        "totalLikes": {
          "type": "string",
          "format": "int64"
        },
        "totalPhotos": {
          "type": "string",
          "format": "int64"
        },
        "totalPromotedPhotos": {
          "type": "string",
          "format": "int64"
        },
        "acceptedTos": {
          "type": "boolean"
        },
        "forHire": {
          "type": "boolean"
        },
        "social": {
          "$ref": "#/definitions/v2Social"
        }
      }
    },
    "v2UserLink": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "html": {
          "type": "string"
        },
        "photos": {
          "type": "string"
        },
        "likes": {
          "type": "string"
        },
        "portfolio": {
          "type": "string"
        },
        "following": {
          "type": "string"
        },
        "followers": {
          "type": "string"
        }
      }
    },
    "v2YoutubeCustomizationV2": {
      "type": "object",
      "properties": {
        "privacyStatus": {
          "$ref": "#/definitions/YoutubeCustomizationV2PrivacyStatusV2"
        }
      }
    }
  }
}
