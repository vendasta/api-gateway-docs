{
  "swagger": "2.0",
  "info": {
    "title": "tesseract/v1/admin.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Admin"
    },
    {
      "name": "Tesseract"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/tesseract.v1.Admin/CreateKind": {
      "post": {
        "operationId": "Admin_CreateKind",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateKindRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Admin/CreateNamespace": {
      "post": {
        "operationId": "Admin_CreateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateNamespaceRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Admin/DeleteKind": {
      "post": {
        "operationId": "Admin_DeleteKind",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteKindRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Admin/DeleteNamespace": {
      "post": {
        "operationId": "Admin_DeleteNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteNamespaceRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Admin/GetKind": {
      "post": {
        "operationId": "Admin_GetKind",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetKindResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetKindRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Admin/UpdateKind": {
      "post": {
        "operationId": "Admin_UpdateKind",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateKindRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/tesseract.v1.Tesseract/BulkCreate": {
      "post": {
        "operationId": "Tesseract_BulkCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkCreateRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/Create": {
      "post": {
        "operationId": "Tesseract_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/ExecuteSQL": {
      "post": {
        "operationId": "Tesseract_ExecuteSQL",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1Row"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1Row"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExecuteSQLRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/ExecuteSQLUnary": {
      "post": {
        "operationId": "Tesseract_ExecuteSQLUnary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExecuteSQLUnaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExecuteSQLRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/Get": {
      "post": {
        "operationId": "Tesseract_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/Query": {
      "post": {
        "operationId": "Tesseract_Query",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/tesseractv1Struct"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of tesseractv1Struct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    },
    "/tesseract.v1.Tesseract/QueryUnary": {
      "post": {
        "operationId": "Tesseract_QueryUnary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryUnaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryRequest"
            }
          }
        ],
        "tags": [
          "Tesseract"
        ]
      }
    }
  },
  "definitions": {
    "KindDistributedTable": {
      "type": "object",
      "properties": {
        "distributionColumn": {
          "type": "string"
        },
        "colocateWithNamespace": {
          "type": "string",
          "title": "The namespace of the table to explicitly colocate with"
        },
        "colocateWithKind": {
          "type": "string",
          "title": "The kind of the table to explicitly colocate with"
        }
      },
      "title": "DistributedTables are distributed based upon the column specified, optionally explicitly colocated with another\ntesseract table to reduce network overhead when these tables are utilized together"
    },
    "KindLastModifiedConcurrencyControl": {
      "type": "object",
      "properties": {
        "lastModifiedField": {
          "type": "string"
        }
      },
      "title": "Provides concurrency control through a timestamp based approach"
    },
    "KindLocalTable": {
      "type": "object",
      "title": "LocalTables are ordinary tables that do not participate in the distributed architecture"
    },
    "KindReferenceTable": {
      "type": "object",
      "title": "ReferenceTables are tables which are not distributed, but rather replicated everywhere, making them available\nto participate in queries with distributed tables without network overhead"
    },
    "KindVersionConcurrencyControl": {
      "type": "object",
      "properties": {
        "versionField": {
          "type": "string"
        }
      },
      "title": "Provides concurrency control through a monotonically increasing version number"
    },
    "ProjectionAggregation": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference"
        },
        "type": {
          "$ref": "#/definitions/ProjectionAggregationType"
        }
      }
    },
    "ProjectionAggregationType": {
      "type": "string",
      "enum": [
        "SUM",
        "AVG",
        "COUNT",
        "MAX",
        "MIN"
      ],
      "default": "SUM"
    },
    "ProjectionTransform": {
      "type": "object",
      "properties": {
        "dateTruncate": {
          "$ref": "#/definitions/TransformDateTruncate"
        }
      }
    },
    "PropertyPIITag": {
      "type": "string",
      "enum": [
        "PROPERTY_PII_TAG_CLEAN",
        "PROPERTY_PII_TAG_PII",
        "PROPERTY_PII_TAG_PD"
      ],
      "default": "PROPERTY_PII_TAG_CLEAN",
      "description": "PIITag defines potential PII tags.\n\n - PROPERTY_PII_TAG_CLEAN: clean means the data is not PII or PD.\n - PROPERTY_PII_TAG_PII: PII means Personally Identifiable Information. It is information that can be used to retrieve personal data, such as IAM user ID.\n - PROPERTY_PII_TAG_PD: PD means personal data, such as name, email and address. They are sensitive data we need to protect in our system."
    },
    "QueryRequestCompositeFilter": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/QueryRequestCompositeFilterOperator",
          "description": "The operator for combining multiple filters."
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/QueryRequestFilter"
          },
          "description": "The list of filters to combine.\nMust contain at least one filter."
        }
      }
    },
    "QueryRequestCompositeFilterOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "AND",
        "OR"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "A composite filter operator.\n\n - OPERATOR_UNSPECIFIED: Unspecified. This value must not be used.\n - AND: The results are required to satisfy each of the combined filters.\n - OR: The results are required to satisfy one of the combined filters."
    },
    "QueryRequestFieldFilter": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference",
          "description": "The field to filter by."
        },
        "op": {
          "$ref": "#/definitions/QueryRequestFieldFilterOperator",
          "description": "The operator to filter by."
        },
        "value": {
          "$ref": "#/definitions/tesseractv1Value",
          "description": "The value to compare to."
        }
      }
    },
    "QueryRequestFieldFilterOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "LESS_THAN",
        "LESS_THAN_OR_EQUAL",
        "GREATER_THAN",
        "GREATER_THAN_OR_EQUAL",
        "EQUAL"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "A field filter operator.\n\n - OPERATOR_UNSPECIFIED: Unspecified. This value must not be used.\n - LESS_THAN: Less than. Requires that the field come first in `order_by`.\n - LESS_THAN_OR_EQUAL: Less than or equal. Requires that the field come first in `order_by`.\n - GREATER_THAN: Greater than. Requires that the field come first in `order_by`.\n - GREATER_THAN_OR_EQUAL: Greater than or equal. Requires that the field come first in\n`order_by`.\n - EQUAL: Equal."
    },
    "QueryRequestFilter": {
      "type": "object",
      "properties": {
        "fieldFilter": {
          "$ref": "#/definitions/QueryRequestFieldFilter"
        },
        "compositeFilter": {
          "$ref": "#/definitions/QueryRequestCompositeFilter"
        },
        "unaryFilter": {
          "$ref": "#/definitions/QueryRequestUnaryFilter"
        },
        "notFilter": {
          "$ref": "#/definitions/QueryRequestNotFilter"
        }
      }
    },
    "QueryRequestGranularity": {
      "type": "string",
      "enum": [
        "GRANULARITY_UNSPECIFIED",
        "HOURLY",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "QUARTERLY",
        "YEARLY"
      ],
      "default": "GRANULARITY_UNSPECIFIED"
    },
    "QueryRequestJoin": {
      "type": "object",
      "properties": {
        "table": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TableReference"
          }
        }
      }
    },
    "QueryRequestNotFilter": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/QueryRequestFilter"
        }
      }
    },
    "QueryRequestOrderBy": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/QueryRequestOrderByField"
          }
        }
      }
    },
    "QueryRequestOrderByField": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/QueryRequestProjection"
        },
        "operator": {
          "$ref": "#/definitions/QueryRequestOrderByOperator"
        }
      }
    },
    "QueryRequestOrderByOperator": {
      "type": "string",
      "enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "default": "ASCENDING"
    },
    "QueryRequestProjection": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference"
        },
        "aggregation": {
          "$ref": "#/definitions/ProjectionAggregation"
        },
        "transform": {
          "$ref": "#/definitions/ProjectionTransform"
        },
        "alias": {
          "type": "string"
        }
      }
    },
    "QueryRequestReducer": {
      "type": "object",
      "properties": {
        "reduction": {
          "$ref": "#/definitions/ReducerReduction"
        },
        "operator": {
          "$ref": "#/definitions/QueryRequestReducerOperator"
        }
      }
    },
    "QueryRequestReducerField": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference"
        },
        "date": {
          "$ref": "#/definitions/ReducerDate"
        }
      }
    },
    "QueryRequestReducerOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "GROUP_BY",
        "ROLLUP",
        "GROUPING_SETS",
        "CUBE"
      ],
      "default": "OPERATOR_UNSPECIFIED"
    },
    "QueryRequestUnaryFilter": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/QueryRequestUnaryFilterOperator",
          "description": "The unary operator to apply."
        },
        "field": {
          "$ref": "#/definitions/v1FieldReference",
          "description": "The field to which to apply the operator."
        }
      },
      "description": "A filter with a single operand."
    },
    "QueryRequestUnaryFilterOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "IS_NAN",
        "IS_NULL"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "A unary operator.\n\n - OPERATOR_UNSPECIFIED: Unspecified. This value must not be used.\n - IS_NAN: Test if a field is equal to NaN.\n - IS_NULL: Test if an exprestion evaluates to Null."
    },
    "ReducerDate": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference"
        },
        "granularity": {
          "$ref": "#/definitions/QueryRequestGranularity"
        }
      },
      "title": "Date reduces datetimes into buckets"
    },
    "ReducerReduction": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/QueryRequestReducerField"
          }
        }
      }
    },
    "TransformDateTruncate": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1FieldReference"
        },
        "granularity": {
          "$ref": "#/definitions/QueryRequestGranularity"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "tesseractv1ListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tesseractv1Value"
          }
        }
      }
    },
    "tesseractv1Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique identifier for this property. Must be in snake case format.\nExample(s): account_group_id, listing_id, company_name"
        },
        "type": {
          "$ref": "#/definitions/tesseractv1PropertyType",
          "title": "Type for this property"
        },
        "repeated": {
          "type": "boolean",
          "description": "Indicates if the field is repeated."
        },
        "length": {
          "type": "string",
          "format": "int64",
          "description": "Sets the max length of a string property, typically used to ensure your primary key fits within the bounds of\nthe 768 limit of your primary key."
        }
      }
    },
    "tesseractv1PropertyType": {
      "type": "string",
      "enum": [
        "STRING",
        "INT64",
        "DOUBLE",
        "BOOL",
        "TIMESTAMP",
        "GEOPOINT",
        "TREE"
      ],
      "default": "STRING",
      "title": "- TREE: Tree type properties contain labels delimited by periods, representing a path in a tree structure\nSee https://www.postgresql.org/docs/9.1/static/ltree.html for more information"
    },
    "tesseractv1Struct": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tesseractv1Value"
          }
        }
      }
    },
    "tesseractv1Value": {
      "type": "object",
      "properties": {
        "intValue": {
          "type": "string",
          "format": "int64",
          "title": "Represents a int64 value"
        },
        "doubleValue": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "stringValue": {
          "type": "string",
          "description": "Represents a string value."
        },
        "boolValue": {
          "type": "boolean",
          "description": "Represents a boolean value."
        },
        "timestampValue": {
          "type": "string",
          "format": "date-time",
          "description": "Represents a timestamp value."
        },
        "listValue": {
          "$ref": "#/definitions/tesseractv1ListValue",
          "description": "Represents a repeated `Value`."
        },
        "geopointValue": {
          "$ref": "#/definitions/v1GeoPoint"
        }
      }
    },
    "v1BulkCreateRequest": {
      "type": "object",
      "properties": {
        "table": {
          "$ref": "#/definitions/v1TableReference"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tesseractv1Struct"
          }
        }
      }
    },
    "v1CreateKindRequest": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1Kind"
        }
      }
    },
    "v1CreateNamespaceRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Unique namespace id unique to your project/microservice. Must be in lower snake case format.\nExample(s): repcore, partner-central, central-identity-service, marketing-automation."
        }
      }
    },
    "v1CreateRequest": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        }
      }
    },
    "v1DeleteKindRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Id of an existing namespace"
        },
        "kind": {
          "type": "string",
          "title": "Id of an existing kind"
        }
      }
    },
    "v1DeleteNamespaceRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Id of an existing namespace."
        }
      }
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "table": {
          "$ref": "#/definitions/v1TableReference"
        },
        "values": {
          "$ref": "#/definitions/tesseractv1Struct"
        }
      }
    },
    "v1EntityResult": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        }
      }
    },
    "v1ExecuteSQLRequest": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "string"
        },
        "params": {
          "type": "object"
        },
        "schema": {
          "$ref": "#/definitions/vendastatypesSchema",
          "title": "The schema of the sql params"
        }
      }
    },
    "v1ExecuteSQLUnaryResponse": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Row"
          }
        }
      }
    },
    "v1FieldReference": {
      "type": "object",
      "properties": {
        "tableReference": {
          "$ref": "#/definitions/v1TableReference"
        },
        "fieldPath": {
          "type": "string"
        }
      }
    },
    "v1GeoPoint": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1GetKindRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Id of an existing namespace"
        },
        "kind": {
          "type": "string",
          "title": "Id of an existing kind"
        }
      }
    },
    "v1GetKindResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1Kind"
        }
      }
    },
    "v1GetRequest": {
      "type": "object",
      "properties": {
        "keySets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeySet"
          }
        }
      }
    },
    "v1GetResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EntityResult"
          }
        }
      }
    },
    "v1KeySet": {
      "type": "object",
      "properties": {
        "table": {
          "$ref": "#/definitions/v1TableReference"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Kind": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Id of an existing namespace"
        },
        "kind": {
          "type": "string",
          "description": "Unique name of the kind that are creating. Must be in capital camel case format.\nExample(s): AccountGroup, Partner, Review, Listing."
        },
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of fields that compose of the primary key. The order is important as it is used for building keysets,\nas well as lookups can be done by the leading pieces of a keyset."
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tesseractv1Property"
          },
          "description": "Schema for the kind. Indexing of any entities into this namespace/kind requires that a type has been set\nfor every field being indexed.  No inference is done and explicit types are required. Fields also are not\nable to have their types changed or deleted, and only additive changes are allowed once a kind has been created."
        },
        "versionConcurrencyControl": {
          "$ref": "#/definitions/KindVersionConcurrencyControl"
        },
        "lastModifiedConcurrencyControl": {
          "$ref": "#/definitions/KindLastModifiedConcurrencyControl"
        },
        "distributedTable": {
          "$ref": "#/definitions/KindDistributedTable"
        },
        "referenceTable": {
          "$ref": "#/definitions/KindReferenceTable"
        },
        "localTable": {
          "$ref": "#/definitions/KindLocalTable"
        }
      }
    },
    "v1QueryRequest": {
      "type": "object",
      "properties": {
        "select": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/QueryRequestProjection"
          }
        },
        "from": {
          "$ref": "#/definitions/v1TableReference"
        },
        "where": {
          "$ref": "#/definitions/QueryRequestFilter"
        },
        "join": {
          "$ref": "#/definitions/QueryRequestJoin"
        },
        "groupBy": {
          "$ref": "#/definitions/QueryRequestReducer"
        },
        "having": {
          "$ref": "#/definitions/QueryRequestFilter"
        },
        "orderBy": {
          "$ref": "#/definitions/QueryRequestOrderBy"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "title": "Sets the maximum number of results (defaults to 10 if provided 0)"
        },
        "offset": {
          "type": "string",
          "format": "int64",
          "description": "The number of results to skip."
        }
      }
    },
    "v1QueryUnaryResponse": {
      "type": "object",
      "properties": {
        "structs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/tesseractv1Struct"
          }
        }
      }
    },
    "v1Row": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "title": "The values of the row"
        },
        "schema": {
          "$ref": "#/definitions/vendastatypesSchema",
          "title": "The schema of the result set (this is only returned on the first row)"
        }
      },
      "title": "A single result from ExecuteSQL"
    },
    "v1TableReference": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "v1UpdateKindRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "Id of an existing namespace"
        },
        "kind": {
          "type": "string",
          "description": "TODO: Fill in details",
          "title": "Id of an existing kind"
        }
      }
    },
    "vendastatypesProperty": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique identifier for this property. Must be in snake case format.\nExample(s): account_group_id, listing_id, company_name"
        },
        "type": {
          "$ref": "#/definitions/vendastatypesPropertyType",
          "title": "Type for this property"
        },
        "repeated": {
          "type": "boolean",
          "description": "Indicates if the field is repeated."
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/vendastatypesProperty"
          },
          "description": "Can only be specified if the Type supplied is a STRUCT.\nIs the schema of the structured property."
        },
        "piiTag": {
          "$ref": "#/definitions/PropertyPIITag"
        },
        "description": {
          "type": "string",
          "title": "Description of this property"
        }
      },
      "title": "Property defines a single property for a schema"
    },
    "vendastatypesPropertyType": {
      "type": "string",
      "enum": [
        "PROPERTY_TYPE_STRING",
        "PROPERTY_TYPE_INT64",
        "PROPERTY_TYPE_DOUBLE",
        "PROPERTY_TYPE_BOOL",
        "PROPERTY_TYPE_TIMESTAMP",
        "PROPERTY_TYPE_GEOPOINT",
        "PROPERTY_TYPE_STRUCT",
        "PROPERTY_TYPE_BYTES"
      ],
      "default": "PROPERTY_TYPE_STRING"
    },
    "vendastatypesSchema": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/vendastatypesProperty"
          }
        }
      },
      "title": "Schema describes the structure of data in a storage-agnostic way"
    }
  }
}
