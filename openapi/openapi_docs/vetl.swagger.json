{
  "swagger": "2.0",
  "info": {
    "title": "vetl/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "VETL"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/vetl.v1.VETL/BackfillSubscription": {
      "post": {
        "summary": "Backfill a subscription with all data from all its sources.\nThis should be triggered manually and used to migrate/transform historical data.",
        "operationId": "VETL_BackfillSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BackfillSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/CreateDataSource": {
      "post": {
        "summary": "Create a data source",
        "operationId": "VETL_CreateDataSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDataSourceRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/CreateSubscription": {
      "post": {
        "summary": "Create a subscription to a transform's output",
        "operationId": "VETL_CreateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/DeactivateSubscription": {
      "post": {
        "summary": "Deactivate a subscription. This operation is permanent.",
        "operationId": "VETL_DeactivateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeactivateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/GetGraph": {
      "post": {
        "summary": "Get the graph of registered sources, sinks and transforms",
        "operationId": "VETL_GetGraph",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGraphResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetGraphRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/GetSchemaAtNode": {
      "post": {
        "summary": "Get the schema outputting from the specified ndoe",
        "operationId": "VETL_GetSchemaAtNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSchemaAtNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSchemaAtNodeRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    },
    "/vetl.v1.VETL/UpsertTransform": {
      "post": {
        "summary": "Insert or Update a transform",
        "operationId": "VETL_UpsertTransform",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertTransformRequest"
            }
          }
        ],
        "tags": [
          "VETL"
        ]
      }
    }
  },
  "definitions": {
    "DatastoreSourceNamespace": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "identifies the datastore namespace that the table lives under. Empty value here means the top level (empty) namespace."
        },
        "all": {
          "type": "boolean",
          "description": "if true, the model is contained in many namespaces, potentially all namespaces."
        }
      }
    },
    "GetGraphResponseEdge": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "title": "id of the node the edge is outgoing from"
        },
        "to": {
          "type": "string",
          "title": "id of the node the edge is incoming to"
        }
      }
    },
    "GetGraphResponseNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "the id of the node, this could an id of a subscription, transform, or data source"
        },
        "public": {
          "type": "boolean",
          "title": "whether or not this node is public. subscriptions and data sources are always private"
        },
        "type": {
          "type": "string",
          "title": "what kind of node vetl structure this node represents, could be a subscription, transform, or data source"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "meta data about the node"
        },
        "owner": {
          "type": "string",
          "title": "the owner of this node"
        },
        "schema": {
          "$ref": "#/definitions/v1Schema",
          "title": "the schema at this node"
        }
      }
    },
    "PropertyType": {
      "type": "string",
      "enum": [
        "STRING",
        "INT64",
        "DOUBLE",
        "BOOL",
        "TIMESTAMP",
        "GEOPOINT",
        "STRUCT"
      ],
      "default": "STRING"
    },
    "SecondaryIndexCloudSQLConfig": {
      "type": "object",
      "properties": {
        "indexName": {
          "type": "string"
        },
        "instanceIp": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "clientKey": {
          "type": "string",
          "format": "byte"
        },
        "clientCert": {
          "type": "string",
          "format": "byte"
        },
        "serverCertificateAuthority": {
          "type": "string",
          "format": "byte"
        },
        "projectId": {
          "type": "string"
        },
        "instanceName": {
          "type": "string"
        }
      }
    },
    "SecondaryIndexPubSubConfig": {
      "type": "object",
      "properties": {
        "indexName": {
          "type": "string"
        }
      }
    },
    "TesseractSinkLastModifiedConcurrencyControl": {
      "type": "object",
      "properties": {
        "lastModifiedField": {
          "type": "string"
        }
      },
      "title": "Provides concurrency control through a timestamp based approach"
    },
    "TesseractSinkVersionConcurrencyControl": {
      "type": "object",
      "properties": {
        "versionField": {
          "type": "string"
        }
      },
      "title": "Provides concurrency control through a monotonically increasing version number"
    },
    "VStoreSinkSecondaryIndex": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the secondary index, this name must be unique from other secondary indexes"
        },
        "cloudSqlConfig": {
          "$ref": "#/definitions/SecondaryIndexCloudSQLConfig"
        },
        "pubsubConfig": {
          "$ref": "#/definitions/SecondaryIndexPubSubConfig"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1BackfillSubscriptionRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identifier of the subscription to backfill"
        }
      }
    },
    "v1CreateDataSourceRequest": {
      "type": "object",
      "properties": {
        "sourceId": {
          "type": "string",
          "title": "unique identifier for this data source"
        },
        "source": {
          "$ref": "#/definitions/v1DataSource"
        }
      }
    },
    "v1CreateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identifier for this subscription"
        },
        "parentId": {
          "type": "string",
          "title": "Identifier of the transform to subscribe to"
        },
        "sink": {
          "$ref": "#/definitions/v1DataSink"
        }
      }
    },
    "v1DataSink": {
      "type": "object",
      "properties": {
        "vstore": {
          "$ref": "#/definitions/v1VStoreSink"
        },
        "tesseract": {
          "$ref": "#/definitions/v1TesseractSink"
        }
      },
      "title": "Describes the destination for a transform's output"
    },
    "v1DataSinkType": {
      "type": "string",
      "enum": [
        "DATA_SINK_TYPE_NONE",
        "DATA_SINK_TYPE_VSTORE",
        "DATA_SINK_TYPE_TESSERACT"
      ],
      "default": "DATA_SINK_TYPE_NONE",
      "title": "Enumerates the types of data sinks"
    },
    "v1DataSource": {
      "type": "object",
      "properties": {
        "vstore": {
          "$ref": "#/definitions/v1VStoreSource"
        },
        "datastore": {
          "$ref": "#/definitions/v1DatastoreSource"
        },
        "schema": {
          "$ref": "#/definitions/v1Schema",
          "description": "Defines how the data is structured."
        }
      },
      "title": "Describes the schema associated with a particular source and how it is provided to vETL"
    },
    "v1DatastoreSource": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/DatastoreSourceNamespace"
        },
        "kind": {
          "type": "string",
          "title": "the name of the table"
        },
        "intakePubsubTopic": {
          "type": "string",
          "title": "the topic name of the pubsub intake that will notify vETL of changes to entities"
        },
        "projectId": {
          "type": "string",
          "title": "the project id of the cloud datastore instance and intake_pubsub_topic"
        },
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The names of the properties that represent the primary key field and it's parent key(s) fields.\nExample: If your key is account_group_id and it's parent is partner_id, this property should be [\"partner_id\", \"account_group_id\"]"
        },
        "parentKeyKinds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The kinds of the parent keys specified by `primary_key`, in order. This must be specified if there are parent key fields.\nExample: Following the example in `primary_key`, this property would be [\"Partner\"], and `kind` would be \"AccountGroup\""
        }
      },
      "description": "DatastoreSource contains the necessary information for vETL to be able to read data from a particular Cloud Datastore table\nThis source is throttled and will not provide updates in true realtime.\nInstead, updates are processed in bucketed windows, to rectify race conditions with creating/deleting in quick succession."
    },
    "v1DeactivateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identifier for the subscription to deactivate"
        }
      }
    },
    "v1ExtractProperties": {
      "type": "object",
      "properties": {
        "extractMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Mapping of the desired property to extract (the path to the property is dot sepearated) to the new name on the root\nof the entity"
        }
      },
      "title": "Extract a property from a structure out to the root of the entity"
    },
    "v1GetGraphRequest": {
      "type": "object"
    },
    "v1GetGraphResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetGraphResponseNode"
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetGraphResponseEdge"
          }
        }
      }
    },
    "v1GetSchemaAtNodeRequest": {
      "type": "object",
      "properties": {
        "transformId": {
          "type": "string",
          "title": "The ID of a transform to derive the schema from"
        },
        "sinkType": {
          "$ref": "#/definitions/v1DataSinkType",
          "title": "Optional sink type to process the schema through the implied transform that vETL performs at write time"
        }
      }
    },
    "v1GetSchemaAtNodeResponse": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/v1Schema"
        }
      }
    },
    "v1Join": {
      "type": "object",
      "properties": {
        "joinTransformId": {
          "type": "string",
          "title": "The transform which will output the side input for the join"
        },
        "keyMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The map for where to find the side input source's key properties on the primary entities properties\nEach of the `primary_key` components of the `join_transform_id`'s source should be keys in this mapping."
        },
        "outputMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The map for extracting properties by name from the side entities onto the primary entities"
        }
      },
      "title": "Join adds properties from side input entities retrieved for the primary entity"
    },
    "v1KeepProperties": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The properties names to keep, all other names will be dropped"
        }
      },
      "title": "KeepProperties removes all properties from a row except for a subset of specified properties"
    },
    "v1Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique identifier for this property. Must be in snake case format.\nExample(s): account_group_id, listing_id, company_name"
        },
        "type": {
          "$ref": "#/definitions/PropertyType",
          "title": "Type for this property"
        },
        "repeated": {
          "type": "boolean",
          "description": "Indicates if the field is repeated."
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if the field is required. Only validates that the field has been supplied in create/update requests,\nand not the actual value.\nExample(s):\n1) A required string field would allow an empty string if the field was passed, but would fail if the field\nwas not present in the request.\n2) A required int property would allow 0 as a value, but would fail if the field was not supplied in the request."
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Property"
          },
          "description": "Can only be specified if the Type supplied is a STRUCT.\nIs the schema of the structured property."
        }
      },
      "title": "TODO: This will become a common proto - dwalker\nProperty defines a single property for a schema"
    },
    "v1RenameProperties": {
      "type": "object",
      "properties": {
        "mappings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "map of old the property names to their new one\na missing property from this mapping, will keep its name"
        }
      },
      "title": "RenameProperties renames the properties with the provided mapping"
    },
    "v1Schema": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Property"
          }
        }
      },
      "title": "Schema describes the structure of data in a storage-agnostic way"
    },
    "v1TesseractSink": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "versionConcurrencyControl": {
          "$ref": "#/definitions/TesseractSinkVersionConcurrencyControl"
        },
        "lastModifiedConcurrencyControl": {
          "$ref": "#/definitions/TesseractSinkLastModifiedConcurrencyControl"
        }
      },
      "title": "TesseractSink contains the necessary information for vETL to be able to write data to a particular Tesseract table"
    },
    "v1Transform": {
      "type": "object",
      "properties": {
        "keepProperties": {
          "$ref": "#/definitions/v1KeepProperties"
        },
        "renameProperties": {
          "$ref": "#/definitions/v1RenameProperties"
        },
        "join": {
          "$ref": "#/definitions/v1Join"
        },
        "extractProperties": {
          "$ref": "#/definitions/v1ExtractProperties"
        }
      },
      "description": "Transform is an operation performed on an input row that changes its shape, structure, cardinality, etc."
    },
    "v1UpsertTransformRequest": {
      "type": "object",
      "properties": {
        "public": {
          "type": "boolean",
          "description": "Whether or not this transform is visible to other services."
        },
        "id": {
          "type": "string",
          "title": "Identifier for this transform"
        },
        "parentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of parent transform that this transform depends on."
        },
        "transform": {
          "$ref": "#/definitions/v1Transform",
          "title": "The definition of the transform"
        }
      }
    },
    "v1VStoreSink": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secondaryIndexes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VStoreSinkSecondaryIndex"
          }
        },
        "externalRegisterKind": {
          "type": "boolean",
          "description": "If set to true vETL will not be responsible for registering the Kind. This must be done by the client before."
        }
      },
      "title": "VStoreSink contains the necessary information for vETL to be able to write data to a particular VStore table"
    },
    "v1VStoreSource": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pubsubIndexId": {
          "type": "string",
          "title": "The index id of a pubsub secondary index that is suitable for vETL to read from in order to transform new data"
        }
      },
      "title": "VStoreSource contains the necessary information for vETL to be able to read data from a particular VStore table"
    }
  }
}
