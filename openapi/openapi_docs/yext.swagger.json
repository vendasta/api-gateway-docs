{
  "swagger": "2.0",
  "info": {
    "title": "yext/v1/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "EntityAdmin"
    },
    {
      "name": "Yext"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/yext.v1.EntityAdmin/Create": {
      "post": {
        "operationId": "EntityAdmin_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRequest"
            }
          }
        ],
        "tags": [
          "EntityAdmin"
        ]
      }
    },
    "/yext.v1.EntityAdmin/Delete": {
      "post": {
        "operationId": "EntityAdmin_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteRequest"
            }
          }
        ],
        "tags": [
          "EntityAdmin"
        ]
      }
    },
    "/yext.v1.EntityAdmin/Get": {
      "post": {
        "operationId": "EntityAdmin_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRequest"
            }
          }
        ],
        "tags": [
          "EntityAdmin"
        ]
      }
    },
    "/yext.v1.EntityAdmin/Lookup": {
      "post": {
        "summary": "Lookup attempts to find a single entity by the Yext IDs, rather than the account group ID primary key.",
        "operationId": "EntityAdmin_Lookup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LookupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LookupRequest"
            }
          }
        ],
        "tags": [
          "EntityAdmin"
        ]
      }
    },
    "/yext.v1.EntityAdmin/Update": {
      "post": {
        "operationId": "EntityAdmin_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRequest"
            }
          }
        ],
        "tags": [
          "EntityAdmin"
        ]
      }
    },
    "/yext.v1.Yext/ActivateYextLSP": {
      "post": {
        "summary": "ActivateYextLSP triggers a workflow to create a location entity and enable a plan on Yext for a business",
        "operationId": "Yext_ActivateYextLSP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ActivateYextLSPRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ActivateYextPlans": {
      "post": {
        "summary": "ActivateYextPlans triggers a workflow to activate one or more plans on Yext for a business",
        "operationId": "Yext_ActivateYextPlans",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ActivateYextPlansRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ChangePlan": {
      "post": {
        "operationId": "Yext_ChangePlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangePlanRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/CreatePartnerConfig": {
      "post": {
        "summary": "CreatePartnerConfig creates a configuration for a partner using their own Yext contract.",
        "operationId": "Yext_CreatePartnerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePartnerConfigRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/DeactivateYextLSP": {
      "post": {
        "summary": "DeactivateYextLSP triggers a workflow to remove a business's location from all Yext plans",
        "operationId": "Yext_DeactivateYextLSP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeactivateYextLSPRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/GetEffectivePartnerConfig": {
      "post": {
        "summary": "GetEffectivePartnerConfig gets the configuration for a partner, who may or may not be using their own Yext contract.\nThis RPC will fall back to our default config if a config specific to the partner does not exist.",
        "operationId": "Yext_GetEffectivePartnerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPartnerConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPartnerConfigRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/GetPartnerConfig": {
      "post": {
        "summary": "GetPartnerConfig gets a configuration for a partner using their own Yext contract.",
        "operationId": "Yext_GetPartnerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPartnerConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPartnerConfigRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/GetPartnerImportWorkflowInfo": {
      "post": {
        "summary": "GetPartnerImportProgress gets the progress of the import workflow",
        "operationId": "Yext_GetPartnerImportWorkflowInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPartnerImportWorkflowInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPartnerImportWorkflowInfoRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ImportPartner": {
      "post": {
        "summary": "ImportPartner triggers a workflow to import a partner's SMBs from Yext",
        "operationId": "Yext_ImportPartner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportPartnerRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/IsBusinessReferral": {
      "post": {
        "summary": "IsBusinessReferral takes in a business id and checks if it is from the Referral Import Workflow.",
        "operationId": "Yext_IsBusinessReferral",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsBusinessReferralResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IsBusinessReferralRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ListActiveAccounts": {
      "post": {
        "summary": "ListActiveAccounts lists the locations/entities with active service on Yext",
        "operationId": "Yext_ListActiveAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListActiveAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListActiveAccountsRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ListingsOptIn": {
      "post": {
        "summary": "ListingsOptIn opts in to specified listings sources for a business",
        "operationId": "Yext_ListingsOptIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListingsOptInRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/ListingsOptOut": {
      "post": {
        "summary": "ListingsOptOut opts out of specified listings sources for a business",
        "operationId": "Yext_ListingsOptOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListingsOptOutRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/SyncAccountGroupFromYext": {
      "post": {
        "summary": "SyncAccountGroupFromYext fetches data from Yext and updates the business profile",
        "operationId": "Yext_SyncAccountGroupFromYext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncAccountGroupFromYextRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/SyncAccountGroupToYext": {
      "post": {
        "summary": "SyncAccountGroupToYext triggers a workflow to syndicate a business's latest information to Yext",
        "operationId": "Yext_SyncAccountGroupToYext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncAccountGroupToYextRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    },
    "/yext.v1.Yext/UpdatePartnerConfig": {
      "post": {
        "summary": "UpdatePartnerConfig updates a configuration for a partner using their own Yext contract.",
        "operationId": "Yext_UpdatePartnerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePartnerConfigRequest"
            }
          }
        ],
        "tags": [
          "Yext"
        ]
      }
    }
  },
  "definitions": {
    "GetPartnerImportWorkflowInfoRequestFilters": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "Filter by partner ID"
        },
        "startedAfter": {
          "type": "string",
          "format": "date-time",
          "title": "Filter by import entity workflow started after this time"
        }
      }
    },
    "GetPartnerImportWorkflowInfoResponseWorkflowInfo": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "The partner ID for Vendasta and Yext"
        },
        "accountGroupId": {
          "type": "string",
          "title": "The account group ID for the import workflow"
        },
        "yextAccountId": {
          "type": "string",
          "title": "The Yext account ID, which starts different than the account group ID"
        },
        "stage": {
          "type": "string",
          "title": "The stage of the import workflow"
        },
        "hasWarnings": {
          "type": "boolean",
          "title": "Whether expected inconsistencies were found during the import (e.g. too many keywords)"
        },
        "errorMessage": {
          "type": "string",
          "title": "The error message if the import workflow failed"
        }
      }
    },
    "PartnerConfigIdentityFederationConfig": {
      "type": "object",
      "properties": {
        "createUsers": {
          "type": "boolean",
          "description": "Whether or not we will create Yext users JIT."
        },
        "updateUsers": {
          "type": "boolean",
          "description": "Whether or not we will update Yext users JIT."
        },
        "addRoles": {
          "type": "boolean",
          "description": "Whether or not we will add roles to a Yext user JIT."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Deprecated: What roles to add to a Yext user, if add_roles is true, and the user is missing any of these roles."
        },
        "accountLinkMethod": {
          "$ref": "#/definitions/v1UserConnectionMethod",
          "title": "How should the Yext user account be linked to the Vendasta user account?"
        }
      }
    },
    "PartnerConfigLocationFederationConfig": {
      "type": "object",
      "properties": {
        "processYextToVendasta": {
          "type": "boolean",
          "title": "Whether or not we sync location data from Yext to Vendasta"
        },
        "processVendastaToYext": {
          "type": "boolean",
          "title": "Whether or not we sync location data from Vendasta to Yext"
        },
        "createLocation": {
          "type": "boolean",
          "title": "Whether or not location is enabled in Yext when LSP is activated"
        },
        "removeLocation": {
          "type": "boolean",
          "title": "Whether or not location is disabled in Yext when LSP addon is deactivated"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ActivateYextLSPRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        },
        "addonId": {
          "type": "string"
        },
        "yextPlanId": {
          "type": "string"
        },
        "activationId": {
          "type": "string"
        }
      }
    },
    "v1ActivateYextPlansRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        },
        "addonId": {
          "type": "string"
        },
        "yextPlanIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activationId": {
          "type": "string"
        }
      }
    },
    "v1ChangePlanRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "accountGroupId": {
          "type": "string"
        },
        "addonId": {
          "type": "string"
        },
        "activationId": {
          "type": "string"
        },
        "existingPlanId": {
          "type": "string"
        },
        "targetPlanId": {
          "type": "string"
        }
      }
    },
    "v1CreatePartnerConfigRequest": {
      "type": "object",
      "properties": {
        "partnerConfig": {
          "$ref": "#/definitions/v1PartnerConfig"
        }
      }
    },
    "v1CreateRequest": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        }
      }
    },
    "v1DeactivateYextLSPRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        },
        "activationId": {
          "type": "string"
        },
        "skus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional, if not specified, all skus will be cancelled"
        }
      }
    },
    "v1DeleteRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "description": "The Vendasta account group ID. In the Vendasta instance of Yext, this will be equal to the entity_id."
        }
      }
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "description": "The Vendasta account group ID. In the Vendasta instance of Yext, this will be equal to the entity_id."
        },
        "yextIds": {
          "$ref": "#/definitions/v1YextIds",
          "description": "The IDs used by Yext to store an entity."
        },
        "categoryIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The category IDs to sync to Yext. This is NOT necessarily the Yext categories, as the Yext instance can have a category mapping defined.\nFor example, In the Vendasta instance of Yext, these category IDs will be the Vendasta taxonomy IDs from the account group."
        }
      },
      "description": "Entity is a configuration object to map a Vendasta account group to a Yext entity."
    },
    "v1FieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "v1GetPartnerConfigRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        }
      }
    },
    "v1GetPartnerConfigResponse": {
      "type": "object",
      "properties": {
        "partnerConfig": {
          "$ref": "#/definitions/v1PartnerConfig"
        }
      }
    },
    "v1GetPartnerImportWorkflowInfoRequest": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "The number of results to return"
        },
        "cursor": {
          "type": "string",
          "title": "The cursor to get the next page of import workflows"
        },
        "filters": {
          "$ref": "#/definitions/GetPartnerImportWorkflowInfoRequestFilters",
          "title": "Optional filters"
        }
      }
    },
    "v1GetPartnerImportWorkflowInfoResponse": {
      "type": "object",
      "properties": {
        "workflowInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetPartnerImportWorkflowInfoResponseWorkflowInfo"
          },
          "title": "The stages of the import workflows"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "The total number of import workflows"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether there are more import workflows to list"
        },
        "cursor": {
          "type": "string",
          "title": "The cursor to get the next page of import workflows"
        }
      }
    },
    "v1GetRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string",
          "description": "The Vendasta account group ID. In the Vendasta instance of Yext, this will be equal to the entity_id."
        }
      }
    },
    "v1GetResponse": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        }
      }
    },
    "v1IDFallBackSource": {
      "type": "string",
      "enum": [
        "ID_FALL_BACK_SOURCE_UNKNOWN",
        "ID_FALL_BACK_SOURCE_ACCOUNT_GROUP_CUSTOMER_ID",
        "ID_FALL_BACK_SOURCE_ACCOUNT_GROUP_ID",
        "ID_FALL_BACK_SOURCE_PARTNER_ID",
        "ID_FALL_BACK_SOURCE_BRAND_ID"
      ],
      "default": "ID_FALL_BACK_SOURCE_UNKNOWN",
      "description": "An enumerated constant specifying what the Yext specific fields on the order form can fall back to if not\nspecified."
    },
    "v1ImportPartnerRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "title": "The partner ID for Vendasta and Yext"
        },
        "isReferral": {
          "type": "boolean",
          "title": "Whether or not to use Yext referral add-ons"
        },
        "specificYextEntityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list specifying a subset of Yext entities to import for the partner"
        }
      }
    },
    "v1IsBusinessReferralRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        }
      }
    },
    "v1IsBusinessReferralResponse": {
      "type": "object",
      "properties": {
        "isReferralAccount": {
          "type": "boolean"
        }
      }
    },
    "v1ListActiveAccountsRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "description": "The Yext account ID for which to list locations/entities with active service on Yext\n  Leave this blank if you want to get all active entities for Vendasta."
        }
      }
    },
    "v1ListActiveAccountsResponse": {
      "type": "object",
      "properties": {
        "accountGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "account_group_ids are the location/entities with an active service on Yext"
        }
      }
    },
    "v1ListingsOptInRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "accountGroupId": {
          "type": "string"
        },
        "yextSourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListingsOptOutRequest": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string"
        },
        "accountGroupId": {
          "type": "string"
        },
        "yextSourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LookupRequest": {
      "type": "object",
      "properties": {
        "yextIds": {
          "$ref": "#/definitions/v1YextIds",
          "description": "The IDs used by Yext to store an entity."
        }
      }
    },
    "v1LookupResponse": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        }
      }
    },
    "v1PartnerConfig": {
      "type": "object",
      "properties": {
        "partnerId": {
          "type": "string",
          "description": "The partner ID, provided by Vendasta."
        },
        "resellerId": {
          "type": "string",
          "description": "The reseller ID, provided by Yext."
        },
        "apiKey": {
          "type": "string",
          "title": "The API key for an 'application' in Yext's developer console.\nThis API key needs read/write access to the the knowledge API, the listings API, and the administrative API in order to work.\nThe api_key below refers to API V2 which is the default"
        },
        "yextWebHost": {
          "type": "string",
          "description": "The Yext whitelabelled web host: the host that users would see in their browser in the Yext dashboard."
        },
        "yextApiHost": {
          "type": "string",
          "description": "The Yext api host: the host used for API calls. Should be either api.yext.com or api-sandbox.yext.com."
        },
        "partnerIdentityConfig": {
          "$ref": "#/definitions/PartnerConfigIdentityFederationConfig",
          "description": "The configuration for managing (syncing) partner-level users between Vendasta and Yext."
        },
        "smbIdentityConfig": {
          "$ref": "#/definitions/PartnerConfigIdentityFederationConfig",
          "description": "The configuration for managing (syncing) smb-level users between Vendasta and Yext."
        },
        "locationFederationConfig": {
          "$ref": "#/definitions/PartnerConfigLocationFederationConfig",
          "title": "The configuration for location federation between Vendasta and Yext"
        },
        "apiKeyV1": {
          "type": "string",
          "description": "The Yext V1 API key."
        },
        "locationManagementApiVersion": {
          "$ref": "#/definitions/v1YextAPIVersion",
          "title": "Specify which API to use for the location management (V1 or V2). Default is V2"
        },
        "accountIdFallback": {
          "$ref": "#/definitions/v1IDFallBackSource",
          "description": "Specify the fall back value of the Yext account id. The fall back value is used when the AccountId is not\nspecified on the order form. This is a required field."
        },
        "entityIdFallback": {
          "$ref": "#/definitions/v1IDFallBackSource",
          "description": "Specify the fallback value of the Yext entity id. The fall back value is used when the EntityId is not specified\non the order form. This is a required field."
        }
      },
      "description": "PartnerConfig a configuration for a partner using their own Yext contract."
    },
    "v1SyncAccountGroupFromYextRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        }
      }
    },
    "v1SyncAccountGroupToYextRequest": {
      "type": "object",
      "properties": {
        "accountGroupId": {
          "type": "string"
        }
      }
    },
    "v1UpdatePartnerConfigRequest": {
      "type": "object",
      "properties": {
        "partnerConfig": {
          "$ref": "#/definitions/v1PartnerConfig"
        }
      }
    },
    "v1UpdateRequest": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1Entity"
        },
        "fieldMask": {
          "$ref": "#/definitions/v1FieldMask",
          "description": "Mask for what fields should be updated."
        }
      }
    },
    "v1UserConnectionMethod": {
      "type": "string",
      "enum": [
        "USER_CONNECTION_METHOD_UNKNOWN",
        "USER_CONNECTION_METHOD_EMAIL",
        "USER_CONNECTION_METHOD_USERNAME"
      ],
      "default": "USER_CONNECTION_METHOD_UNKNOWN",
      "title": "- USER_CONNECTION_METHOD_EMAIL: Default: Accounts with the same email address will be linked\n - USER_CONNECTION_METHOD_USERNAME: Accounts in Yext with the username format {yextAccountID}@{vendastaEmail} will be connected"
    },
    "v1YextAPIVersion": {
      "type": "string",
      "enum": [
        "YEXT_API_VERSION_UNKNOWN",
        "YEXT_API_VERSION_NOTSET",
        "YEXT_API_VERSION_V1",
        "YEXT_API_VERSION_V2"
      ],
      "default": "YEXT_API_VERSION_UNKNOWN",
      "title": "An enumerated constant specifying Yext API version to use"
    },
    "v1YextIds": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "The Yext account ID. In the Vendasta instance of Yext, this is seen in the user interface as the \"Partner Customer ID\"."
        },
        "entityId": {
          "type": "string",
          "description": "The Yext entity ID. In the Vendasta instance of Yext, this is seen in the suer interface as the \"Partner Location ID\"."
        }
      },
      "description": "YextIDs are the IDs used by Yext to store an entity."
    }
  }
}
