{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Platform Integrations OpenAPI Documentation"
  },
  "tags": [
    {
      "name": "IntegrationMarketingService"
    },
    {
      "name": "IntegrationManagementService"
    },
    {
      "name": "ConnectionsService"
    },
    {
      "name": "ProxyService"
    },
    {
      "name": "OAuthService"
    },
    {
      "name": "VendorConnectionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/vendor/connections": {
      "get": {
        "operationId": "VendorConnectionService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListVendorConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filters.ownerId",
            "description": "Required The partner id of the vendor that built/owns the integration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.integrationIds",
            "description": "Optional list of integrations to filter the result to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pagingOptions.cursor",
            "description": "cursor can be passed to retrieve the next page of results keyed by the cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagingOptions.pageSize",
            "description": "page_size specifies the number of items to return in the next page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "VendorConnectionService"
        ]
      }
    },
    "/v1/vendor/connections/{connection.connectionId}": {
      "patch": {
        "operationId": "VendorConnectionService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateVendorConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "connection.connectionId",
            "description": "unique id of the connection",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VendorConnectionServiceUpdateBody"
            }
          }
        ],
        "tags": [
          "VendorConnectionService"
        ]
      }
    },
    "/v1/vendor/connections/{connectionId}": {
      "get": {
        "operationId": "VendorConnectionService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVendorConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "connectionId",
            "description": "Unique connection id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "options.includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "VendorConnectionService"
        ]
      }
    },
    "/v1/vendor/connections/{connectionId}/businessData": {
      "get": {
        "operationId": "VendorConnectionService_GetBusinessData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBusinessDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VendorConnectionService"
        ]
      }
    },
    "/v1/vendor/connections:batchGet": {
      "get": {
        "operationId": "VendorConnectionService_GetMulti",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMultiVendorConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "connectionIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "VendorConnectionService"
        ]
      }
    }
  },
  "definitions": {
    "GetVendorConnectionRequestOptions": {
      "type": "object",
      "properties": {
        "includeDeleted": {
          "type": "boolean"
        }
      }
    },
    "platform_integrationsv1FieldOptions": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "The primary text to display to the user"
        },
        "value": {
          "title": "value The value to use when this option is selected"
        }
      },
      "title": "FieldOptions represents a single item in a dropdown or radio list"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1APIRequest": {
      "type": "object",
      "properties": {
        "method": {
          "$ref": "#/definitions/v1HTTPMethod"
        },
        "path": {
          "type": "string"
        },
        "query": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HTTPParam"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HTTPParam"
          }
        },
        "body": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "APIRequest is the request to be proxied to the specified system\nThe request parts will be processed as go templates allowing for values from the connection to be inserted\nFor example you may use\n{.connection.custom_field.some_field}\n{.connection.namespace}"
    },
    "v1APIResponse": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HTTPParam"
          }
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "body": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ActionType": {
      "type": "string",
      "enum": [
        "ACTION_TYPE_UNSPECIFIED",
        "ACTION_TYPE_CONTINUE",
        "ACTION_TYPE_CANCEL",
        "ACTION_TYPE_ADD_CONNECTION",
        "ACTION_TYPE_SEND_REQUEST",
        "ACTION_TYPE_COPY",
        "ACTION_TYPE_SAVE",
        "ACTION_TYPE_UNLOCK",
        "ACTION_TYPE_EDIT"
      ],
      "default": "ACTION_TYPE_UNSPECIFIED",
      "description": "- ACTION_TYPE_CONTINUE: for AUTH2 based integrations, preconnect form buttons\n - ACTION_TYPE_ADD_CONNECTION: for gingr integration, preconnect form has add connection button\n - ACTION_TYPE_SEND_REQUEST: for support based integrations, preconnect form has send request button\n - ACTION_TYPE_COPY: for gingr integration, config page has copy button\n - ACTION_TYPE_SAVE: save button needs for legacy based connections\n - ACTION_TYPE_UNLOCK: unlock button for automated review request\n - ACTION_TYPE_EDIT: for text type sync setting like protractor",
      "title": "added enum for possible action type for sync setting"
    },
    "v1Actions": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "label of the button"
        },
        "actionType": {
          "$ref": "#/definitions/v1ActionType",
          "title": "type of the action like continue, cancel, send request, copy, save"
        }
      },
      "title": "actions for sync setting"
    },
    "v1AdditionalInfo": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "websites": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebsiteInfo"
          }
        },
        "requirements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceInfo"
          }
        },
        "businesses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billing": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Product id which are available in the partner center marketplace and ID could change based on the\nenvironment the user is logged in (DEMO/PROD). Ex. RM, SM, MP-94072eXXXXXXXXXXXXXXd7ab4fc7a7e8"
        },
        "worksWith": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FieldConfig"
          },
          "title": "The works_with section can be used to display the sections that are associated with integrations.\nEx: GoogleMeet : {Business:[\"My Meetings\"]}, QuickBooks : {Customers:[\"contacts\",\"companies\"]} , GoogleSearchConsole : {Reports:\"Executive reports\"}\nThis field can be used instead of the existing businesses field to support different, multiple sections as key value pairs utilizing the required fields in FieldConfig type"
        }
      }
    },
    "v1CallIntegrationEndpointResponse": {
      "type": "object",
      "properties": {
        "response": {
          "$ref": "#/definitions/v1APIResponse"
        },
        "requestId": {
          "type": "string",
          "title": "The ID assigned to the request by the platform\nIt can be used to lookup the request in the logs"
        }
      }
    },
    "v1CallVendastaEndpointResponse": {
      "type": "object",
      "properties": {
        "response": {
          "$ref": "#/definitions/v1APIResponse"
        },
        "requestId": {
          "type": "string",
          "title": "The ID assigned to the request by the platform\nIt can be used to lookup the request in the logs"
        }
      }
    },
    "v1ConnectionIdentifier": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string",
          "title": "The UUID of an integration configuration record"
        },
        "integrationType": {
          "type": "string",
          "title": "The type of the integration configuration record. Ex: \"ShopMonkey\"\nSome integrations have multiple records to represent different configurations\nUsing the code allows all configurations to be checked however may result in multiple connections"
        },
        "connectionId": {
          "type": "string",
          "title": "The UUID of a connection record"
        },
        "externalId": {
          "type": "string",
          "description": "The vendor supplied id for the connection to the integration.\nThey are unique per integration."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace that this connection is for, the current options are an account group id or partner id."
        }
      }
    },
    "v1ConnectionMessage": {
      "type": "object",
      "properties": {
        "severity": {
          "$ref": "#/definitions/v1Severity",
          "title": "INFO, WARNING, ERROR"
        },
        "title": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ctaText": {
          "type": "string",
          "title": "Text to display on a call to action button"
        },
        "ctaUrl": {
          "type": "string",
          "title": "Page or site to navigate to when the call to action button is clicked"
        }
      }
    },
    "v1ConnectionMethods": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "OAUTH2",
        "APIKEY",
        "VENDOR_MANAGED",
        "LEGACY_OAUTH"
      ],
      "default": "UNSPECIFIED"
    },
    "v1ConnectionResponse": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1ConnectionStatus"
        },
        "label": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomFields"
          }
        },
        "statusLastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "dataLastReceived": {
          "type": "string",
          "format": "date-time"
        },
        "context": {
          "$ref": "#/definitions/v1SupportedContexts"
        },
        "connectionMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConnectionMessage"
          }
        }
      }
    },
    "v1ConnectionStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_STATUS",
        "PRECONNECTED",
        "CONNECTED",
        "DISCONNECTED",
        "DELETED"
      ],
      "default": "UNSPECIFIED_STATUS"
    },
    "v1CreateConnectionResponse": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        }
      }
    },
    "v1CreateIntegrationResponse": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        }
      }
    },
    "v1CustomFields": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1EmitEventResponse": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string",
          "title": "The ID of the event that was emitted. It is returned because event_id is optional on the intake so vendors might want to\nhave access to the generated id"
        }
      }
    },
    "v1FieldConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of the setting"
        },
        "label": {
          "type": "string",
          "title": "label of the setting"
        },
        "placeHolder": {
          "type": "string",
          "title": "place holder for the inputbox for API key based integration"
        },
        "hintText": {
          "type": "string",
          "title": "description for the setting, for special case jobber \"select the trigger to sync customer data:\""
        },
        "fieldType": {
          "$ref": "#/definitions/v1FieldType",
          "title": "type of the setting like checkbox, toggle, password, text, radio ...etc"
        },
        "required": {
          "type": "boolean",
          "title": "for required field"
        },
        "dependents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FieldConfig"
          },
          "title": "dependents for special case like jobber, dependents: [{id: 'triggerIsClosedJob', required: false, type: 'radio',value: 'false'}]"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/platform_integrationsv1FieldOptions"
          },
          "title": "options for the radio button like jobber, options: [{label: 'When a job is closed', value: 'true'}, {label: 'When a visit is completed', value: 'false'}]"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Actions"
          },
          "title": "button actions of the settings of config page"
        },
        "url": {
          "type": "string",
          "title": "url in instruction of the config page"
        },
        "icon": {
          "type": "string",
          "title": "lock icon for sync setting like automated review request, url icon for instruction, eye icon for password"
        },
        "defaultValue": {
          "description": "default_value The value to use when there is no connection record or the connection record does not have a custom field with this field's id."
        },
        "hidden": {
          "type": "boolean",
          "description": "flag to determine whether we need to show the field in the UI or not."
        },
        "fieldScopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FieldScope"
          },
          "description": "fieldScope is the allowed scopes that can view the field in the connection settings page."
        },
        "readonly": {
          "type": "boolean",
          "description": "Readonly allows to enable the password field editable or readonly."
        },
        "writeScopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FieldScope"
          },
          "description": "writeScope is the allowed scope that can allow edit access to a field in the connection settings page."
        }
      },
      "title": "added FieldConfig for storing settings of the integration"
    },
    "v1FieldScope": {
      "type": "string",
      "enum": [
        "INTEGRATION_SUPPORT",
        "NAMESPACE_ADMINS",
        "CONNECTING_USER"
      ],
      "default": "INTEGRATION_SUPPORT",
      "description": "- INTEGRATION_SUPPORT: Allows only the support team to have the access\n - NAMESPACE_ADMINS: Allows the namespace admins such as partner admins, sales people & SMB users to have the access\n - CONNECTING_USER: Allows the user who established the connection to have the acess",
      "title": "FieldScope defines scopes for which the field will be visible\nusing enum here because in future we might add more scope types and expand the usecase beyond the fields"
    },
    "v1FieldType": {
      "type": "string",
      "enum": [
        "FIELD_TYPE_UNSPECIFIED",
        "FIELD_TYPE_CHECKBOX",
        "FIELD_TYPE_TOGGLE",
        "FIELD_TYPE_PASSWORD",
        "FIELD_TYPE_TEXT",
        "FIELD_TYPE_RADIO",
        "FIELD_TYPE_SELECT",
        "FIELD_TYPE_LABEL",
        "FIELD_TYPE_CHIPLIST",
        "FIELD_TYPE_URL"
      ],
      "default": "FIELD_TYPE_UNSPECIFIED",
      "description": "FieldType defines options for how the field will be rendered on the forms.\n\n - FIELD_TYPE_CHECKBOX: for checkbox sync setting\n - FIELD_TYPE_TOGGLE: for toggle sync setting\n - FIELD_TYPE_PASSWORD: for password sync setting\n - FIELD_TYPE_TEXT: for input_box sync setting\n - FIELD_TYPE_RADIO: for radiobutton sync setting\n - FIELD_TYPE_SELECT: for dropdown sync setting\n - FIELD_TYPE_LABEL: for the instructions label ,as we need FieldType for instructions which holds only label.\n - FIELD_TYPE_CHIPLIST: for chips sync setting\n - FIELD_TYPE_URL: for url of the instructions"
    },
    "v1FormConfig": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "title of the form"
        },
        "description": {
          "type": "string",
          "title": "for description of the  preconnect form"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FieldConfig"
          },
          "title": "list of the sync settings"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Actions"
          },
          "title": "for actions of the preconnect form and config page"
        }
      },
      "title": "added FormConfig for storing title, description, fieldConfig, actions, urls of preconnect form and config page"
    },
    "v1GetAuthorizationCodeRedirectURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL to redirect the user to  acquire authorization"
        }
      }
    },
    "v1GetBusinessDataResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "The ID for the business that the connection was created for"
        },
        "businessName": {
          "type": "string",
          "title": "The name of the business"
        },
        "countryCode": {
          "type": "string",
          "description": "The two letter country code."
        },
        "regionCode": {
          "type": "string",
          "title": "The code for the top level subdivision within the country (state/province).\nExamples: CA-SK, US-FL, AG-08, AU-NSW"
        },
        "stateCode": {
          "type": "string",
          "title": "The 1-3 letter subdivision code used for mail addresses within the country.\nExamples: SK, FL, 8, NSW"
        },
        "city": {
          "type": "string",
          "title": "The name of the city the business is located in"
        }
      }
    },
    "v1GetConnectionDataResponse": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomFields"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ConnectionStatus"
        },
        "statusLastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "dataLastReceived": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1GetConnectionRequestFilters": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1SupportedContexts",
          "description": "Optional. connections could be filtered based one of these attribute."
        },
        "externalId": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "integrationType": {
          "type": "string"
        }
      }
    },
    "v1GetConnectionResponse": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1ConnectionStatus"
        },
        "label": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "customFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomFields"
          }
        },
        "context": {
          "$ref": "#/definitions/v1SupportedContexts"
        },
        "statusLastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "dataLastReceived": {
          "type": "string",
          "format": "date-time"
        },
        "connectionMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConnectionMessage"
          }
        }
      }
    },
    "v1GetIntegrationResponse": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "integrationType": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "authenticationUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "connectionMethod": {
          "$ref": "#/definitions/v1ConnectionMethods"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "longDescription": {
          "type": "string"
        },
        "additionalInfo": {
          "$ref": "#/definitions/v1AdditionalInfo"
        },
        "baseUrl": {
          "type": "string"
        },
        "maxConnections": {
          "type": "string",
          "format": "int64"
        },
        "webhookVerifierToken": {
          "type": "string"
        },
        "supportedContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SupportedContexts"
          }
        },
        "fieldExtensionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Contains the ID of a CRM field extension that should be automatically enabled for the namespace when a connection to this integration is created"
        },
        "preconnectFormFields": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "sync setting details of preconnect form for the integration"
        },
        "configPageFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormConfig"
          },
          "title": "sync setting details of config page for the connection"
        },
        "instructions": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "instructions displayed on the config page when the connection is in preconnected status"
        }
      }
    },
    "v1GetMultiIntegrationMarketingResponse": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntegrationMarketingResponse"
          }
        }
      }
    },
    "v1GetMultiVendorConnectionResponse": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VendorConnection"
          }
        }
      }
    },
    "v1GetVendorConnectionResponse": {
      "type": "object",
      "properties": {
        "connection": {
          "$ref": "#/definitions/v1VendorConnection"
        }
      }
    },
    "v1HTTPMethod": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "POST",
        "GET",
        "PUT",
        "DELETE",
        "PATCH"
      ],
      "default": "UNDEFINED"
    },
    "v1HTTPParam": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1IntegrationMarketingResponse": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "integrationType": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "longDescription": {
          "type": "string"
        },
        "additionalInfo": {
          "$ref": "#/definitions/v1AdditionalInfo"
        },
        "maxConnections": {
          "type": "string",
          "format": "int64"
        },
        "connectionMethod": {
          "$ref": "#/definitions/v1ConnectionMethods"
        },
        "supportedContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SupportedContexts"
          }
        },
        "preconnectFormFields": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "sync setting details of preconnect form for the integration"
        },
        "configPageFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormConfig"
          },
          "title": "sync setting details of config page for the connection"
        },
        "instructions": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "instructions displayed on the config page when the connection is in preconnected status"
        }
      }
    },
    "v1IntegrationsFilters": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        }
      }
    },
    "v1ListConnectionRequestFilters": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1SupportedContexts",
          "description": "Optional. connections could be filtered based one of these attribute."
        },
        "externalId": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "integrationType": {
          "type": "string"
        }
      }
    },
    "v1ListConnectionResponse": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConnectionResponse"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ListIntegrationMarketingResponse": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntegrationMarketingResponse"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ListIntegrationResponse": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetIntegrationResponse"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ListVendorConnectionRequestFilters": {
      "type": "object",
      "properties": {
        "ownerId": {
          "type": "string",
          "title": "Required The partner id of the vendor that built/owns the integration"
        },
        "integrationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional list of integrations to filter the result to"
        }
      }
    },
    "v1ListVendorConnectionResponse": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VendorConnection"
          }
        },
        "pagingMetadata": {
          "$ref": "#/definitions/vendastatypesPagedResponseMetadata"
        }
      }
    },
    "v1ResourceInfo": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string"
        },
        "resourceUrl": {
          "type": "string"
        }
      }
    },
    "v1Severity": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_SEVERITY",
        "INFO",
        "WARNING",
        "ERROR"
      ],
      "default": "UNSPECIFIED_SEVERITY"
    },
    "v1SupportedContexts": {
      "type": "string",
      "enum": [
        "PI_CONTEXT_UNSET",
        "PI_CONTEXT_PARTNER",
        "PI_CONTEXT_SMB"
      ],
      "default": "PI_CONTEXT_UNSET"
    },
    "v1UpdateConnectionRequestUpdateFields": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ConnectionStatus"
        },
        "customFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomFields"
          }
        },
        "label": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/v1SupportedContexts"
        }
      }
    },
    "v1UpdateIntegrationRequestUpdateFields": {
      "type": "object",
      "properties": {
        "logo": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "integrationType": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "connectionMethod": {
          "$ref": "#/definitions/v1ConnectionMethods"
        },
        "authenticationUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "additionalInfo": {
          "$ref": "#/definitions/v1AdditionalInfo"
        },
        "baseUrl": {
          "type": "string"
        },
        "maxConnections": {
          "type": "string",
          "format": "int64"
        },
        "webhookVerifierToken": {
          "type": "string"
        },
        "supportedContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SupportedContexts"
          }
        },
        "ownerId": {
          "type": "string"
        },
        "fieldExtensionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Contains the ID of a CRM field extension that should be automatically enabled for the namespace when a connection to this integration is created"
        },
        "preconnectFormFields": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "sync setting details of preconnect form for the integration"
        },
        "configPageFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormConfig"
          },
          "title": "sync setting details of config page for the connection"
        },
        "instructions": {
          "$ref": "#/definitions/v1FormConfig",
          "title": "instructions displayed on the config page when the connection is in preconnected status"
        }
      }
    },
    "v1UpdateVendorConnectionResponse": {
      "type": "object",
      "properties": {
        "connection": {
          "$ref": "#/definitions/v1VendorConnection"
        }
      }
    },
    "v1VendorConnection": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string",
          "title": "unique id of the integration"
        },
        "connectionId": {
          "type": "string",
          "title": "unique id of the connection"
        },
        "namespace": {
          "type": "string",
          "title": "ID of the account group or partner that created the connection"
        },
        "userId": {
          "type": "string",
          "title": "User id that created the connection"
        },
        "status": {
          "$ref": "#/definitions/v1ConnectionStatus",
          "title": "Current status of the connection"
        },
        "label": {
          "type": "string",
          "title": "Label for the connection which we will be used in the UI"
        },
        "externalId": {
          "type": "string",
          "title": "Unique identifier of the external system to which the connection is made"
        },
        "customFields": {
          "type": "object",
          "title": "Any custom fields that are specific to a connection"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "title": "When the connection was created"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "title": "When the connection was last updated"
        },
        "deleted": {
          "type": "string",
          "format": "date-time",
          "title": "When the connection was deleted"
        }
      },
      "description": "A vendor connection object",
      "title": "VendorConnection"
    },
    "v1VendorConnectionServiceUpdateBody": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "object",
          "properties": {
            "integrationId": {
              "type": "string",
              "title": "unique id of the integration"
            },
            "namespace": {
              "type": "string",
              "title": "ID of the account group or partner that created the connection"
            },
            "userId": {
              "type": "string",
              "title": "User id that created the connection"
            },
            "status": {
              "$ref": "#/definitions/v1ConnectionStatus",
              "title": "Current status of the connection"
            },
            "label": {
              "type": "string",
              "title": "Label for the connection which we will be used in the UI"
            },
            "externalId": {
              "type": "string",
              "title": "Unique identifier of the external system to which the connection is made"
            },
            "customFields": {
              "type": "object",
              "title": "Any custom fields that are specific to a connection"
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "title": "When the connection was created"
            },
            "updated": {
              "type": "string",
              "format": "date-time",
              "title": "When the connection was last updated"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "title": "When the connection was deleted"
            }
          },
          "description": "A vendor connection object",
          "title": "VendorConnection"
        },
        "updateMask": {
          "$ref": "#/definitions/vendastatypesFieldMask"
        }
      }
    },
    "v1WebsiteInfo": {
      "type": "object",
      "properties": {
        "siteName": {
          "type": "string"
        },
        "siteUrl": {
          "type": "string"
        }
      }
    },
    "vendastatypesFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, the existing\nrepeated values in the target resource will be overwritten by the new values.\nNote that a repeated field is only allowed in the last position of a `paths`\nstring.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then the existing sub-message in the target resource is\noverwritten. Given the target message:\n\n    f {\n      b {\n        d : 1\n        x : 2\n      }\n      c : 1\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d : 10\n      }\n    }\n\nthen if the field mask is:\n\n paths: \"f.b\"\n\nthen the result will be:\n\n    f {\n      b {\n        d : 10\n      }\n      c : 1\n    }\n\nHowever, if the update mask was:\n\n paths: \"f.b.d\"\n\nthen the result would be:\n\n    f {\n      b {\n        d : 10\n        x : 2\n      }\n      c : 1\n    }\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "vendastatypesPagedRequestOptions": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor can be passed to retrieve the next page of results keyed by the cursor"
        },
        "pageSize": {
          "type": "string",
          "format": "int64",
          "title": "page_size specifies the number of items to return in the next page"
        }
      }
    },
    "vendastatypesPagedResponseMetadata": {
      "type": "object",
      "properties": {
        "nextCursor": {
          "type": "string",
          "title": "A cursor that can be provided to retrieve the next page of results"
        },
        "hasMore": {
          "type": "boolean",
          "title": "Whether or not more results exist"
        },
        "totalResults": {
          "type": "string",
          "format": "int64",
          "title": "The total number of results. This is not supported on all paged apis and will be 0 if it is not supported"
        }
      }
    }
  },
  "host": "prod.apigateway.co",
  "basePath": "/grpc",
  "schemes": [
    "https"
  ]
}