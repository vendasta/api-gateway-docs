openapi: 3.0.3
info:
  title: API Definition- SCIM 2.0
  description: Api definition for SCIM 2.0 standasrds using OpenAPI 3.0 specification.
  version: 1.0.0
servers:
  - url: 'https://prod.apigateway.co'
    description: Production
  - url: 'https://demo.apigateway.co'
    description: Demo
  - url: ''
    description: ''
tags:
  - name: User
    description: User resources
  - name: Group
    description: Group resource
paths:
  '/scim/v1/{partnerid}/Users':
    get:
      tags:
        - User
      summary: Search Users
      parameters:
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            Filtering is an OPTIONAL parameter.
            List users using described filters.
            <br> Supported filters are:
            <br> `externalId eq "user_external_id"`
            <br> `userName eq "user@mail.com"`
            <br>`/scim/v1/{partnerid}/Users?filter=userName eq "user@mail.com"`
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: attributes
          description: |-
            Resource attributes can be restriceted by using attributes parameter.
            <br>`/scim/v1/{partnerid}/Users?filter=userName eq "user@mail.com"&attributes=userName`
            <br>`/scim/v1/{partnerid}/Users?attributes=id,externalId,userName`
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '404':
          description: User not found
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        This endpoint can be used to search users based on filter or list all user if filter criteria is ignored  
      security:
        - oath2:
            - user.list
      x-lifecycle:
        status: proposed
      operationId: scim-search-users
    post:
      tags:
        - User
      summary: Create User
      requestBody:
        description: Create a new user
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
      operationId: scim-create-user
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        Create User based on SCIM schema
      security:
        - oath2:
            - user.admin
      x-lifecycle: proposed
  '/scim/v1/{partnerid}/Users/{id}':
    get:
      tags:
        - User
      summary: Get User
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      x-internal: false
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        Get an user when the user id is known
      operationId: scim-get-user
      security:
        - oath2:
            - user.list
      x-lifecycle: proposed
    put:
      tags:
        - User
      summary: Replace User
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new user
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
      operationId: scim-replace-user
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        API to replace an user. All of the attributes will be replaced with provided value and attributes will be kept black for which no value is specified
      security:
        - oath2:
            - user.admin
      x-lifecycle: proposed
    patch:
      tags:
        - User
      summary: Update User
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        Update an user's one or multiple attributes by roviding operation path and value. Post update all other attributes will be unchanged apart from provided attributes. 
      operationId: scim-update-user
      x-lifecycle: proposed
      security:
        - oath2:
            - user.admin
    delete:
      tags:
        - User
      summary: Delete User
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '405':
          description: Invalid input
      operationId: scim-delete-user
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Proposed`

        API to delete an user
      security:
        - oath2:
            - user.admin
      x-lifecycle: proposed
    parameters: []
  '/scim/v1/{partnerId}/Groups':
    get:
      tags:
        - Group
      summary: Search Groups
      parameters:
        - name: excludedAttributes
          in: query
          description: Exclude members using `excludedAttributes=members`
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: Search group using `displayName eq "displayName"`
          required: false
          schema:
            type: string
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ListResponseGroup'
        '404':
          description: User not found
      operationId: ''
      description: |
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Draft`
  '/scim/v1/{partnerId}/Groups/{id}':
    get:
      tags:
        - Group
      summary: Get Group
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
        - name: excludedAttributes
          in: query
          description: Exclude members using `excludedAttributes=members`
          required: false
          schema:
            type: string
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: User not found
      description: |
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Draft`
    patch:
      tags:
        - Group
      summary: Update Group
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOp'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/Group'
        '405':
          description: Invalid input
      description: |
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Draft`
components:
  schemas:
    User:
      type: object
      properties:
        schemas:
          type: array
          example:
            - 'urn:ietf:params:scim:schemas:core:2.0:User'
          minItems: 1
          uniqueItems: true
          items:
            type: string
            example: '["urn:ietf:params:scim:schemas:core:2.0:User"]'
        id:
          type: string
          description: |-
            Unique identifier in Vendasta.
            This field will be generated by Vendasta during creation of user.
        externalId:
          type: string
          description: |-
            External unique identifier of the user.
            This is a mandatory attribute and client should specify during each operation.
        userName:
          type: string
          description: |-
            A service provider's unique identifier for the user, typically
            used by the user to directly authenticate to the service provider.
            Often displayed to the user as their unique identifier within the
            system (as opposed to "id" or "externalId", which are generally
            opaque and not user-friendly identifiers).  Each User MUST include
            a non-empty userName value.  This identifier MUST be unique across
            the service provider's entire set of Users.  This attribute is
            REQUIRED and is case insensitive.
            <br><b>userName</b> is mapped with <b>email</b> 
          example: barbara@mail.com
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          type: string
          description: givenName + familyName
          example: Babs Jensen
          readOnly: true
        nickName:
          type: string
          example: Babs
        profileUrl:
          type: string
          format: uri
          description: <b>This field currently NOT SUPPORTED</b>
        title:
          type: string
          description: |-
            The user''s title, such as "Vice President".
            <br><b>This field currently NOT SUPPORTED</b>
        userType:
          type: string
          description: |-
            Used to identify the relationship between the organization and the
            user.  Typical values used might be "Contractor", "Employee",
            "Intern", "Temp", "External", and "Unknown", but any value may be used.
            <br><b>This field currently NOT SUPPORTED</b>
        preferredLanguage:
          type: string
        locale:
          type: string
          description: <b>This field currently NOT SUPPORTED</b>
        timezone:
          type: string
        emails:
          type: array
          minItems: 1
          maxItems: 1
          description: Email is i one to one mapping with user.
          items:
            $ref: '#/components/schemas/Email'
        active:
          type: boolean
        password:
          type: string
          description: <b>This field currently NOT SUPPORTED</b>
        addresses:
          type: array
          description: Address is in one to one mapping with user
          minItems: 0
          maxItems: 1
          items:
            $ref: '#/components/schemas/Address'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        meta:
          $ref: '#/components/schemas/Meta'
      required:
        - schemas
        - externalId
        - userName
        - name
        - emails
        - active
    PhoneNumber:
      type: object
      properties:
        value:
          type: string
          example: 555-555-5555
        type:
          type: string
          example: work
    Address:
      type: object
      properties:
        type:
          type: string
          example: work
        streetAddress:
          type: string
          example: 100 Universal City Plaza
        locality":
          type: string
          example: Hollywood
        region:
          type: string
          example: CA
        postalCode:
          type: string
          example: 91608
        country:
          type: string
          example: USA
        formatted:
          type: string
          example: '100 Universal City Plaza\nHollywood, CA 91608 USA'
        primary:
          type: boolean
    Name:
      type: object
      properties:
        formatted:
          type: string
          description: givenName + " " + middleName + " " + familyName
          readOnly: true
        familyName:
          type: string
          example: Jensen
        givenName:
          type: string
          example: Barbara
        middleName:
          type: string
          example: Jane
        honorificPrefix:
          type: string
          example: Ms.
          description: <b>This field currently NOT SUPPORTED</b>
        honorificSuffix:
          type: string
          example: III
          description: <b>This field currently NOT SUPPORTED</b>
      required:
        - givenName
    Email:
      type: object
      properties:
        value:
          type: string
          format: email
          example: bjensen@example.com
        type:
          type: string
          example: work
        primary:
          type: boolean
    Group:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example:
            - 'urn:ietf:params:scim:schemas:core:2.0:Group'
        id:
          type: string
          example: e9e30dba-f08f-4109-8486-d5c6a331660a
        displayName:
          type: string
          example: Tour Guides
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        meta:
          $ref: '#/components/schemas/Meta'
    Member:
      type: object
      properties:
        value:
          type: string
          example: 2819c223-7f76-453a-919d-413861904646
        $ref:
          type: string
          format: uri
          example: 'https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646'
        display:
          type: string
          example: Babs Jensen
    ServiceProviderConfig:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example:
            - 'urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig'
        meta:
          $ref: '#/components/schemas/Meta'
    ListResponse:
      type: object
      properties:
        schemas:
          type: array
          example:
            - 'urn:ietf:params:scim:api:messages:2.0:ListResponse'
          items:
            type: string
        totalResults:
          type: number
          description: The total number of results returned by the list or query operation
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/User'
        startIndex:
          type: number
          description: |-
            The 1-based index of the first result in the current set of list results.
            REQUIRED when partial results are returned due to pagination.
        itemsPerPage:
          type: number
          description: |-
            The number of resources returned in a list response page.
            REQUIRED when partial results are returned due to pagination.
    ListResponseGroup:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example:
            - 'urn:ietf:params:scim:api:messages:2.0:ListResponse'
        totalResults:
          type: number
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        startIndex:
          type: number
        itemsPerPage:
          type: number
    PatchOp:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          example:
            - 'urn:ietf:params:scim:api:messages:2.0:PatchOp'
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
    Operation:
      type: object
      properties:
        op:
          type: string
          example: Replace
        path:
          type: string
          example: 'emails[type eq "work"].value'
        value:
          type: string
          example: updatedEmail@mail.com
    ResourceType:
      type: object
    Meta:
      type: object
      properties:
        resourceType:
          type: string
          example: User
        created:
          type: string
          format: date-time
          example: '2010-01-23T04:56:22Z'
        lastModified:
          type: string
          format: date-time
          example: '2011-05-13T04:42:34Z'
        version:
          type: string
          description: |-
            The version of the resource being returned.  This value
            must be the same as the entity-tag (ETag) HTTP response header.
            This attribute has "caseExact" as "true".  Service provider support for this
            attribute is optional and subject to the service provider's
            support for versioning.  If a
            service provider provides "version" (entity-tag) for a
            representation and the generation of that entity-tag does not
            satisfy all of the characteristics of a strong validator, then the origin server MUST mark the
            "version" (entity-tag) as weak by prefixing its opaque value
            with "W/" (case sensitive).
          example: W/"3694e05e9dff591"
        location:
          type: string
          example: 'https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: ''
    oath2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://sso-api-demo.apigateway.co/oauth2/auth'
          tokenUrl: 'https://sso-api-demo.apigateway.co/oauth2/token'
          scopes:
            user.admin: Read-write access to manage all users
            user.list: 'Allows searching for users based on a set of filters. (ex: email, name, category, organization). Without this scope an exact user id is required.'
security:
  - bearerAuth: []
