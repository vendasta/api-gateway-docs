openapi: 3.0.0
info:
  title: Single-Sign-On OAuth Endpoints
  version: Evergreen
  description: ''
servers:
  - url: 'https://sso-api-prod.apigateway.co/'
    description: Production
  - description: Demo
    url: 'https://sso-api-demo.apigateway.co/'
paths:
  '/{partnerID}/oauth2/auth':
    get:
      summary: OAuth2 Auth
      operationId: openid-auth
      responses: {}
      x-lifecycle:
        status: trustedTester
      description: |
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Trusted Tester`

        This endpoint is used for browsers intentful navigation to service with auth by openid connect.

        Within the platform an intentful navigation must include: a partner id, a client id (which is associated with a service provider) and a service provider context (example: a specific Business Location id).

        This operation does not require a token to call, as it is the start of the flow for obtaining tokens for securely calling the Gateway's APIs.

        To use identity tokens, you must use OpenID Connect by requesting the scope `openid` and performing a valid OpenID request.

        To use refresh tokens, you must use OpenID Connect, request the scope `offline_access`, and a request `prompt` of `consent`. This explicitly asks the user for the elevated offline access via refresh tokens. 
      security: []
      parameters:
        - schema:
            type: string
          in: query
          name: client_id
          required: true
          description: 'Client ID in Vendasta''s OpenID. This is associated with a service provider, which determines the destination.'
        - schema:
            type: string
          in: query
          name: account_id
          description: Business Location ID (Optional Service Context)
        - schema:
            type: string
          in: query
          name: group_path
          description: 'Group ID (Optional Service Context) '
        - schema:
            type: string
            enum:
              - none
              - login
              - consent
              - select_account
          in: query
          name: prompt
          description: Prompt controls what prompts will or will not be shown to the user.
        - schema:
            type: string
          in: query
          name: redirect_uri
          description: Redirect URI is where the User will be sent after the Authorization flow with either the result or an error.
          required: true
        - schema:
            type: string
            example: code
          in: query
          name: response_type
          required: true
          description: The Open ID authorization response type. Only 'code' is supported.
        - schema:
            type: string
          in: query
          name: code_challenge
          description: 'OAuth2 PKCE Code Challenge generated just before making auth request, to be later verified at Token endpoint. Required when not using client secret.'
        - schema:
            type: string
            enum:
              - S256
              - plain
            example: S256
          in: query
          name: code_challenge_method
          description: OAuth2 PKCE Code Challenge Method. Required when providing `code_challenge`. See PKCE documentation for details on these methods.
        - schema:
            type: string
            example: openid
          in: query
          name: scope
          required: true
          description: 'OAuth2 Scopes being requested. Scopes are used to obtain access to User information and ability to call APIs on their behalf. Consent to scopes can be given and revoked, and requests for only consented scopes will not require interaction for consent unless `prompt=consent` forces it.'
        - schema:
            type: string
          in: query
          name: nonce
          description: OpenID Nonce value to be returned in Identity Token. Optional on all supported flows.
        - schema:
            type: string
          in: query
          name: state
          description: 'OAuth2 State. Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.'
      tags:
        - Single-Sign-On
    parameters:
      - schema:
          type: string
        name: partnerID
        in: path
        required: true
        description: Partner ID providing identity namespacing
  '/{partnerID}/oauth2/token':
    parameters:
      - schema:
          type: string
        name: partnerID
        in: path
        required: true
        description: Partner ID providing identity namespacing
    post:
      summary: OAuth2 Token
      operationId: openid-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Access token with the requested and granted scopes.
                type: object
                x-examples:
                  example-1:
                    access_token: SlAV32hkKG
                    token_type: Bearer
                    refresh_token: 8xLOxBtZp8
                    expires_in: 3600
                    id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ
                properties:
                  access_token:
                    type: string
                    minLength: 1
                    description: 'Token Type being returned, '
                  token_type:
                    type: string
                    minLength: 1
                    enum:
                      - bearer
                    description: 'OAuth 2.0 Token Type value, will be `bearer`, indicating access_token is to be used as bearer token.'
                  refresh_token:
                    type: string
                    minLength: 1
                    description: A refresh token which can be used as an authorization grant for delegated access when user offline or not using the application. Only returned when requested with `offline_access` scope.
                  expires_in:
                    type: number
                    description: |
                      Expiry of Access Token in seconds.
                  id_token:
                    type: string
                    minLength: 1
                    description: 'Identity Token containing base user identity data (user id) and extra data based on requested and granted scopes (email, name). To get this data from an access token, use the UserInfo endpoint.'
                required:
                  - access_token
                  - token_type
                  - refresh_token
                  - expires_in
                  - id_token
              examples:
                example-1:
                  value:
                    access_token: SlAV32hkKG
                    token_type: Bearer
                    refresh_token: 8xLOxBtZp8
                    expires_in: 3600
                    id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Trusted Tester`

        This is the OpenID Token endpoint, used for obtaining identity (via identity token) and scoped api access (via access tokens).

        Depeding on your use case, this is called in one of a few ways based upon the grant type being used:
        1. Presenting a code that was returned to your service after user completed the `/oauth2/auth` request. 
        Scopes of identity and API access must be requested and granted. This is the `authorization_code` grant type.
        2. Presenting a signed assertion JWT, using a client key associated with your user, when acting as the service itself. Scopes are written into the signed assertion JWT or given by query parameter. This is the `urn:ietf:params:oauth:grant-type:jwt-bearer` grant type.
        3. Presenting a refresh token, which acts as a secret that permits your service delegated access even when user is offline from your service. Scopes can be narrowed [but permanently?] from original request. This is the `refresh_token` grant type.

        This operation does not require a token to call, as it is the end of the flow for obtaining tokens for securely calling the Gateway's APIs.
      parameters:
        - schema:
            type: string
            enum:
              - authorization_code
              - refresh_token
              - 'urn:ietf:params:oauth:grant-type:jwt-bearer'
          in: query
          name: grant_type
          description: 'Grant Type being used, see description for common use cases.'
          required: true
        - schema:
            type: string
          in: query
          name: code
          description: 'When using `authorization_code` grant: the code obtain from a successful completion of authorization endpoint'
        - schema:
            type: string
          in: query
          name: redirect_uri
          description: 'When using `authorization_code` grant: the exact `redirect_uri` that was used at the authorization endpoint'
        - schema:
            type: string
          in: query
          name: client_id
          description: 'When using `authorization_code` or `refresh_token` grant: The client ID for the authorization flow.'
        - schema:
            type: string
          in: query
          name: client_secret
          description: 'When using `authorization_code` or `refresh_token` grant: The client secret for the authorization flow. Required when obtaining refresh tokens or using them as grants.'
        - schema:
            type: string
          in: query
          name: scope
          description: 'When using `...jwt-bearer` (assertion) or `refresh_token` grant:  The scopes to be used rather than scope from assertion or from previous refresh token. `offline_access` scope may not be used by assertion grants, and scopes can only be permanently narrowed [check?] for refresh token grants.'
        - schema:
            type: string
          in: query
          name: code_verifier
          description: 'When using `authorization_code`: The PKCE code verifier for the `code_challenge` presented to the authorization endpoint starting this flow. This is used to protect against security attacks and should be used by all, but [is required for public clients].'
      tags:
        - Single-Sign-On
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  '/{partnerID}/oauth2/logout':
    get:
      summary: OpenID Logout
      operationId: openid-logout
      responses:
        '200':
          description: OK
      x-lifecycle:
        status: trustedTester
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Trusted Tester`

        Browsers can be directed to this endpoint to logout. This will end the User's Session at Single-Sign-On and Sessions in other services which were accessed using the Single-Sign-On Session.

        This operation has no security necessarily, but logout can only act upon a browser's session via the request's `vig_session` cookie.
      parameters:
        - schema:
            type: string
          in: query
          name: post_logout_redirect_uri
          description: 'URI to redirect to after logout.'
        - schema:
            type: string
          in: query
          name: namespace
          description: 'Used as the partnerID if the endpoint is called without a partnerID in the path (`/oauth2/token`), and is required when doing so.'
        - schema:
            type: string
          in: cookie
          name: vig-namespaced-session
          description: 'Cookie for a Vendasta Identity Gateway session, stored at namespaced paths.'
          required: true
      #        - schema:
      #            type: string
      #          in: query
      #          name: id_token_hint
      #          description: 'Not yet implemented. The identity token of user requesting logout, required when `post_logout_redirect_uri`.'
      tags:
        - Single-Sign-On
      security: [ ]
    parameters:
      - schema:
          type: string
        name: partnerID
        in: path
        required: true
        description: Partner ID providing identity namespacing
  /oauth2/user-info:
    get:
      summary: OpenID User Info
      operationId: openid-userinfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    sub: '248289761001'
                    name: Jane Doe
                    given_name: Jane
                    family_name: Doe
                    preferred_username: j.doe
                    email: janedoe@example.com
                    picture: 'http://example.com/janedoe/me.jpg'
                properties:
                  sub:
                    type: string
                    minLength: 1
                  name:
                    type: string
                    minLength: 1
                  given_name:
                    type: string
                    minLength: 1
                  family_name:
                    type: string
                    minLength: 1
                  preferred_username:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  picture:
                    type: string
                    minLength: 1
                  namespace:
                    type: string
                  product_navbar_data_url:
                    type: string
                required:
                  - sub
                  - name
                  - given_name
                  - family_name
                  - preferred_username
                  - email
                  - picture
          headers: {}
      x-lifecycle:
        status: trustedTester
      description: |-
        [Status](https://developers.vendasta.com/platform/ZG9jOjEwMTU2NTYy-versioning): `Trusted Tester`

        This is the OpenID UserInfo endpoint, used for obtaining scoped identity data relating to the bearer token's associated User.

        Requires an access token scoped to at least one of the following supported scopes: `openid`, `email`, `profile`.

        `openid` or any other supported scope returns the basic user info response:
        - the `sub` field (this is the User's id)
        - the `namespace` which that User is stored within
        - the `product_navbar_data_url` which is a URL which can be used to embed Vendasta's Product Navbar in your application [reference needed].

        `profile` returns the additional following fields: name, family_name, given_name, middle_name, nickname, preferred_username, locale, and updated_at. This also returns the custom field: `roles`, which is a list of the roles associated with this User [needs relation to the APIs]. 
        Note: This scope will also return the following fields once implemented: profile, picture, website, gender, birthdate, zoneinfo.

        `email` returns the additional following fields: email and email_verified.

        Note: a legacy full-scope token is also allowed access to `profile` at this endpoint. 
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Access token. See operation description for details on required scopes, and how scopes affect the request..'
      tags:
        - Single-Sign-On
      security:
        - OAuth2:
            - openid
            - email
            - profile
    parameters: []
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://sso-api-demo.apigateway.co/oauth2/auth'
          tokenUrl: 'https://sso-api-demo.apigateway.co/oauth2/token'
          refreshUrl: ''
          scopes:
            openid: User's ID. See additional details at User Info operation.
            email: User's Email and Email Verified.
            profile: User's full personal profile. See details at User Info operation.
      description: ''
  schemas: null
tags:
  - name: Single-Sign-On
